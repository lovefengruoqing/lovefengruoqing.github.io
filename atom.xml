<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纯爱枫若情的博客</title>
  <subtitle>前端新手的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuzhiqin.tk/"/>
  <updated>2017-03-20T09:25:32.357Z</updated>
  <id>http://www.wuzhiqin.tk/</id>
  
  <author>
    <name>纯爱枫若情</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS下git最新版本的安装方法</title>
    <link href="http://www.wuzhiqin.tk//blog/CentOS%E4%B8%8Bgit%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95.html"/>
    <id>http://www.wuzhiqin.tk//blog/CentOS下git最新版本的安装方法.html</id>
    <published>2017-03-20T08:46:24.000Z</published>
    <updated>2017-03-20T09:25:32.357Z</updated>
    
    <content type="html"><![CDATA[<p>装完Node.js开发环境以后，同学还想装个最新版的git版本控制软件。</p>
<p>于是开始用`yum install git’</p>
<p>装完以后，发现是老版本的，于是上网搜了一下解决方法，看来只能手动编译安装了。</p>
<p>安装的过程也很麻烦，毕竟要手动编译。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>源码编译之前，先安装一些依赖：</div><div class="line">yum install  perl cpio curl curl-devel  zlib-devel openssl-develexpat-devel  gettex-devel -y</div><div class="line"></div><div class="line"><span class="regexp">//</span>下载源码包并解压</div><div class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/git/gi</span>t<span class="regexp">/archive/</span>v2.<span class="number">12.0</span>.tar.gz</div><div class="line">tar -zxvf v2.<span class="number">12.0</span>.tar.gz</div><div class="line"></div><div class="line"><span class="regexp">//</span>进入文件夹，开始编译安装</div><div class="line">make configure</div><div class="line">.<span class="regexp">/configure   --prefix=/u</span>sr<span class="regexp">/local/gi</span>t</div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="regexp">//</span>发现编译的过程中开始报错，发现缺少依赖</div><div class="line">yum -y install perl-devel</div><div class="line"></div><div class="line"><span class="regexp">//</span>继续上述编译安装过程</div><div class="line"></div><div class="line"><span class="regexp">//</span>发现还是报错，缺少依赖</div><div class="line">yum -y install build-essential tcl8.<span class="number">4</span> tk8.<span class="number">4</span> gettext</div><div class="line"></div><div class="line"><span class="regexp">//</span>继续安装，终于成功了</div><div class="line"></div><div class="line"><span class="regexp">//</span>设置环境变量</div><div class="line">ln <span class="regexp">/usr/</span>local<span class="regexp">/git/</span>bin<span class="regexp">/git /u</span>sr<span class="regexp">/bin/</span></div><div class="line"></div><div class="line"><span class="regexp">//</span>检查是否安装成功</div><div class="line">git --version</div></pre></td></tr></table></figure>
<p>总结一下吧，大致的安装过成分为以下几个步骤：</p>
<ol>
<li><p>安装依赖：<br><code>yum install  perl cpio curl curl-devel  zlib-devel openssl-develexpat-devel  gettex-devel perl-devel build-essential tcl8.4 tk8.4 gettext -y</code></p>
</li>
<li><p>下载源码包并解压：<br><code>wget https://github.com/git/git/archive/v2.12.0.tar.gz</code><br><code>tar -zxvf v2.12.0.tar.gz</code></p>
</li>
<li><p>开始编译安装：<br><code>make configure</code><br><code>./configure   --prefix=/usr/local/git</code><br><code>make &amp;&amp; make install</code></p>
</li>
<li><p>设置环境变量：<br><code>ln /usr/local/git/bin/git /usr/bin/</code></p>
</li>
<li><p>检查是否安装成功：<br><code>git --version</code></p>
</li>
</ol>
<p>总的来说，用源码编译安装的方式，比较繁琐，因为你不知道什么地方就出了问题，缺少什么依赖，特别是对于大型的软件来说，有时候编译要几个小时，中途出错了，就前功尽弃了，所以如果能在编译安装之前，找之前编译安装过的人给一份依赖软件列表，先装好依赖，那么就可靠多了。</p>
<p>对于用源码编译安装的软件，有什么好处，大概就是可控性比较高吧，毕竟装的时候可以选择性的安装想要的功能，如果用rpm包，也许就并没有那么好用了。而且有的软件没有rpm包，就只能自己用源码编译安装了。</p>
<p>引用知乎某匿名用户的回答：</p>
<blockquote>
<p>源码-&gt;二进制文件-&gt;rpm-&gt;安装</p>
<ol>
<li>源码编译生成二进制文件</li>
<li>二进制文件打包成rpm</li>
<li>rpm安装到系统当中<br>使用别的做好的rpm包源码的版本和编译参数不可控</li>
</ol>
</blockquote>
<p>想看原问题<a href="https://www.zhihu.com/question/21949923" title="点击前往" target="_blank" rel="external">点这里</a></p>
<p>在安装的过程中，参考了以下文章，有疑问的童鞋可以前去查看原文：</p>
<ol>
<li><p><a href="https://yq.aliyun.com/ziliao/43381" title="点击前往" target="_blank" rel="external">Linux（centos） 环境下如何源码编译安装git的教程</a></p>
</li>
<li><p><a href="https://blog.slogra.com/post-344.html" title="点击前往" target="_blank" rel="external">解决编译安装git出错(续)</a></p>
</li>
<li><p><a href="http://www.linuxidc.com/Linux/2010-11/29624.htm" title="点击前往" target="_blank" rel="external">在Ubuntu下安装git的过程</a></p>
</li>
</ol>
<p>另外：git源码包的下载地址为：<a href="https://github.com/git/git/releases" title="点击前往" target="_blank" rel="external">https://github.com/git/git/releases</a>，选一个你想安装的版本的源码包就行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装完Node.js开发环境以后，同学还想装个最新版的git版本控制软件。&lt;/p&gt;
&lt;p&gt;于是开始用`yum install git’&lt;/p&gt;
&lt;p&gt;装完以后，发现是老版本的，于是上网搜了一下解决方法，看来只能手动编译安装了。&lt;/p&gt;
&lt;p&gt;安装的过程也很麻烦，毕竟要手动编译
    
    </summary>
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/tags/linux/"/>
    
      <category term="centos" scheme="http://www.wuzhiqin.tk/tags/centos/"/>
    
      <category term="git" scheme="http://www.wuzhiqin.tk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux-CentOS-6.6搭建node.js开发环境的过程</title>
    <link href="http://www.wuzhiqin.tk//blog/Linux-CentOS-6-6%E6%90%AD%E5%BB%BAnode-js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%BF%87%E7%A8%8B.html"/>
    <id>http://www.wuzhiqin.tk//blog/Linux-CentOS-6-6搭建node-js开发环境的过程.html</id>
    <published>2017-03-20T03:32:24.000Z</published>
    <updated>2017-03-20T07:26:09.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同学搞了个服务器，自己不太会装node.js的开发环境，于是我主动请缨给他搭建node.js的开发环境，想想自己刚好有个博客，于是就记录下自己的搭建过程吧，以供自己查阅，也为想要自己搭建服务器端node.js开发环境的童鞋门做个参考。</p>
<h3 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h3><p>首先当然是要来检查下服务器的配置了，当然登陆服务器这个步骤就省了吧，相信看到这篇文章的人也不是没有用过Linux的小白了。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示服务器硬盘容量</span></div><div class="line">[root@localhost ~]# df -h</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/simfs       <span class="number">12</span>G  <span class="number">652</span>M   <span class="number">12</span>G   <span class="number">6</span>% /</div><div class="line">none            <span class="number">128</span>M     <span class="number">0</span>  <span class="number">128</span>M   <span class="number">0</span>% /dev/shm</div></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示系统版本</span></div><div class="line">[root@localhost ~]# <span class="keyword">cat</span> /etc/issue</div><div class="line">CentOS release 6.6 (Final)</div><div class="line">Kernel \r <span class="keyword">on</span> <span class="keyword">an</span> \<span class="built_in">m</span></div></pre></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检查系统是32位的还是64位的</span></div><div class="line">[root@localhost ~]<span class="meta"># getconf LONG_BIT</span></div><div class="line"><span class="number">32</span></div></pre></td></tr></table></figure>
<h3 id="装wget软件"><a href="#装wget软件" class="headerlink" title="装wget软件"></a>装wget软件</h3><p>检查好系统的相关情况以后，就开始正式进入我们的搭建服务器环境的过程了。</p>
<p>先装个wget软件，用来直接在命令行下载东西到服务器上，不然手动下载在上传到服务器太麻烦了。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//采用yum安装的方式安装wget</span></div><div class="line">[root@localhost ~]<span class="meta"># yum install wget -y</span></div></pre></td></tr></table></figure>
<h3 id="装gcc编译器"><a href="#装gcc编译器" class="headerlink" title="装gcc编译器"></a>装gcc编译器</h3><p>正当准备开始下载node.js源码的时候，突然想起来，编译需要gcc编译器，这小子肯定没装吧，于是，敲下<code>gcc -v</code> 然后回车，一看结果，果然没装</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//依旧采用yum方式安装</span></div><div class="line">[root@localhost ~]<span class="meta"># yum install gcc -y</span></div><div class="line"><span class="comment">//等待一段时间，装好了以后检查下是否正确安装了</span></div><div class="line">[root@localhost ~]<span class="meta"># gcc -v</span></div></pre></td></tr></table></figure>
<h3 id="开始装node-js"><a href="#开始装node-js" class="headerlink" title="开始装node.js"></a>开始装node.js</h3><p>首先采用<code>mkdir /software</code> 命令，在根目录新建一个文件夹。</p>
<p>然后<code>cd /software</code> 命令，进入文件夹，习惯性的用<code>ls</code> 检查一下文件夹里有什么东西</p>
<p>然后，上node.js的官网<a href="https://nodejs.org/en/" title="点击前往" target="_blank" rel="external">https://nodejs.org/en/</a>，进入下载页面<a href="https://nodejs.org/en/download/" title="点击前往" target="_blank" rel="external">https://nodejs.org/en/download/</a>，找到source Code，右键复制其下载链接</p>
<p>回到我们的命令行</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//在命令行输入下面命令，链接为刚刚复制的源码的下载链接</div><div class="line">[root@localhost software]<span class="comment"># wget https://nodejs.org/dist/v6.10.0/node-v6.10.0.tar.gz</span></div><div class="line"></div><div class="line">//我忐忑的敲下回车，发现惊呆我了，真是秒下啊</div><div class="line">--<span class="number">2017</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">00</span>:<span class="number">44</span>:<span class="number">29</span>--  https://nodejs.org/dist/v6.<span class="number">10.0</span>/<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line">Resolving nodejs.org... <span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">172</span>e, <span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">162</span>e, <span class="number">104.20</span>.<span class="number">22.46</span>, ...</div><div class="line">Connecting to nodejs.org|<span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">172</span>e|:<span class="number">443</span>... connected.</div><div class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</div><div class="line">Length: <span class="number">26706815</span> (<span class="number">25M</span>) [application/gzip]</div><div class="line">Saving to: `<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz'</div><div class="line"></div><div class="line"><span class="number">100</span>%[====================================================&gt;] <span class="number">26</span>,<span class="number">706</span>,<span class="number">815</span>  <span class="number">15.5M</span>/s   <span class="keyword">in</span> <span class="number">1.6s</span>    </div><div class="line"></div><div class="line"><span class="number">2017</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">00</span>:<span class="number">44</span>:<span class="number">31</span> (<span class="number">15.5</span> MB/s) - `<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz' saved [<span class="number">26706815</span>/<span class="number">26706815</span>]</div><div class="line"></div><div class="line">//用ls检查下</div><div class="line">[root@localhost software]<span class="comment"># ls</span></div><div class="line"><span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line"></div><div class="line">//解压源码包，解压要等待一会儿</div><div class="line">[root@localhost software]<span class="comment"># tar -xzvf node-v6.10.0.tar.gz</span></div><div class="line"></div><div class="line">//解压成功</div><div class="line">[root@localhost software]<span class="comment"># ls</span></div><div class="line"><span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>  <span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line"></div><div class="line">// cd到<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>目录</div><div class="line">[root@localhost software]<span class="comment"># cd node-v6.10.0</span></div><div class="line"></div><div class="line">//怀着激动的心情，开始编译（漫长的等待……）</div><div class="line">[root@localhost software]<span class="comment"># ./configure </span></div><div class="line">[root@localhost software]<span class="comment"># make</span></div><div class="line"></div><div class="line">//开始安装</div><div class="line">[root@localhost software]<span class="comment"># make install</span></div></pre></td></tr></table></figure>
<p>如果上述步骤，你成功了，恭喜你，你已经成功的安装了node.js最新版本。但是很遗憾，我在同学的服务器上一直编译没通过，太多依赖没安装了，懒得给他一个个手动安装了，太耗时间了……于是我放弃了源码的安装，采用一种投机取巧的方式</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//yum安装EPEL库</div><div class="line">[root@localhost ~]<span class="comment"># yum install epel-release</span></div><div class="line"></div><div class="line">//yum安装<span class="keyword">node</span>.<span class="title">js</span></div><div class="line">[root@localhost ~]<span class="comment"># yum install nodejs -y</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>的安装情况，发现版本太低</div><div class="line">[root@localhost ~]<span class="comment"># nodejs -v</span></div><div class="line">v0.<span class="number">10.48</span></div><div class="line"></div><div class="line">//先安装npm包管理工具</div><div class="line">[root@localhost ~]<span class="comment"># yum install npm -y</span></div><div class="line"></div><div class="line">//升级npm到最新版本</div><div class="line">[root@localhost ~]<span class="comment"># npm install -g npm</span></div><div class="line"></div><div class="line">//安装<span class="keyword">node</span>.<span class="title">js</span>版本管理工具</div><div class="line">[root@localhost ~]<span class="comment"># npm install -g n</span></div><div class="line"></div><div class="line">//升级<span class="keyword">node</span>.<span class="title">js</span>到稳定版本</div><div class="line">[root@localhost ~]<span class="comment"># n stable</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>版本，发现没有生效</div><div class="line">[root@localhost ~]<span class="comment"># node -v</span></div><div class="line"></div><div class="line">//编辑环境配置文件：</div><div class="line">[root@localhost ~]<span class="comment"># vim ~/.bash_profile</span></div><div class="line"></div><div class="line">//将下面两行代码插入到文件末尾：</div><div class="line">export <span class="attr">N_PREFIX=</span>/opt/<span class="keyword">node</span> <span class="title">#node</span>实际安装位置，我的电脑上是/usr/local/n/versions/<span class="keyword">node</span><span class="title">/</span></div><div class="line">export <span class="attr">PATH=</span>$N_PREFIX/bin:$PATH</div><div class="line"></div><div class="line">//再次执行升级<span class="keyword">node</span>.<span class="title">js</span>到稳定版本的命令</div><div class="line">[root@localhost ~]<span class="comment"># n stable</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>版本，安装成功了</div><div class="line">[root@localhost ~]<span class="comment"># node -v</span></div><div class="line">v7.<span class="number">6.0</span></div></pre></td></tr></table></figure>
<h3 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个Mongodb的yum源</span></div><div class="line">[root<span class="meta">@localhost</span> ~] vim <span class="regexp">/etc/</span>yum.repos.d/mongodb-org<span class="number">-3.4</span>.repo</div><div class="line"></div><div class="line"><span class="comment">//将文件内容改成,保存退出</span></div><div class="line">[mongodb-org<span class="number">-3.4</span>]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=<span class="string">https:</span><span class="comment">//repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgkey=<span class="string">https:</span><span class="comment">//www.mongodb.org/static/pgp/server-3.4.asc</span></div><div class="line"></div><div class="line"><span class="comment">//安装Mongodb</span></div><div class="line">[root<span class="meta">@localhost</span> ~] yum install -y mongodb-org</div></pre></td></tr></table></figure>
<p>如果你的服务器装的是64位系统，那么恭喜你，mongodb就安装成功了，但是很遗憾，我之前没反应过来，同学的这个服务器是32位系统的，结果肯定是安装失败了。</p>
<p>然后去mongodb官网看了下，发现，原来新版本的没有32位的编译好的版本，无奈只有找了一个2.6版本的32位linux编译好的文件</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/用wget下载</span></div><div class="line">[root@localhost software] wget https:/<span class="regexp">/fastdl.mongodb.org/linux</span><span class="regexp">/mongodb-linux-i686-v2.6-latest.tgz</span></div><div class="line"></div><div class="line">/<span class="regexp">/解压</span></div><div class="line">[root@localhost software] tar -xzvf mongodb-linux-i686-v2.6-latest.tgz</div><div class="line"></div><div class="line">/<span class="regexp">/复制到</span></div><div class="line">[root@localhost software] mkdir /usr<span class="regexp">/local/mongodb</span><span class="regexp">/</span></div><div class="line">[root@localhost software] # cp -r mongodb-linux-i686-v2.6-2017-02-14/* <span class="regexp">/usr/local</span><span class="regexp">/mongodb/</span></div></pre></td></tr></table></figure>
<p>到了这步mongodb就安装好了，但是现在还不能用，因为并没有添加到环境变量</p>
<p>于是回到家目录，写了两个脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># start_mongodb.sh</div><div class="line">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs --logappend  --port=27017 --fork</div><div class="line">echo &apos;mongodb started!&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># stop_mongodb.sh</div><div class="line">/usr/local/mongodb/bin/mongod  --shutdown --dbpath /usr/local/mongodb/data/</div><div class="line">echo &apos;mongodb stoped&apos;</div></pre></td></tr></table></figure>
<p>写完赋与执行权限 <code>chmod +x start_mongodb.sh stop_mongodb.sh</code> ，别忘了在执行之前，执行<code>mkdir /usr/local/mongodb/data</code> 和<code>touch /usr/local/mongodb/logs</code> 命令，前者是用来创建mongodb数据库保存的位置，后者是用来创建日志保存的文件</p>
<p>对了，为了方便启动<strong>mongo</strong> 管理数据库，在多加上下面一行命令吧</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加mongo到执行环境</span></div><div class="line">[root<span class="meta">@localhost</span> ~] ln <span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>bin<span class="regexp">/mongo /</span>usr<span class="regexp">/bin/</span>mongo</div></pre></td></tr></table></figure>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于装好了Node.js的服务器开发环境了，虽然最后装的不是同学想要的源码版本的，但是也折腾了许久。当然如果你有兴趣装源码版本的，过程也大同小异，只不过可能装的过程会更坎坷一些吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同学搞了个服务器，自己不太会装node.js的开发环境，于是我主动请缨给他搭建node.js的开发环境，想想自己刚好有个博客，于是就记录
    
    </summary>
    
      <category term="教程" scheme="http://www.wuzhiqin.tk/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://www.wuzhiqin.tk/tags/Linux/"/>
    
      <category term="node.js" scheme="http://www.wuzhiqin.tk/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>JS中&quot;for-in&quot;循环使用注意事项</title>
    <link href="http://www.wuzhiqin.tk//blog/js%E4%B8%AD-for-in-%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://www.wuzhiqin.tk//blog/js中-for-in-循环使用注意事项.html</id>
    <published>2017-03-19T06:59:30.000Z</published>
    <updated>2017-03-19T07:40:17.552Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习一本叫做<a href="https://github.com/lovefengruoqing/js-dateStructures-algorithms" title="点击前往我的Github查看具体介绍" target="_blank" rel="external">《数据结构与算法JavaScript描述》</a>的书，虽然这本书的质量并不是很高，但是对于我这个并非计算机科班出身的人来说，还算是一本不错的书。我没有学习过数据结构和算法，因此总感觉自己在写JS的过程中好像缺点什么，看别人的程序也看得懂，但是自己写就好像写不出来。写一个模块，不知道需要什么功能，不知道需要什么属性。后来看了这本书，才恍然大悟，原来是这些基本的数据结构，以及算法相关的知识我没学过，因此总是有种无从下手的感觉。</p>
<p>虽然用JS实现一种算法，并不是一个很好的主意。但是对于我这种C语言学的不精，Java也只是粗劣的涉猎过的人来说，无疑是一个学习数据结构和算法的不错的方式。</p>
<p>自己亲自构建一个队列，构建一个栈，构建一个列表，构建一个链表等过程，让我对编程有了新的认知，原来我们在写程序的是时候，并不是为了写程序而写程序，我们是带着一定目的性的。我们只是在我们使用的编程语言的基础上，通过我们编写的程序，封装抽象出我们想要的功能出来，然后向外提供一个接口。想想其实我们在做的事情，和构建一门新的更高级的编程语言也差不多了多少了，不过我们写程序的目的，并不是为了构建一门更高级的编程语言。想想，这就是编程的意义吧，通过这个过程，一步步简化操作，化繁为简。</p>
<p>废话不多说了，今天在学习，写程序的时候，开始写了这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.table = new Array(137)</span></div><div class="line">HashTable.prototype.buildChains = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(index <span class="keyword">in</span> <span class="keyword">this</span>.table)&#123;</div><div class="line">		<span class="keyword">this</span>.table[index] =[]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后发现运行的过程中，死活通过不了，一直报错，最后找到这个地方，才恍然大悟，原来要换成这样才能正确的运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.table = new Array(137)</span></div><div class="line">HashTable.prototype.buildChains = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="keyword">this</span>.table.length; i++)&#123;</div><div class="line">		<span class="keyword">this</span>.table[i] =[]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来赶紧去查了一个 <code>for-in</code> 使用的规范，原来使用的过程要判断一下是否为空，否则就会抛出程序异常的错误。</p>
<blockquote>
<p>定义和用法:<br>for/in 语句用于循环对象属性。<br>循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。<br>JavaScript 支持不同类型的循环：<br>for - 循环代码块一定的次数<br>for/in - 循环遍历对象的属性<br>while - 当指定的条件为 true 时循环指定的代码块<br>do/while - 同样当指定的条件为 true 时循环指定的代码块<br>注意： 不要使用 for/in 语句来循环数组的索引，你可以使用 for 语句替代。</p>
</blockquote>
<p>以上一段话引自<a href="http://www.runoob.com/jsref/jsref-forin.html" title="点击前往" target="_blank" rel="external">http://www.runoob.com/jsref/jsref-forin.html</a></p>
<p>原来自己一直用错<code>for-in</code>循环了^-^!!!，一直以来都用它来遍历数组，这不是一个很好的用法，还不如用for循环，要么就用forEach这个ES5中新增的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习一本叫做&lt;a href=&quot;https://github.com/lovefengruoqing/js-dateStructures-algorithms&quot; title=&quot;点击前往我的Github查看具体介绍&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>http请求的不同方法</title>
    <link href="http://www.wuzhiqin.tk//blog/http%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E6%B3%95.html"/>
    <id>http://www.wuzhiqin.tk//blog/http请求的不同方法.html</id>
    <published>2017-03-16T02:23:47.000Z</published>
    <updated>2017-03-16T04:21:38.614Z</updated>
    
    <content type="html"><![CDATA[<p>根据HTTP标准，HTTP请求卡可以使用过重请求方法。</p>
<p>HTTP1.0定义了三种请求方法：GET，POST和HEAD方法。</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>请求指定的页面信息，并返回实体主体。常见的输入网址，打开网页，一般都是采用GET方式来获取页面</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>POST就是向指定的资源去提交数据，例如提交表单或者上传文件等。数据被包含在请求体中，POST请求可能会导致新的资源的建立或者已有的资源的修改。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>允许客户端查看服务器的性能。</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>从客户端向服务器传送的数据取代指定的文档的内容。主要作用是更新指定的数据资源</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>请求服务器删除指定的资源</p>
<h3 id="CONCECT"><a href="#CONCECT" class="headerlink" title="CONCECT"></a>CONCECT</h3><p>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</p>
<h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>回显服务器收到的请求，主要用于测试或诊断</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据HTTP标准，HTTP请求卡可以使用过重请求方法。&lt;/p&gt;
&lt;p&gt;HTTP1.0定义了三种请求方法：GET，POST和HEAD方法。&lt;/p&gt;
&lt;p&gt;HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。&lt;/p
    
    </summary>
    
      <category term="http" scheme="http://www.wuzhiqin.tk/categories/http/"/>
    
    
      <category term="http" scheme="http://www.wuzhiqin.tk/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>http基础知识</title>
    <link href="http://www.wuzhiqin.tk//blog/http%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>http://www.wuzhiqin.tk//blog/http基础知识.html</id>
    <published>2017-03-16T01:35:10.000Z</published>
    <updated>2017-03-16T02:17:56.819Z</updated>
    
    <content type="html"><![CDATA[<p>发送一个http请求以后，经历过的步骤：</p>
<ol>
<li><p>发送一个域名请求以后，如常见的<code>http://www.baidu.com</code> 等，浏览器先会搜索自身的DNS缓存，看一看是否有对应域名的IP，如果没有则进行下一步操作。如果你使用的是chrome浏览器，那么输入<code>chrome://net-internals/#dns</code> 然后敲回车就能看到chrome浏览器的dns缓存</p>
</li>
<li><p>搜索操作系统自身的DNS缓存，如果没找到进行下一步操作</p>
</li>
<li><p>读取本地的host文件，windows下就是保存在<code>C:\Windows\System32\drivers\etc\hosts</code> 路径中的这个文件里面，你可以试着将常见域名的ip设置在这个文件之中，省去了dns请求这个阶段，直接通过ip访问网站</p>
</li>
<li><p>浏览器发起一个DNS的系统调用，向宽带运营商发起一个DNS请求，然后宽带运营商服务器查看本身缓存，如果找到对应的域名和IP，那么就解析成功，返回对应的IP；如果没有找到dns缓存，运营商服务器会发起一个迭代DNS的解析请求。首先会问根域的服务器，请求对应的域名的ip，根域服务器保存的是顶级域的IP地址，于是返回对应顶级域的IP给宽带运营商服务器；然后宽带运营商服务器拿着这个顶级域的IP，向这个顶级域IP发起DNS解析请求，顶级域保存着对应域名提供商的IP地址，返回给运营商服务器；运营商服务器拿着这个IP，再次发起DNS解析请求，域名提供商服务器接收到请求，返回对应域名的IP；然后运营商服务器把结果返回给操作系统内核，同时缓存在自己的服务器上；操作系统内核拿到IP，返回给浏览器。（这差不多就是在浏览器输入一个网址，到查找到对应IP的全过程）</p>
</li>
<li><p>浏览器获得域名对应的IP地址后，发起经典的HTTP“三次握手”，建立连接</p>
<blockquote>
<p>第一次<br>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br>第二次<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次<br>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。<br>注：以上内容引自百度百科<a href="http://baike.baidu.com/link?url=zThAigNNGrOdv7BdGToeZR8ZzAIrNOrE8MP2KW3ssHPIESBcGZmQpSYH9Hn5T2MN-rMjFvvhUEJtyqMAe_2k8GKRE-pN7OS4zhT0bR-7Y7vm5JjO_ODCYX6BUFI7YvTO" title="点击查看详细介绍" target="_blank" rel="external">三次握手</a></p>
</blockquote>
</li>
<li><p>TCP/IP连接建立起来以后，浏览器就可以向服务器发送HTTP请求了，比如说，用HTTP的GET方法请求一个根域里的一个域名，协议可以采取HTTP1.0的一个协议。</p>
</li>
<li><p>服务器接收到了请求，根据路径参数，经过后端的处理，将处理结果的数据返回给浏览器。如果请求是一个页面，那么将会把这个页面的html代码返回给浏览器</p>
</li>
<li><p>浏览器接收到了服务器返回的html代码，在浏览器解析和渲染这个页面的过程中，html代码中包含的js、css、图片等静态资源一样会通过上述步骤进行请求资源，然后获得对应的数据。</p>
</li>
<li><p>浏览器拿到所有的资源，对页面进行渲染，最终将一个完整的页面呈现在用户面前</p>
</li>
</ol>
<p>以上只是一个http请求过程的简单理解，真实的http请求的过程，比上面还要复杂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发送一个http请求以后，经历过的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;发送一个域名请求以后，如常见的&lt;code&gt;http://www.baidu.com&lt;/code&gt; 等，浏览器先会搜索自身的DNS缓存，看一看是否有对应域名的IP，如果没有则进行下一步操作。如果你使用的
    
    </summary>
    
      <category term="http" scheme="http://www.wuzhiqin.tk/categories/http/"/>
    
    
      <category term="http" scheme="http://www.wuzhiqin.tk/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>由JavaScript阶乘函数中的递归算法对arguments.callee属性展开的思考</title>
    <link href="http://www.wuzhiqin.tk//blog/%E7%94%B1JavaScript%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AF%B9arguments.callee%E5%B1%9E%E6%80%A7%E5%B1%95%E5%BC%80%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>http://www.wuzhiqin.tk//blog/由JavaScript阶乘函数中的递归算法对arguments.callee属性展开的思考.html</id>
    <published>2017-03-14T09:22:57.000Z</published>
    <updated>2017-03-14T13:50:52.171Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript的函数内部，包含着两者两个特殊的对象，分别是<code>arguments</code> 和 <code>this</code>。这篇文章，想讨论下arguments这个特性。</p>
<p>arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments则主要用途是保存函数的参数，但是并不仅限于此，它还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。</p>
<p>下面是一个经典的阶乘函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们都知道，定义阶乘函数的时候，一般都要用到递归算法。但是这种写法有一个不好的地方是，如果是一个有名字的函数，并且函数以后不会发生变化的话，这样用也无可厚非。但是问题是，这样做就将这个函数的执行与函数名factorial紧紧的<strong>耦合</strong> 在了一起。</p>
<p>如果我们这样用的话，就会很麻烦，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func1 = factorial;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line"></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>可以看出来，一旦原函数发生了变化，那么将会影响阶乘函数的结果。</p>
<p>为了消除这种紧密的耦合现象，我们可以使用<code>arguments.callee</code> 这个函数属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在重写这个函数以后，没有再引用函数名factorial，这样，无论引用递归函数时候用的是什么名字，都能保证正常的完成递归调用。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = factorial;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line"></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line">factorial(<span class="number">2</span>) 	<span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>但是仅仅只是思考到这里，还不是一个正确的学习的态度，我很好奇，到底arguments是一个怎样的类数组对象呢？因此我用chrome控制台写了一个这样的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>chrome浏览器可谓之Web前端开发中的利器，也是学习js的一把大杀器，丝毫不弱于任何其他语言的IDE</p>
<p>我在然后我紧接着调用这个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用递归函数，防止打印出太多的结果，如实我把参数设为1</span></div><div class="line">factorial(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">//console.log(arguments)打印出的结果</span></div><div class="line">Arguments[<span class="number">1</span>]</div><div class="line">	<span class="number">0</span>: <span class="number">1</span></div><div class="line">	callee: factorial(num)</div><div class="line">		<span class="built_in">arguments</span>: <span class="literal">null</span></div><div class="line">		caller: <span class="literal">null</span></div><div class="line">		length: <span class="number">1</span></div><div class="line">		name: <span class="string">"factorial"</span></div><div class="line">		prototype: <span class="built_in">Object</span></div><div class="line">		__proto__: ()</div><div class="line">		[[FunctionLocation]]:</div><div class="line">		[[Scopes]]: Scopes[<span class="number">1</span>]</div><div class="line">		length: <span class="number">1</span></div><div class="line">	<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.iterator): values()</div><div class="line">	__proto__: <span class="built_in">Object</span></div><div class="line"></div><div class="line"><span class="comment">// console.log(arguments.callee)打印出的结果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//递归函数执行后的值</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>看到以上的结果，我想大部分人都应该明白了，原来arguments是一个类数组对象，它就是一个数组，这个数组包含当前函数的参数列表，但是它还有一个数组通常不具备的callee属性，这个属性指向的就是当前的函数。我原本以为这个arguments.callee随着函数的变化，也会对应的发生变化，比如说下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将func1变量指向factorial对应的函数</span></div><div class="line"><span class="keyword">var</span> func1 = factorial</div><div class="line"></div><div class="line"><span class="comment">//将factorial重写</span></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//执行func1函数调用</span></div><div class="line">func1(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="comment">//console.log(arguments)打印出的结果</span></div><div class="line"> [<span class="number">1</span>] 	<span class="comment">//类数组对象</span></div><div class="line"><span class="comment">// console.log(arguments.callee)打印出的结果</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//递归函数执行后得到的值</span></div><div class="line"> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>可以看到的是，虽然我修改了factorial函数，但是此时，arguments.callee调用的却仍然是原来的factorial函数，于是接下来我打印了以下此时func1函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(func1)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来，你执行<code>var func1 = factorial</code> 这项操作以后，就相当于给func1存了一份factorial函数的副本，你修改了windows中的factorial，却不会修改这个副本。</p>
<p>但是问题又来了，如果我不用递归，也就是采用这种<code>return num*factorial(num-1)</code> 的方式呢？是不是也是存了一个副本，但是为什么执行的结果却不一样呢？为了印证我的猜测，我做了如下调整：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//赋给变来那个func2</span></div><div class="line"><span class="keyword">var</span> func2 = factorial</div><div class="line"></div><div class="line"><span class="comment">//改变factorial函数</span></div><div class="line">factorial=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//执行func2(1)</span></div><div class="line">func2(<span class="number">1</span>)</div><div class="line">[<span class="number">1</span>]</div><div class="line">	<span class="number">0</span>: <span class="number">1</span></div><div class="line">	callee: factorial(num)</div><div class="line">	length: <span class="number">1</span></div><div class="line">	<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.iterator): values()</div><div class="line">	__proto__: <span class="built_in">Object</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">//打印func2函数</span></div><div class="line"><span class="built_in">console</span>.log(func2)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来，基本没什么变化，func2同样是copy了一遍开始的factorial函数的，保存了副本，即使修改了factorial函数以后，这个副本也没有发生任何变化，但是此时执行<code>func2(1)</code> 得到的结果却大相径庭的，等于了0。</p>
<p>这是为什么呢？</p>
<p>我思考了很久，得出了以下结论：</p>
<blockquote>
<p>原来，根本就没有这么复杂。当你把a函数赋给b函数的时候，相当于copy了a函数当时状态的一个副本给b函数（注：姑且这么理解吧，其实函数的名字只不过是一个指针而已，指向堆内存中存储的一个函数。将a函数赋给b函数，就是将a的指针复制给b一份，后来修改了a，就导致a的指针指向修改后的函数，但是b指向的堆中的那个函数并没有发生变化。），除非你直接修改b函数存下来的这个副本，否则，你修改原函数a是不会对这个副本造成什么副作用。但是如果这个副本里，引用了这个原函数a本身的话。在执行的过程中，他就会调用这个修改后的a函数了。我觉得原因是因为，这个a函数与b函数是存在于window作用域中的，但是这个副本并不是，它只是一直保持着那个赋值时候的状态，只不过JavaScript执行环境偷了一个懒，没有把这个副本函数的名字给替换成b的变量名而已。但其实这个副本函数的名字没什么作用了，也只是一个代号而已，你无法在函数中用这个副本的名字调用它本身，只能用<code>arguments.callee</code> 而以。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript的函数内部，包含着两者两个特殊的对象，分别是&lt;code&gt;arguments&lt;/code&gt; 和 &lt;code&gt;this&lt;/code&gt;。这篇文章，想讨论下arguments这个特性。&lt;/p&gt;
&lt;p&gt;arguments是一个类数组对象，包含着传入函数中的所有参
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发过程中的一些基本概念(持续更新……)</title>
    <link href="http://www.wuzhiqin.tk//blog/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E2%80%A6%E2%80%A6%EF%BC%89.html"/>
    <id>http://www.wuzhiqin.tk//blog/前端开发过程中的一些基本概念（持续更新……）.html</id>
    <published>2017-03-14T01:30:25.000Z</published>
    <updated>2017-03-14T09:14:18.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="物理像素（physical-pixel）"><a href="#物理像素（physical-pixel）" class="headerlink" title="物理像素（physical pixel）"></a>物理像素（physical pixel）</h3><p>像素是指，显示器上最小的物理显示单元。在操作系统的调度下，每一个设备显示的最大分辨率就叫最大物理像素</p>
<h3 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h3><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。</p>
<p>可以看出来，物理像素和设备独立像素之间是存在一定的对应关系的，这个对应关系就是接下来要说的 <strong>设备像素比</strong> </p>
<h3 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h3><p>设备像素比，简称dpr，定义了物理像素和设备独立像素之间的对应关系，它的值可以表示为下面的公式：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">dpr</span> = 物理像素/设备独立像素		//在X方向或者Y方向上</div></pre></td></tr></table></figure>
<p>在JavaScript中，可以通过 <code>window.devicePixelRatio</code> 获取到当前设备的dpr。</p>
<p>而在css中，可以通过 <code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code> 和 <code>-webkit-max-device-pixel-ratio</code> 进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p>
<hr>
<p>先看一张图片</p>
<p><img src="http://wx3.sinaimg.cn/large/7235c1ccly1fdm4tzqh1cg20q70f9q32.gif" alt="img" title="非原创，图片来自网络"></p>
<p>由上图可以看出，同样是<code>height: 2px; width: 2px;</code> 的css样式，但是所包含的像素点的个数是不同的，前者是4个，而后者是前者的4倍为16个像素点。</p>
<p>因此在不同的屏幕上，虽然css所呈现的大小（物理尺寸）是一致的，但是所对应的物理像素个数可能并不相同。</p>
<hr>
<h3 id="位图像素"><a href="#位图像素" class="headerlink" title="位图像素"></a>位图像素</h3><p>位图像素是栅格图像（如：png，jpg，gif等）最小的数据单元，每一个位图像素都包含着一些自身的信息（如：颜色，透明度等）</p>
<p>我想这时候，有的童鞋就应该明白了为什么有的图片在有的屏幕上为什么显示起来不清晰的原因了。通常情况下，一个位图像素对应一个物理像素的情况下，图片会完美清晰地展示在屏幕上。但是在某些屏幕上，如retina屏幕，一个位图像素对应四个物理像素（retina屏幕的dpr为2）如下图所示的状况：</p>
<p><img src="http://wx3.sinaimg.cn/large/7235c1ccly1fdm5b9dsspj20du04mt8w.jpg" alt="img" title="图片来自网络"></p>
<p>由于正常情况下，一个位图像素不会再进行分割，因此只能就近取色，从而导致图片产生模糊的情况。</p>
<p>因此，对于这个问题的解决方案，最好的就是采用多倍像素图片的方式。</p>
<p>比如，你需要一张<code>200x400px</code> 的图片，那么你提供一张<code>400x800px</code> 的图片，就能很好的解决在retina屏幕上显示不清晰的状况了。</p>
<p>也许有的童鞋又要问了，你每一个px的位图像素素点的个数变成了原来的4倍，虽然在retina屏幕上，刚好能够高清的显示，但是在普通的屏幕上一个物理像素点就会对应4个位图像素点，这样图片显示起来不还是会失真吗？</p>
<p>肯定会出现这个问题，这个问题的解决方案，就是通过一个叫做<code>downsampling</code>的过程，通过一定的算法，使呈现在屏幕上的图片只有原图的位图像素点的四分之一。肉眼看上去图片不会模糊，但是还是会缺少一些锐利度，或者有点色差，但是还在接受的范围内。总比放在retina屏幕上图片变模糊要来得更舒适一些吧，下面这张图片就显示了这个过程：</p>
<p><img src="http://wx1.sinaimg.cn/large/7235c1ccly1fdm5rtmwidj20du04j3yp.jpg" alt="img" title="图片来自网络"></p>
<p>但是用这个方法在移动端页面的开发过程中还是会存在着一定的问题，不管什么样的屏幕都加载一定的尺寸的图片，会影响用户的使用体验。本来普通的屏幕不需要加载那么大尺寸的图片，这样做不仅浪费流浪，还延缓了加载时间。</p>
<p>最好的做法就是通过css媒体查询或者javaScript的条件判断，在不同的dpr下，加载不同尺寸的图片。</p>
<h3 id="多屏适配问题"><a href="#多屏适配问题" class="headerlink" title="多屏适配问题"></a>多屏适配问题</h3><p>移动端布局，为了适配各种大屏手机，最好的方案莫过于使用相对单位<code>rem</code> </p>
<p>基于rem的原理，我们要做的就是：针对不同的手机 <strong>屏幕尺寸</strong> 和 <strong>dpr</strong> 动态的改变根节点的HTML的font-size的大小（基准值）。</p>
<p>rem的计算方法如下：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">rem = document.documentElement.clientWidth * dpr /10</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><code>document.documentElement.clientWidth</code> 查询浏览器窗口的宽度</li>
<li><code>dpr</code> 为了在高清屏幕如retina上缩放（scale）<code>1/dpr</code> 倍</li>
<li>除以10，是为了取整，方便计算</li>
</ol>
<p>对于具体怎么实现，主要有两种方式</p>
<p>第一种：<br>css方式，可以通过媒体查询来得到设备的宽度，从而改变html的font-size:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 32<span class="selector-tag">px</span>);</div><div class="line"></div><div class="line"><span class="comment">/* iphone6 */</span></div><div class="line">@<span class="keyword">media</span> (min-device-width: <span class="number">375px</span>)&#123;</div><div class="line">	<span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 64<span class="selector-tag">px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* iphone6 plus */</span></div><div class="line">@<span class="keyword">media</span> (min-device-width: <span class="number">414px</span>)&#123;</div><div class="line">	<span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 75<span class="selector-tag">px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是通过这种方式来动态的改变rem基准值，其实精度是不够的，比如：宽度为360px和320px的手机，因为屏幕宽度都小于375px，所以会被同等的对待，导致rem基准值相同，而事实上他们的屏幕的宽度并不相同，他们的布局也应该有所不同。最终，我们可以得出这个的结论，采用css媒体查询的做法，能用，但是无法做到足够的精确。</p>
<p>第二种：<br>JavaScript方式，通过上面的公式，计算出rem基准值，然后写入样式，真正的做到了动态布局</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dpr, rem, scale,</div><div class="line">	head = <span class="built_in">document</span>.head,</div><div class="line">	html = <span class="built_in">document</span>.documentElement,</div><div class="line">	style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>),</div><div class="line">	meat-view = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 定义计算方法</span></div><div class="line">dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></div><div class="line">rem = html.clientWidth * dpr / <span class="number">10</span></div><div class="line">scale = <span class="number">1</span> / dpr</div><div class="line"></div><div class="line"><span class="comment">// 设置viewport，进行缩放，达到高清效果</span></div><div class="line">meat-view.setAttribute(<span class="string">'content'</span>, <span class="string">'width='</span> + dpr * html.clientWidth + <span class="string">',initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">',user-scalable=no'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 动态写入样式</span></div><div class="line">head.appendChild(style);</div><div class="line">style.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;物理像素（physical-pixel）&quot;&gt;&lt;a href=&quot;#物理像素（physical-pixel）&quot; class=&quot;headerlink&quot; title=&quot;物理像素（physical pixel）&quot;&gt;&lt;/a&gt;物理像素（physical pixel）&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="概念" scheme="http://www.wuzhiqin.tk/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>无可避免的结局</title>
    <link href="http://www.wuzhiqin.tk//blog/%E6%97%A0%E5%8F%AF%E9%81%BF%E5%85%8D%E7%9A%84%E7%BB%93%E5%B1%80.html"/>
    <id>http://www.wuzhiqin.tk//blog/无可避免的结局.html</id>
    <published>2017-03-11T00:03:17.000Z</published>
    <updated>2017-03-20T16:11:44.957Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>昨天，在跟老板有过一次不愉快的交谈以后，我辞职了，我走的是如此的毅然决然，以至于到现在我仍旧不后悔失去这份工作。</p>
<p>按理说，对于一个刚入门的前端新人来说，这个时候，能找到一份工作应该是最重要的事情，其他方面都不应该成为你顾虑的因素吧。之前我也曾经是这样想的，在自己水平不行的时候，如果能够找到一家要你的公司，就应该满怀着感恩之心去对待自己的这份工作，而不能要求太高。</p>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>其实我根本就不是一个要求很高的人，之前，利寒暑假期间，我也做过很多次社会实习实践活动。有过几次与我们专业相关的实习，不过大都是我不忍回顾的经历。</p>
<p>并非是因为我吃不了那个苦，只是因为我体验过，我才明白，原来土木行业的工作环境是这么的恶劣。除此之外，我深知我并不是一个擅长交际的人，所以我很难想象，将来毕业以后，进入工地，当一名施工员，成天跟着一群文化程度低的农民工大叔打交道，到时候，我究竟有没有能力去管理好它们。此处我并没有任何不尊重农民工大叔之意，我也是生长在农村的人，就连我爸就是一名地地道道的农民工。只是因为，我明白，一般文化程度越低的人，你可能越难以一种很优雅的方式与之打交道，对于像我我这种脸皮薄的人，说话如此的轻声细语，对他们根本就没有任何威慑力，到时候可能我自己干的痛苦，别人也觉得难受。</p>
<h3 id="决定考研"><a href="#决定考研" class="headerlink" title="决定考研"></a>决定考研</h3><p>就在我很纠结的时候，有点搞不清楚未来到底该怎么发展的时候，我选择了很多人都会选择的一条路——我决定考研，而且是考那种研究型特别强的学科。我查了很多资料，给自己初步筛选了几个考研目标，后来又一一的排除，最后把目标定在了中科院测量与地球物理研究所的 <strong>测绘工程</strong> ，这个与我们专业有点联系，但是貌似又关系不大的学科。只是因为，我学过土木工程测量，以前也进行过很多次测量实习，而且曾经还跟我们老师去过中铁大桥局的杨泗港项目部做过测量项目，对测量有着相对而言比较深入的了解，觉得自己好像能在这个方向深入的研究下去。</p>
<p>后来还一度找过很多书和资料，自己学习过测量平差相关的内容。老实说，测量平差并不是一门很好学的科目，虽然在测量相关专业是一门必修课，但是可能很多人学完了以后也还是一知半解。所以对于我这个外行人来说，无疑难度很大，想学好是一种挑战。但是我还是硬着头皮，利用课余时间坚持学了好几个月，后来由于去工地实习，才耽搁下来，但是就是这么一耽搁，就再也没拿起来了，自此成为了我人生的转折点。</p>
<h3 id="兴趣是最好的老师"><a href="#兴趣是最好的老师" class="headerlink" title="兴趣是最好的老师"></a>兴趣是最好的老师</h3><p>其实一直以来，我都对计算机有着浓厚的兴趣，但是由于家庭原因，直到上高中才开始接触计算机。但是遗憾的是，当时并没有碰到为我指明人生道路的导师，反而碰到了几个带我入坑网络游戏入坑网络小说的坑货，从此让我在堕落的道路上越走越远。高中，电脑带给我的其实是一段惨痛的不忍回首的经历，因为沉迷网络游戏、网络小说，也让我学习成绩一落千丈，从有希望考武大华科的水准，一直下降到只能读个二本的水准。</p>
<p>上了大学以来，我决心痛改前非，再也不碰网络小说和网络游戏了，其实并非是我有了很高的觉悟，只是因为我发现网络小说和网络游戏会使人沉迷，你一旦回到现实，带给你的只有无尽的空虚和落寞。这个时候，我还是没有碰到有带我入行的导师。那个时候，唯一能显示我计算机水平的大概就是，别人打字都对着键盘，而我则是不屑一顾的对着别人哂笑。</p>
<p>后来我们学了《计算机专业基础》这门课程，我发现同学之中好像就我水平最高，不由得沾沾自喜。几年以后，当我对着JavaScript代码绞尽脑汁的时候，我才会想起自己当初在《计算机专业基础》课程考试的时候那种“鹤立鸡群”的表现，简直贻笑大方。</p>
<p>后来，我发现我们专业好像并不开设C语言课程，这其实是一门我一直期待许久的课程，因为那时候“编程”对于我而言，还是一个很陌生的词汇，我希望通过C语言的学习，能够带我入门编程的世界。为了弥补这个遗憾，大二的有一段时间，我还特意的找来几本C语言的书籍，开始像模像样的学习。但是对于当时的我，那个没有任何人指导的我来说，那个甚至连用什么编辑器写C语言这个问题都要上网搜索好几天的我来说，编程语言的入门简直太难了，终于在学了几个月以后没什么成果的时候，我放弃了。</p>
<p>但是我并没有放弃对电脑的兴趣，我把注意力从编程语言移到软件上，开始学习CAD、PhotoShop等软件。后来证明我的选择并没有错，至少我CAD课程轻松地拿到了95分，计算机二级证书Office也很轻松的就拿到了，以至于我做的ppt都得到了我们老师的肯定，这对于我来说，无疑是极大的鼓舞。</p>
<p>说了这么多，好像并没有说到点子上来，但是别急，好戏即将开场，我觉得正是因为我对计算机的热爱，才驱使我坚持到了今天，“兴趣真的是最好的老师”。</p>
<h3 id="入行前端"><a href="#入行前端" class="headerlink" title="入行前端"></a>入行前端</h3><p>终于在那次实习，我彻底的与计算机结下了不解之缘。由于我对自己的专业不满意，所以想要跨行考研，但是说实话“测量平差”这门课程实在是不吸引我。当时正好在工地实习，无聊的时候，跟我一高中同学抱怨起我的境遇，他那时已经毕业了，是一名前端工程师（当然这二逼，现在也还是前端工程师，一心想着去斗鱼看女主播）。其实那时我并不了解计算机行业，根本不知道他所谓的前端工程师是干嘛的，他一听我的抱怨，就开始怂恿我搞前端开发了，当时我还一脸蒙蔽，“麻痹的，劳资连C语言都没学过，你让我当程序猿？”他听了以后，轻蔑的跟我说，“劳资，大学四年一直在LOL，后来花了三个月学了前端，现在月薪都上万了！”。当时一听我就乐了，还有这等好事，三个月就能学好？还能拿上万月薪？</p>
<p>虽然我依旧嘴硬的说要坚持我的考研梦，但是从那个时候开始，我内心的天平已经开始倾斜了，在他极具诱惑力的语言下，我居然傻逼的相信他说的话了。我开始疯狂的搜集与前端有关的资料，开始重新评估自己对未来的期许。直到后来我才明白，我果然被他忽悠了，前端根本就不是一个三个月就能学好的“技术”，没有编程功底，学起JavaScript起来痛苦不堪；没有美学功底，写出来的静态页面丑的不忍直视。要是当时我明白这一点，我肯定有一股沿着电波钻出他手机屏幕去扇他的冲动。</p>
<h4 id="容易入门的HMTL和CSS"><a href="#容易入门的HMTL和CSS" class="headerlink" title="容易入门的HMTL和CSS"></a>容易入门的HMTL和CSS</h4><p>如果有人问我，前端最吸引人的是什么地方，我肯定会回答“HTML和CSS”，不是因为你只需要几天就能入门，轻松从一个小白变成“网页小菜鸟”。只是因为，它们最直观的反映出来了你编写的代码，以一种图文的方式即刻展现了你的Idea，原来我们每天接触的页面就是这么一回事儿啊，原来我也能很轻松地写出网页出来。它们激起了我对编程的兴趣，而且还让我一只脚跨入了编程的大门之中，虽然残酷的是，你另一只脚上绑着一门叫做JavaScript的编程语言，如果你不想入门前端，JavaScript怎么能不入门呢？我在想，如果C语言也能这么吸引人，当初也许我就不会学着学着就半途而废了。因为作为一个一直以来都使用的是图形界面的电脑使用者来说，你很难想象，从windows的dos命令行上打印出几个数字，几颗星星究竟高明在哪里。</p>
<p>开始决定学习HTML的时候，我本来打算在www.w3cschool.com网站学习的，后来发现，实在是太枯燥了，对于我这种新手来说，还是看点视频比较有意思。后来通过知乎网友的推荐，看了传智播客的一个入门HTML和CSS的视频，虽然以现在我的视角来看，老师讲的的确很初级，也不够系统和详尽，但是作为一个勾起你对前端兴趣的课程来说，还是挺合格的，总比你在w3c看代码看使用方法，在慕课网看大段的文字介绍然后改几个代码提交的方式要来的更人性化，更对新手友好一些吧。</p>
<p>虽然以我目前的眼光来看，当时看得视频算不上一份优秀的学习资料，但是我当时确实学习的非常认真，用如饥似渴来形容一点也不为过。对着老师演示的代码，一行一行的在电脑上敲出来，一边还用Evernote做好笔记，生怕一不小心遗漏了什么重要的知识点。</p>
<p>我想大多数还没入行的程序员，都会有一个很头疼的问题，就是自己写出来的程序经常会出错，有时候明明都不是自己写的程序，对着案例敲出来的程序，竟然怎么编译，怎么运行都报错。甚至于更离谱的是，曾经我照着案例敲出了代码，怎么也运行不了，我甚至于都重新手打了一遍，还是运行不了。最后只得对着代码一个字符一个字符的找，还好最后终于找到bug在哪儿了，原来是打错了标点符号。也许作为一个编程老手来说，会懂得看编译器的报错信息，定位bug在哪儿，但是对于一个菜鸟来说，特别是对于一个没人指导的菜鸟来说，简直是举步维艰。</p>
<p>当然HTML和CSS的容错性做的非常好，即使你什么地方敲错了，浏览器都不会直白的告诉你错在哪儿，你要是自己没看出异常出来，或许你根本就不知道自己错了。</p>
<p>当然HTML和CSS入门确实是很容易，他们甚至都算不上编程语言，根本就不需要编写程序时候所需要具备的逻辑思维。但是这也可能就是前端的一颗糖衣炮弹吧，给你一种前端很简单的错觉，吸引着你更深入的了解前端。</p>
<h4 id="头疼的JavaScript"><a href="#头疼的JavaScript" class="headerlink" title="头疼的JavaScript"></a>头疼的JavaScript</h4><p>终于在学完（所谓的学完也就是过了一遍基本的语法而已，或许用这个词不太准确，但是那个时候的我确实这么想的。）HMTL和CSS的内容之后，我决定迫不及待的想要开启我的JavaScript学习之旅了，想想那时候我有新手普遍都具有的激情和对待未知事务的天真的想法，现在看来，那就叫“初生牛犊不怕虎”吧。</p>
<p>我想学习编程语言的时候，大多都是从基本的语法开始学的吧，当然学JavaScript也逃脱不了这个规律。当时我看得是同一个知乎的网友推荐的JavaScript教学视频，这个视频也没有逃脱上一个视频的定律，同样是质量不高。但是与HTML和CSS教学视频不一样的是，这个视频对我的吸引力简直为零，看得人简直是一种折磨，我很怀疑那个知乎网友自己真的是看这个视频入门JavaScript的吗，如果真的是的话，我倒很佩服这名网友的忍耐度和悟性。</p>
<p>其实现在想来，我还是挺佩服我自己的，对着那个视频看了十来天，最后愣是感觉好像跟刚开始看的时候，对JavaScript的理解如出一辙。然后我又开始运用搜索引擎这个强大的工具，开始搜集如何学习JavaScript。幸好这次我选择了几本知名度很高的书，而不是通过看教学视频来学习JavaScript。</p>
<h5 id="《JavaScript高级程序设计》"><a href="#《JavaScript高级程序设计》" class="headerlink" title="《JavaScript高级程序设计》"></a>《JavaScript高级程序设计》</h5><p>开始看的书是《JavaScript高级程序设计》的第三版，看书确实比看视频慢很多，但是收获到的东西也更多更全面吧，以至于虽然我了解过JavaScript这门语言的历史，但是后来每次看与JavaScript有关的书籍的时候，我每次还是会不厌其烦的把网景与微软之争当成故事看得津津有味。</p>
<p>虽然我之前诟病网友推荐的教学视频质量不高，但是毕竟潜心研究了十来天，还是有些作用的，至少在看书的时候，为我扫清了js基本的变量、语法、注释等部分的障碍。</p>
<p>国学大师王国维，在《人间词话》中说过，学习有三重境界：</p>
<blockquote>
<p>古今之成大事业、大学问者，必经过三种之境界：‘昨夜西风凋碧树。独上高楼，望尽天涯路’。此第一境也。‘衣带渐宽终不悔，为伊消得人憔悴。’此第二境也。‘众里寻他千百度，蓦然回首，那人却在，灯火阑珊处’。此第三境也。</p>
</blockquote>
<p>我觉得我好像一直都处在“望尽天涯路”的当口，一直很努力的在学习，但就是摸不到正确的门道。对于初学者来说，上来就看《JavaScript高级程序设计》这本书，的确难度挺大。书中讲的那些，什么构造对象的几种方法、什么原型之类的东西根本看不懂，越看感觉越迷糊，简直一头雾水。终于在某一天，看着看着，实在感觉难度太大，遂放弃了看后面的内容。</p>
<h5 id="《JavaScript-DOM编程艺术第二版》"><a href="#《JavaScript-DOM编程艺术第二版》" class="headerlink" title="《JavaScript_DOM编程艺术第二版》"></a>《JavaScript_DOM编程艺术第二版》</h5><p>第二本我选的是《JavaScript_DOM编程艺术第二版》，对于初学者来说，这本书的确是一本不错的书，大概花了半个月的时间，从头到尾一字一句的看了一遍，做了很多笔记，跟着书上的实例从头到尾敲了一遍，做出了demo的实际效果。看着自己一步一步从操作一个个DOM节点，到构建出一个小型的静态网站，那种成就感，现在回味起来还很是感觉很赞。但是这本书同样有他的局限性，并不是说你吃透了它，你就学透了JavaScript了，还早的很呢。你顶多只是学会了如何优雅的写JavaScript代码，理解了给网页加Js的时候要保持兼容性，要多为用户考虑。不过当时，我还并不明白这个道理，感觉自己都做出一个小型的网站出来了，好像接下来，做个京东，做个淘宝静态页面好像也难度不大，我马上就要成为了高级前端工程师，从此走上了人生的巅峰了。</p>
<p>但是现实总是这么的残酷，总是越无知的人才越觉得自己好像手握着真理的世界，马上就能所向披靡了。但是其实人的思维就只是局限在芝诺笔下的那个圆形之中，你所能看到的世界也只是你的思维所及的周边之处，越是思维深度大的人，越是感觉自己好像一无所知。</p>
<p>后来，关上书以后，我开始尝试自己去写静态页面，才发现好像我的水平也就只能写出个百度首页那种不带任何交互效果的简单的静态页面。知道这个事实以后我变得很沮丧，原来我的水平低到了一种极限，像我现在这种水平的前端工程师，有公司会要吗？</p>
<h5 id="认清自己的实力"><a href="#认清自己的实力" class="headerlink" title="认清自己的实力"></a>认清自己的实力</h5><p>那段时间我很纠结，也很惶恐，感觉自己花了一两个月时间，其间几乎用了我所有的空闲时间来敲代码，离孔子“三月不知肉味”的境界也差不了多少了，但是结果却好像并不那么令人满意。我甚至开始变得食不知味，夜不能寐了，整天忧心忡忡的担忧自己是不是做了一个错误的决定。</p>
<p>当时的那几天，我都不知道自己是以一种什么样的心情度过的。不过还好，生活并不会停下脚步来等你想好了再继续，你经历的每一分每一秒都是现场直播。</p>
<p>人可能受了打击之后，总要休息个几天才能收拾行装重装上阵吧，经过几天的消沉以后，痛定思痛以后，我觉得自己不能这样下去了，既然当初选择了这条路，怎么着也得走下去吧，怎么能因为这么点小小的打击就受不了了呢？未来的路还有很远很长，一切才刚刚开始而已。</p>
<p>想了想，冷静的分析了一下自己现在所处的状况，我还是觉得是因为自己的基础知识不牢固，所以才会导致好像自己什么都会了，但是做起来又什么都不会。于是我决定重头开始学一遍HTML、CSS和JavaScript，这一次，我还是选择了看书。当然看什么书，我自己当然没有发言权，所以说还是得感谢万能的网友，经过一番搜索，结合网友的推荐进行筛选，最后终于选了几本感觉挺不错的书，分别是Jon Duckett的《HTML &amp; CSSS——Design and Build Websites》、《CSS设计指南（第3版）》以及之前不太认真的看过前几章的《JavaScript高级程序设计》。</p>
<h4 id="好记性不如烂笔头"><a href="#好记性不如烂笔头" class="headerlink" title="好记性不如烂笔头"></a>好记性不如烂笔头</h4><p>当初选择《HTML &amp; CSSS——Design and Build Websites》这本书的时候，只是因为我第一次看见这本书的时候，就被它漂亮的版式给吸引到了，而且我看的还是英文原版的。这确实是一本适合新手入门HTML和CSS的好书，语法被分开剖析，一个个特性用法娓娓道来，书中所用的英语词汇也很初级，特别适合我这种英文水平不好的人。许多专业性的词汇，看了英文以后你才真正明白，其实根本不需要怎么记忆就很能自然而然的明白为什么要这样用，但是你要是看的是翻译过后的中文版本，你可能根本不能理解，为什么这个技术要叫这么奇怪的名字。就好比一首古诗，虽然可能我无法用通俗易懂的白话文翻译过来，但是我就那么一吟，诗里的意境就好像全部浮现在我的脑海里了，我根本不需要知道每个词汇该怎么翻译。英语也是这样，你只有深入语境，才会认识到语言之美，才会在不知不觉之中掌握其中的真谛。（咳咳……好像扯远了）</p>
<p>而《CSS设计指南（第三版）》也是一本不错的书，书中的几个案例都挺不错的，值得反复练习推敲，像响应式布局，分栏式布局等等让我受益匪浅，书里讲的盒模型中常见的清除浮动的几种方式，更是让我印象深刻，头一次让我认识到原来CSS用起来是这么的高深莫测，高手用起来就像是李寻欢手中的飞刀一般优雅且致命。</p>
<p>《JavaScript高级程序设计》这本书，虽然之前也看过前几章，但是无疑看过不代表就理解了书中的内容，这一次再看得时候，我觉得应该做点什么，加深自己的理解，不能单纯的只是走马观花了。于是我开始一边看书一边记笔记，当然不是记在纸上了，作为一个准程序员，当然得用程序员习惯的方式吧。我觉得那一段时间我打过的字，好像比我几个月敲过的都要多。经常一天下来，累积了上万字的笔记。经过这次认真细致的复习，我真的开始入门了JavaScript了，我开始学懂了，原型是什么，构造函数的不同方式之间底差别在哪里，继承的几种实现方式以及原理。但是很遗憾的是，虽然这次下来看下来我收获了很多，但是对于《JavaScript高级程序设计》这本书DOM章节之后的内容，我还是没耐心坚持学下来，可能是我还没到那个境界吧。</p>
<h3 id="与Linux结缘"><a href="#与Linux结缘" class="headerlink" title="与Linux结缘"></a>与Linux结缘</h3><p>到这里来，也许正确的学习轨迹应该是，开始着手做些前端项目，学习前端的框架吧。但是，谁曾想到，我就是这么的鬼使神差的开始想学Linux系统了，不知道是不是因为Linus大神的开源精神感召了我这个前端小菜鸟呢。</p>
<p>入门Linux，你才知道，原来写写HTML和CSS这些都是小菜一碟，碰了Linux，才为你折腾的人生拉开了序幕。慕课网的Tony老师的Linux课程，燃起了我对Linux浓厚的兴趣，从用VMware虚拟机装CentOS系统到用电脑装CentOS和window双系统，这个折腾的过程真是痛苦而又享受。曾经我还是一个只会用windows的小白，没想到一两个月以后，我就摇身一变，变成命令行噼里啪啦敲命令，系统随心所欲的装，电脑随便拆着玩的老鸟了。</p>
<p>当然这个转变的过程，可不是像我现在这样，简单的用三言两语形容出来的那么简单。曾经为了虚拟机搭建的CentOS不能上网这个问题，冥思苦想了好几天，试尽了各种办法，最后终于愉快的配置好了享受联网的快感；曾经装了CentOS以后，发现windows开机引导程序被grub引导程序覆盖了，找不到进入windows的入口了，当时我真是吓尿了，生怕硬盘被我不小心格式化了，里面可保存着我多年以来的心血啊，后来好在小心翼翼的修复了windows进入方式，发现东西还在我悬着的心才终于落地了；曾经敲命令手贱，不小心敲了 <code>rm -rf /</code> ，在我还没意识过来之前还脑抽的按了回车，而且我一直都大胆的用着root超级管理员账户，所以悲剧就是这么发生了，当时真的感觉我好想就是一个茶几，上面摆满了“悲剧”。</p>
<p>可以这么说，虽然Linux用起来很痛苦，但是痛苦的之后带来的结果却是美妙的。接触了Linux以后，你会发现不一样的世界，原来电脑还能这么用，原来还有这样的操作系统。</p>
<h3 id="重学C语言"><a href="#重学C语言" class="headerlink" title="重学C语言"></a>重学C语言</h3><p>接触了Linux，估计最吸引你的将会是C语言吧，因为整个Linux王国，就是建立在C语言的基础之上的。Linux就是一个最适合去学习c语言的环境，你可以手动编译写好的c语言程序，然后运行。这个过程，比你用IDE傻瓜式的操作，要好的多，可以从原理上理解C语言的执行过程。以前以为图形界面好像才是计算机软件的原貌，接触了Linux才发现，原来单靠文字，也是那么的有魅力。</p>
<p>以前学过C语言，但是发现自己好像早就把以前学过的忘得一干二净了，后来发现浙江大学的瓮恺教授在中国大学慕课网站上讲的C语言课程挺好的，还有配套的习题。跟着学下来以后，发现比自己以前看书好像懂得更深了，也不知道是因为我学了JavaScript的原因，还是因为翁老师的课讲的精彩，反正我是完全的被吸引住了，学完以后，C语言好像也入门了。但是你C语言入门以后才会发现，原来好戏才刚刚开始，只是刚掌握了基本的语法，那些个宏啊，C语言库，会让你有种望洋兴叹的挫败感。</p>
<p>学了C语言以后，才发现自己好像，计算机方面的基础知识太薄弱了，于是就找了几本书，简单的了解了以下计算机的发展历史，计算机基础知识，数据结构，算法等。但是这些都不是一蹴而就的事情，特别是数据结构和算法，并不是一朝一夕就能学好的，本想沿着这条路继续走下去，找来很多人推荐的《CSAPP》的英文版，还有《Algorithm》准备继续看下去，但是发现自己好像时间不太多了。转眼就就快过年了，开年来了以后就要开始找工作了呀，但是眼下前端方面的基础好像还打的不怎么样，怎么能舍本逐末呢？</p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>也许是我接触了Linux和C语言，让我开始对后端的东西开始感兴趣了起来，于是我鬼使神差的就开始学了Node.js起来。当然开始学习一门东西，总不是那么简单的，总是会走很多弯路。就像我学了一段时间以后，突然好像发现自己连node.js的门都没有摸到，都不知道为什么要require一个模块，都不知道回调函数的真正内涵到底是什么。只是跟着视频上，老师给的例子，敲下了代码，跑起来了服务器，感觉很惊喜，但是惊喜之余往往夹杂着落寞和恐惧。</p>
<p>落寞是因为好像不知道自己长期以来坚持在做的事情，到底有没有意义，恐惧是因为，好像对未来看不到什么希望，不知道自己什么时候才能一步步成长起来。</p>
<p>不过好歹坚持还是有结果的，虽然我写不出来复杂的业务，但是好歹我开始能够懂得node.js了，好像开始入门了。不过好像时间并不等人呢，转眼就是二月了，意味着就要开学了，就要开始找工作了。但是好像我还并没有做好充分的准备呢，我终于开始理解了曾经在知乎上看到过的一句话<strong>“未佩妥剑，出门便是江湖 ”</strong> 。</p>
<h3 id="第一次失败的面试经历"><a href="#第一次失败的面试经历" class="headerlink" title="第一次失败的面试经历"></a>第一次失败的面试经历</h3><p>二月份，来到学校以后，好像就开始陷入了找工作的氛围之中了。即使我发现自己好像并未准备好一切，但是我也无法在周围的同学都开始赶招聘会的时候还坐在一旁静静的敲我的代码。</p>
<p>我知道，还找不到工作就意味着失败吧。不管你付出了多大的努力，多大的艰辛，只要你还没有做成功，你就是一个失败者。没有谁会以你经历的过程来评判你，评判的标准永远只是结果。</p>
<p>于是我开始第一次认真的思考起来有关于面试这件事情了。以前一直觉得好像面试离我很远，但是只有等到你走到了不得不面对的这一刻，才发现以前自己的心里是多么的幼稚。</p>
<p>有些事情，不早不晚，就在那里，终有一天会轮到你头上，你逃也逃不掉，急也急不来。你如果不趁早去思考这件事情，趁早做好打算，等到终于到了不得不面对的那一天的时候，你就会开始手足无措，开始后悔自己没有早一步做好打算。</p>
<p>但是既然这个世界上没有后悔药吃的，所以，到了这个时候也只能迎难而上了。我怀着忐忑的心情，投下了我人生的第一份简历，投完以后，就不断地看有没有被拒绝，或者有没有人找我去面试。</p>
<p>后来等到当天晚上的时候，我居然收到了我人生的第一次面试机会，当时很惶恐也很期待吧。惶恐是因为，不知道接下来的面试，我将会碰到什么样的状况，不知道自己能否有一个很好的表现；期待是因为，找工作这件事情好像也并没有想象中的那么困难，我投出去的简历也并不是都石沉大海了。</p>
<p>虽然我好不容易得到了一次面试机会，但是因为没有面试经验，准备的时间也不充分，因此，面试的过程中，好几个问题都被问蒙了，当时回答的很不好，结果当然就被无情的拒绝了。</p>
<p>但是对我自己来说，至少是一个突破吧，开始有点被认可的感觉了。</p>
<h3 id="艰难的抉择"><a href="#艰难的抉择" class="headerlink" title="艰难的抉择"></a>艰难的抉择</h3><p>后来学校的招聘会开始变多了起来，迫于没找到工作的压力，我开始去跑各种招聘会去了，我终于开始尝到了找工作的心酸了，终于明白什么叫高不成低不就了。很多与我们土木有关的专业来我们学校招聘，但是好的单位人家又不要你，差点的待遇不好的自己又看不上。</p>
<p>后来碰到了一家还不错的单位招工程项目监理，还是个国企，待遇也不错，于是我就试着投了份简历，没想到最后真的应聘上了。但是由于监理这个行业，可能名声不太好，业内都称之为“养老行业”，所以当时我有点犹豫，到底要不要从事这个事情。当时负责招聘的经理，人也挺好，看出来了我的犹豫，主动提出来，给我几天时间让我考虑清楚以后再给他答复。</p>
<p>虽然我终于找到了一份还算不错的工作，但是我仍旧心有不甘，我就这么的放弃了我努力了大半年的事情吗？我就真的不能找到一份前端工程师的工作吗？</p>
<p>于是在回来的第二天，我又向一家it行业的公司投了简历，也就是后来我干了个把月最后辞职了的这家公司。这次居然马上就收到了回复，老板让我下午就去面试。我抱着去试试的心态，没想到去了以后，先做了一套简单的前端面试题，彼此了解了一下情况以后，老板当时就拍板决定要我了，让我下周就来上班。</p>
<p>其实我当时内心是很犹豫的，因为这家公司给的待遇着实是太低了。三个月实习期，不包食宿每个月才1200，实习期工资低我能接受，因为我是来学技术的。但是最让人无法忍受的是，实习期转正以后，还并没有成为正是员工，迎接你的将是遥遥无期的试用期，试用期的待遇不包食宿没有五险一金才2400，我都无法确定，这么点工资是否达到了个人所得税的起征点。这与我同学口中所说的高薪简直差太远了，每个月只能满足基本的温饱不说，甚至比我才找到的稳定又轻松地“监理”工作的工资差太多了。</p>
<p>但是思考了两天以后，我还是忍痛把之前的“监理”工作给委婉的拒绝了，因为这真的不是我想要干的工作，我还是无法割舍我自己的那份前端工程师的梦想。还有一个原因驱动着我去干这份低薪的前端工程师工作的原因是，老板承诺过，公司马上就要招一批有着丰富经验的前端工程师了，到时候跟着他们实习，就能快速的成长起来，再去找工作就相对容易多了。</p>
<h3 id="前端实习生"><a href="#前端实习生" class="headerlink" title="前端实习生"></a>前端实习生</h3><p>但是理想很丰满，现实很骨感。都说只有在工作压力中，你才会快速的成长起来，我觉得也是这样，所以我尽心尽力的去完成老板交给我的任务。开始的时候，老板让我去学个原型设计软件Axure，我用几天废寝忘食的去学习。然后过了几天我才明白，原来老板压根就不想花高工资招高级前端工程师，而是想把公司现有的两个实习前端工程师（除了我以外还有一个妹纸），培养成伪全栈工程师。我为什么说是伪全栈工程师呢，因为我觉得几乎很少有人能够配的上全栈工程师的称号。</p>
<p>于是接下来个把月的工作具体做了什么，我想聪明的你大概也猜到了。一直都陷在了，老板给个idea，我设计出前端模块的原型，接着修改到老板满意为止后，就开始把原型变成前端的静态页面。当然这个过程中，我也学到了很多东西，当然不是从老板那儿学的，而是老板提出来的一些稀奇古怪的要求后，我通过科学的上网方式找到了好的解决方法，于是做了以后，就变成我的经验了。</p>
<p>但是，作为一个前端工程师，整个Web链上离用户最近的人来说，多少都是有一些完美主义者的倾向的。每次我都花费大把大把的时间用在调试细节部分，力求做到完美，因为我觉得，如果我自己都不满意，那么用户用起来肯定就更不满意了。在这件事情上，我多次受到了老板的批评，他觉得我不应该花费那么多时间在细节部分上，比如不该加上无谓的<code>border-radius</code> 属性，不该频繁的调试配色让自己看得更舒服。老实说，我觉得自己做设计的能力真的不怎么样，所以，你让一个前端工程师承包了设计的工作，却不给对应的时间去精雕细琢，着实让我无法理解。</p>
<h3 id="我所理解的前端"><a href="#我所理解的前端" class="headerlink" title="我所理解的前端"></a>我所理解的前端</h3><p>我明白，工作中有摩擦是少不了的，毕竟是老板花钱让你来干活，即使你心有不爽也只能憋在心里吧。但是有些时候，人还是必须得有些坚持的吧。作为一个立志于想成为一名前端工程的人来说，我觉得最基本的原则就是要追求高性能，追求完美。如果不是这样，前端工程师存在的意义在哪儿呢？想想十几年前，那个没有前端工程师的年代，你所浏览的网页，你的上网体验。你就能明白，想成为一名优秀的前端工程师，也是任重而道远的。</p>
<p>一般来说，前端页面，基本上都是些静态资源，所以不坐复杂的交互效果的话，有些效果用js写起来也不难。但是坏就坏在我的这一点理解上，与老板起了极大地冲突。老板从来不让我写js，至少他没主动让我写过前端页面的交互效果，虽然我自己一直偷偷地在用，他也没看出来。他一直都让另外那个实习的妹纸用jQuery来写页面上的那些简单的交互效果，这一点让我非常不能理解。明明公司的前端页面很简单，交互效果用js也就几行的事情，为什么非要背上一个沉重的jQuery框架。我并不是在否认jQuery是一个优秀的js框架，它极大地简化了js的写法，尤其是在操作DOM节点的时候，简直让你爽的飞起，根本不需要费尽心思的写大段的js代码，甚至从头到尾你都不需要去思考浏览器的兼容性问题。只是我觉得对于我们这个小公司，写的都是给管理员看的简单的界面，为什么非要用这么笨重的jQuery呢？又有哪个互联网公司的管理员管理后台数据的时候会用ie7、ie8甚至ie6？</p>
<h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
    
    <summary type="html">
    
      记录我的第一份短暂的程序员工作
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="工作" scheme="http://www.wuzhiqin.tk/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>sass编译时候不支持中文字体的解决方案</title>
    <link href="http://www.wuzhiqin.tk//blog/sass%E7%BC%96%E8%AF%91%E6%97%B6%E5%80%99%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://www.wuzhiqin.tk//blog/sass编译时候不支持中文字体的解决方案.html</id>
    <published>2017-03-09T01:42:49.000Z</published>
    <updated>2017-03-09T02:02:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>今天在工作的时候，用到sass，编译的时候遇到了这个问题：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 5 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure>
<p>开始我还以为是我代码写的有问题，以为不能采用如下方式写代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font</span>: <span class="number">2rem</span>/<span class="number">2</span> <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来我将代码改成这样，不采用简写的方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">font-style</span>:  <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没想到编译还是不通过，还是报错：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 7 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure></p>
<p>后来我仔细的揣摩了以下报错的内容，然后变成下面这样，就不报错了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来是中文字体搞得鬼……后来我上网找了一下解决方案，大致有几种解决方案吧</p>
<ol>
<li><p>第一种方案:在scss文件第一行加上这行代码 <code>@charset &quot;utf-8&quot;</code> ,再次编译的时候，就不会报错，能正常的编译出来了。但是这个方法有个致命的缺点，就是太麻烦了，每次写sass之前都要加上一行这个代码，多麻烦。</p>
</li>
<li><p>第二种方案：如果你采用的是ruby环境安装的sass，那么你只需要在安装sass这个模块的目录中，找到 <code>engine.rb</code> 文件，打开以后，在最末行添上如下一行代码，然后保存退出，即可正常编译，一劳永逸的解决方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Encoding.default_external = Encoding.find(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      sass编译报错的时候，一些解决方案
    
    </summary>
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/categories/sass/"/>
    
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/tags/sass/"/>
    
      <category term="报错" scheme="http://www.wuzhiqin.tk/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性选择器</title>
    <link href="http://www.wuzhiqin.tk//blog/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>http://www.wuzhiqin.tk//blog/CSS属性选择器.html</id>
    <published>2017-03-07T02:29:31.000Z</published>
    <updated>2017-03-07T07:08:32.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规属性选择器"><a href="#常规属性选择器" class="headerlink" title="常规属性选择器"></a>常规属性选择器</h2><h3 id="根据attribute通配"><a href="#根据attribute通配" class="headerlink" title="根据attribute通配"></a>根据attribute通配</h3><p>常规的属性选择器，采用 <code>element[attribute]</code> 方式，即可选中想要的元素，然后添加对应的css样式</p>
<h3 id="根据具体的property选择"><a href="#根据具体的property选择" class="headerlink" title="根据具体的property选择"></a>根据具体的property选择</h3><p>根据具体的property选择，采用 <code>elements[attribute=property]</code> 方式，即选出对应元素上有相应属性值的元素，添加对应的css样式。</p>
<p>采用这种模式的时候，如果一个attribute有多个property属性，那么就不会被匹配上</p>
<h3 id="根据部分属性值选择"><a href="#根据部分属性值选择" class="headerlink" title="根据部分属性值选择"></a>根据部分属性值选择</h3><p>根据部分属性值选择，采用 <code>elements[attribute~=property]</code> 方式，这种方式和上一条 <strong>根据具体属性选择</strong> 方式很类似，只是在 <code>=</code> 前面加上了一个 <code>~</code> 符号。</p>
<h4 id="属性名为英文"><a href="#属性名为英文" class="headerlink" title="属性名为英文"></a>属性名为英文</h4><p>采用这种匹配模式的时候，值得注意的一点是，它匹配的是英文中的单词模式，如下面的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="zhihu"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 会被正确的匹配上，链接中的下划线被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"zhihu html"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="属性名为中文"><a href="#属性名为中文" class="headerlink" title="属性名为中文"></a>属性名为中文</h4><p>但是如果attribute的property是中文写的，那么就不能够匹配的到，除非你加上空格，否则不能正确的匹配出来</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="知乎"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 不会被正确的匹配上，链接中的下划线不会被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"知乎网页"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="其他部分属性选择器"><a href="#其他部分属性选择器" class="headerlink" title="其他部分属性选择器"></a>其他部分属性选择器</h4><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[foo^=”bar”]</td>
<td>选择foo属性值以“bar”开头的所有元素</td>
</tr>
<tr>
<td>[foo$=”bar”]</td>
<td>选择foo属性值以“bar”结尾的所有元素</td>
</tr>
<tr>
<td>[foo*=”bar”]</td>
<td>选择foo属性值中包含字符串“bar”的所有元素</td>
</tr>
</tbody>
</table>
<h2 id="特定属性选择器"><a href="#特定属性选择器" class="headerlink" title="特定属性选择器"></a>特定属性选择器</h2><p>这个特定属性选择器一般用于通配所有的元素中的一类元素，采用“*”选择所有元素，基本格式如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">*[lang|="en"]&#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"><span class="comment">&lt;!-- 能够匹配前三个，而后两个不会被选中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span>Greetings!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en-au"</span>&gt;</span>G'day!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"fr"</span>&gt;</span>Bonjour!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">lang</span>=<span class="string">"cy-en"</span>&gt;</span>Jrooana!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个属性和部分属性选择器的格式有点类似，但是这个选择器有点变态的地方是，它匹配的property不是英文单词，而是一个个字母，也就是说，如果你属性值采用了中文，也能轻松匹配了。</p>
]]></content>
    
    <summary type="html">
    
      深入学习css属性选择器的笔记
    
    </summary>
    
      <category term="css" scheme="http://www.wuzhiqin.tk/categories/css/"/>
    
    
      <category term="css" scheme="http://www.wuzhiqin.tk/tags/css/"/>
    
      <category term="note" scheme="http://www.wuzhiqin.tk/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见命令令</title>
    <link href="http://www.wuzhiqin.tk//blog/hexo%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E4%BB%A4.html"/>
    <id>http://www.wuzhiqin.tk//blog/hexo常见命令令.html</id>
    <published>2017-03-05T06:08:26.000Z</published>
    <updated>2017-03-07T07:09:42.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文前的絮絮叨叨之言"><a href="#正文前的絮絮叨叨之言" class="headerlink" title="正文前的絮絮叨叨之言"></a>正文前的絮絮叨叨之言</h2><p>本人其实并不是一个很勤奋有毅力的人，之前很多曾信誓旦旦的说过要坚持下去的事情，最终大都不了了之了。回想起来，我这辈子，到现在为止，坚持最长时间的事情大概就是<em>做一名周杰伦的歌迷</em> 吧，而第二长的事情大概就是谈恋爱吧。但是其实这也并非是一件羞于开口向外人道的事情吧，毕竟，我本来就是一名普通的再普通不过的人了。个人也一直都比较懒，学过很多东西，但是由于不愿意记笔记，不愿意定期去回顾，大多忘得差不多了。这就是像我这类人的悲哀吧，从不敢开口说自己精通什么东西，只能说，自己曾经做过，并且能很快的上手。</p>
<p>昨天用hexo搭建了一个个人的博客，虽然搭好了以后，用起来很简单，建个文件放里面，敲击命令就能自动上传发布。但是你要为我每一步都要使用到哪些详细的命令，我多半回答不上来，最后打开chrome，用百度或Google找对应的操作步骤。其实想来，实在是一个很浪费时间的举措，明明自己曾经做过，会做的事情，却只记得住大概步骤，还得费心费力的去查找答案。说白了就是懒吧，既不愿意动脑筋记下来，也不愿意费力写下来。</p>
<p>想来，从下定决定当程序员的时候开始，到现在，还真的做了不少笔记。要知道，我以前上课都从来不写笔记的，即使当时迫于老师的压力写了，过后也基本不会再去翻看自己的笔记，表面上是说觉得自己的字太丑了，不愿意看，其实深层次的原因还是因为自己根本就没有用心去做这件事情吧，就像自己从来没有用心的想把自己的字练好一样。虽然做了很多的笔记，但是基本上也就当时做了，后来基本上就没怎么看过，更别说按照<strong>艾宾浩斯记忆曲线</strong> 的规则去做了。</p>
<p>絮絮叨叨的废话太多了，讲大道理好像也没什么屁用，<strong>务实</strong> 才是第一要务吧。</p>
<h2 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h2><h3 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h3><ol>
<li>hexo的安装：<code>npm install hexo -g</code> </li>
<li>hexo的升级：<code>npm update hexo -g</code> </li>
<li>hexo的初始化：<code>hexo init</code> </li>
</ol>
<p>ps:这些命令都不难，用过node.js的童鞋，学这个简直是小儿科对吧。当然可能对某些习惯于用鼠标的童鞋来说，还是很有难度的，毕竟大多数人用的都是windows系统的吧，也不喜欢用命令行操作。不过我想，对于大多数想成为程序员的童鞋来说，命令行操作只是基本功吧，不会命令行操作的童鞋赶紧偷偷去恶补下吧，简直是居家旅行必备的大杀器（咳咳……）。</p>
<h3 id="hexo的简写命令"><a href="#hexo的简写命令" class="headerlink" title="hexo的简写命令"></a>hexo的简写命令</h3><ol>
<li>新建文章：<code>hexo new &quot;文章&quot;</code> 等同于 <code>hexo n &quot;文章&quot;</code></li>
<li>生成静态资源文件：<code>hexo generate</code> 等同于 <code>hexo g</code>（话说，博主的英文单词水平太烂，经常把generate打错^_^!）</li>
<li>启动服务器： <code>hexo server</code> 等同于 <code>hexo s</code> （当然这个命令后面是可以带参数的，如更改端口号和ip等）</li>
<li>一键发布博客：<code>hexo deploy</code> 等同于 <code>hexo d</code> （这个deploy也是我经常敲错的单词之一啊^_^!）</li>
</ol>
<h3 id="可能会用到的命令"><a href="#可能会用到的命令" class="headerlink" title="可能会用到的命令"></a>可能会用到的命令</h3><ol>
<li><p><code>hexo clean</code><br>清除缓存文件，也就是清除本地缓存的静态页面文件，通俗的说就是把<code>public/</code> 文件夹给清空了，然后可以再通过<code>hexo generate</code> 重新成成静态资源文件。</p>
</li>
<li><p><code>hexo new page &quot;命令&quot;</code><br><strong>命令</strong> 可以换成<strong>about、categories、tags</strong> 等，可以生成博客中的标签、分类页面等。</p>
</li>
</ol>
<h3 id="常见的文章头的写法"><a href="#常见的文章头的写法" class="headerlink" title="常见的文章头的写法"></a>常见的文章头的写法</h3><p>每个页面都需要页面头部才能正常的生成发布，一般都是这个样子的：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> 文章标题</div><div class="line"><span class="attr">date:</span> 文章的时间</div><div class="line"><span class="attr">categories:</span> 分类</div><div class="line"><span class="attr">tags:</span></div><div class="line">	- 标签<span class="number">1</span></div><div class="line">	- 标签<span class="number">2</span></div><div class="line"><span class="attr">description:</span> 文章描述，有利于SEO吧</div><div class="line"><span class="attr">keywords:</span> 文章关键字</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文章参考了以下两篇博主的文章：<br><strong>小弟调调</strong> 博主的<a href="https://segmentfault.com/a/1190000002632530" title="点击进入参考文章" target="_blank" rel="external">hexo常用命令笔记</a><br><strong>丁盛</strong> 博主的<a href="http://www.cnblogs.com/-ding/p/6009418.html" title="点击进入参考文章" target="_blank" rel="external">Hexo 最常用的几个命令</a></p>
<p>PS：如果有兴趣的童鞋，可以自行前往阅读</p>
]]></content>
    
    <summary type="html">
    
      记录一些hexo的常用命令
    
    </summary>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/categories/hexo/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="http://www.wuzhiqin.tk//blog/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87.html"/>
    <id>http://www.wuzhiqin.tk//blog/我的第一篇博文.html</id>
    <published>2017-03-04T04:21:43.000Z</published>
    <updated>2017-03-15T13:38:33.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><p>之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏嘘不已吧。不过转念一想，只是因为自己之前的想法太过天真了吧。有些时候，自己还没有本事“造轮子”的时候，何妨不用一下拿来主义呢？只要不是全盘照抄，光copy不动脑筋，也是一种学习吧。</p>
<p>我接触前端这个领域，想来也才不到一年的时间吧，不能说取得了多大的成就，但是好歹现在两只脚都迈进了前端的大门了吧。想想一年前的这个时候，我还对这些都一无所知，现在想来，好像自己当时都活的浑浑噩噩的，每天过的都没什么动力，拒绝面对现实，压根就不敢去思考该如何面对马上就要来临的毕业季。</p>
<p>前段时间，找工作的时候，被现实来了重重的一击。我突然明白过来一个道理：“<em>其实最可怕的不是你不如别人，而是蓦然回首，你发现别人都在进步，而你依旧在原地踏步。</em>”。当然并不是说我之前一直都不明白这个道理，只不过是在那个时候，对这句话有了尤为深刻的理解。原来一直以来，我并不优秀，或者说，我曾经好像优秀过。过往的总总不过是过往云烟罢了，现实才是急需要去面对的唯一迫切的事情。人真的只有到了压力逼迫自己的时候，才会进步神速，也许存在那种有着非凡的毅力的人，但是我根本不可能是那种人。所以在那段时间里，只要我一睁开眼，就好像感觉到压力扑面而来，仿佛快要实质化了一般。对我来说，找不到工作，就等同于一个失败的人生。自己曾经所拥有的固执，拥有的高傲，拥有的冷酷，在现实的面包面前，是多么的卑微，多么的微不足道啊。</p>
<p>之前放弃考研，打算转行当程序员的时候，压根就没有深入的了解过这个行业，更加没有深入的评估过自己的实力，以为好像一切都很简单，好像自己天生就适合干这个，好像自带天赋技能点一样。一切的一切，只有在经历过痛苦，经历过失败以后才明白，原来，<strong>时间</strong>加<strong>勤奋</strong>才等同于天分吧。没有人生来就适合干某一行，没有人生来就在某件事情上点满了技能点，至少对于我等凡夫俗子来说是这样的吧。</p>
<p>曾经所经历过得一切，现在再怎么哀怨叹息都于事无补，我们要做的只是收拾好心情，重装上阵而已吧。曾经自己卑微过，懦弱过，无助过也堕落过，但是这一切都过去了，该做的是，现在努力奋斗，过好每一天，让悲剧不要再未来重演吧。</p>
<h3 id="收拾心情"><a href="#收拾心情" class="headerlink" title="收拾心情"></a>收拾心情</h3><p>今天大概花了一天的时间，建好了我人生中自建的第一个博客，还是有点小小的成就感的。以后时常写写博客，抒发一下心情，也记录以下自己生活学习的轨迹吧。</p>
<h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><ol>
<li><p>本博客，静态页面是挂载在Github-pages上面的，所以想要像我一样在弄个这个博客的童鞋，可以参考一下<a href="https://help.github.com/categories/github-pages-basics/" title="点击进入github pages介绍页面" target="_blank" rel="external">GitHub-pages</a></p>
</li>
<li><p>这个博客是参考了博主<a href="http://www.ezlippi.com/" title="点击进入ezlippi博主的博客" target="_blank" rel="external">ezlippi</a>的博客里的<a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" title="点击进入ezlippi博主的博客文章" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a>，里面内容写的很详细，如果有兴趣的童鞋可以参考博主的文章</p>
</li>
<li><p>当然，这个博客的搭建，离不开<a href="https://hexo.io/zh-cn/" title="点击进入Hexo官网" target="_blank" rel="external">Hexo</a>和<a href="http://theme-next.iissnan.com/" title="点击进入Next主题官网" target="_blank" rel="external">Next</a>的技术支持</p>
</li>
</ol>
<h3 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h3><p><em>本博客的素材资源，均来自网络。本博客非商业用途，如果原作者不允许使用，请联系我本人删除。谢谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; title=&quot;胡言乱语&quot;&gt;&lt;/a&gt;胡言乱语&lt;/h3&gt;&lt;p&gt;之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>今天做过的一道js题目解析</title>
    <link href="http://www.wuzhiqin.tk//blog/%E4%BB%8A%E5%A4%A9%E5%81%9A%E8%BF%87%E7%9A%84%E4%B8%80%E9%81%93js%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.wuzhiqin.tk//blog/今天做过的一道js题目解析.html</id>
    <published>2017-03-03T14:11:45.000Z</published>
    <updated>2017-03-04T13:03:00.375Z</updated>
    
    <content type="html"><![CDATA[<p>今天做题的时候，无意中做到一道这样的题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>, <span class="string">"value"</span>:<span class="string">"2"</span>&#125;;</div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);</div></pre></td></tr></table></figure>
<p>初看的时候，感觉好简单，当时就不加思索的给出了<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;3&quot;}</code>这个答案。后来结果可想而知，当然是做错了。当时自我感觉羞愧难当，要说这本来就是个很基础的题目，正确的答案当然是这样了：<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;21&quot;}</code>；看过答案以后，稍微思索一下，就能够得出这个答案，但是为什么初看的时候做错了呢？</p>
<p>后来想了想，归根到底，原因还是自己对<strong>JavaScript</strong>这门语言的基础知识掌握的不扎实。要说这道题目，主要考察的就是JavaScript中的<strong>Object对象</strong>、<strong>string字符串</strong>和<strong>“+”</strong>操作符的作用等知识点。如果说学JavaScript这么语言，没掌握这些基础的知识，那么你压根就不敢说自己懂JavaScript了吧。</p>
<p>具体的这些知识点的详解，在这里也不一一列举了，有太多书籍都有介绍过。如果有不懂的读者，可以自行百度或者通过看书去查阅了解。在这里，我推荐一本我觉得不错的书——《JavaScript高级程序设计》。</p>
<p>重新温习过相关的知识点以后，我又自己改动了一下题目，代码变成了这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 01</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>,<span class="string">"value"</span>:<span class="string">"2"</span>&#125;;	<span class="comment">//属性名也可以采用字符串的设置方式</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//"1"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//"2"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":"1", "value":"21"&#125;</span></div></pre></td></tr></table></figure>
<p>再改一下，变成下面的形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 02</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">key</span>:<span class="number">1</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;;	<span class="comment">//属性名也可以采用这种方式，将属性值变成数值</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":1, "value":3&#125;</span></div></pre></td></tr></table></figure>
<p>我相信，大部分入门了<strong>JavaScript</strong>这门语言的读者，看了上面两个demo变体之后，都应该一目了然，懂得了这道题的原理了。</p>
<p>编程语言的掌握真的不是一件易事，至少对于我这个刚入门的小白来说，的确是这样的。</p>
<p>本人只是一枚前端小白，以上有一些个人的拙见，若喷请轻喷，也欢迎同样跟我奋斗在前端道路上的新手童鞋跟我交流学习，我的个人邮箱是：<code>wuzhiqin@yahoo.com</code>，欢迎叨扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做题的时候，无意中做到一道这样的题：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库在Linux上的使用</title>
    <link href="http://www.wuzhiqin.tk//blog/2016%E2%80%8E-12%E2%80%8E-%E2%80%8E20%E2%80%8E-mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>http://www.wuzhiqin.tk//blog/2016‎-12‎-‎20‎-mongodb数据库在Linux上的使用.html</id>
    <published>2016-12-20T15:06:37.000Z</published>
    <updated>2017-03-21T08:01:43.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongodb数据库在Linux上的使用"><a href="#mongodb数据库在Linux上的使用" class="headerlink" title="mongodb数据库在Linux上的使用"></a>mongodb数据库在Linux上的使用</h1><h2 id="一、-mongodb的使用"><a href="#一、-mongodb的使用" class="headerlink" title="一、 mongodb的使用"></a>一、 mongodb的使用</h2><h3 id="1-which-mongod"><a href="#1-which-mongod" class="headerlink" title="(1)which mongod"></a>(1)<code>which mongod</code></h3><p>此步骤的作用是，检测mongodb是否在电脑上安装成功。</p>
<h3 id="2-mkdir-p-data-db"><a href="#2-mkdir-p-data-db" class="headerlink" title="(2)mkdir -p /data/db"></a>(2)<code>mkdir -p /data/db</code></h3><p>新建一个<code>/data/db</code> 文件夹，<code>-p</code>表示递归创建。</p>
<p>这个文件夹的作用是用来保存数据库的文件。</p>
<h3 id="3-df-lh"><a href="#3-df-lh" class="headerlink" title="(3)df -lh"></a>(3)<code>df -lh</code></h3><p>显示磁盘内存占用情况，<code>-h</code>表示人性化显示</p>
<h3 id="4-mongod-dbpath-data-db-port-27017"><a href="#4-mongod-dbpath-data-db-port-27017" class="headerlink" title="(4)mongod --dbpath=/data/db --port=27017"></a>(4)<code>mongod --dbpath=/data/db --port=27017</code></h3><p>此命令用来启动mongodb服务。</p>
<p><code>--dbpath</code>参数用来指定数据库保存的路径；<code>--port</code>参数用来指定端口，这个参数也可以不指定，如果没有指定，那么就会默认启用27017端口进行服务。</p>
<h3 id="5-mongod-dbpath-data-db-port-27017-fork-syslog"><a href="#5-mongod-dbpath-data-db-port-27017-fork-syslog" class="headerlink" title="(5)mongod --dbpath=/data/db --port=27017 --fork --syslog"></a>(5)<code>mongod --dbpath=/data/db --port=27017 --fork --syslog</code></h3><p>此命令是用采用守护进程的方式来启动mongod。</p>
<p><code>--syslog</code>代表将mongod产生的日志写入系统日志中。</p>
<h3 id="6-tail-f-var-log-messages"><a href="#6-tail-f-var-log-messages" class="headerlink" title="(6)tail -f /var/log/messages"></a>(6)<code>tail -f /var/log/messages</code></h3><p>此命令用来跟踪系统日志，当有新的日志被写入messages的时候，就会呗打印在终端界面上。</p>
<h3 id="7-关掉mongodb进程"><a href="#7-关掉mongodb进程" class="headerlink" title="(7)关掉mongodb进程"></a>(7)关掉mongodb进程</h3><p>用<code>mongod --shutdown</code>或者<code>kill 进程端口号</code>两种方式关掉mongodb进程</p>
<h3 id="8-将mongodb产生的日志写入指定文件夹"><a href="#8-将mongodb产生的日志写入指定文件夹" class="headerlink" title="(8)将mongodb产生的日志写入指定文件夹"></a>(8)将mongodb产生的日志写入指定文件夹</h3><p><code>mongod --dbpath=/data/db --port=27017 --fork --logpath=/var/log/mongod.log</code></p>
<p>表示将mongodb采用守护进程的方式运行，并且将日志写入指定路径中。</p>
<h3 id="9-另外在CentOS-7中，还可以采用一种方式启动mongodb程序"><a href="#9-另外在CentOS-7中，还可以采用一种方式启动mongodb程序" class="headerlink" title="(9)另外在CentOS 7中，还可以采用一种方式启动mongodb程序"></a>(9)另外在CentOS 7中，还可以采用一种方式启动mongodb程序</h3><p><code>service mongod start</code> 表示启用mongodb服务</p>
<p><code>service mongod stop</code>表示终止mongodb服务</p>
<p><code>service mongod restart</code>表示重启mongodb服务</p>
<p>要注意的是，此种启动方式是从官网上看到的，不知道默认系统日志会被写入到哪个路径，并且暂时还不知道数据库文件会被保存到哪个路径之中。</p>
<h2 id="二、mongodb客户端工具的使用"><a href="#二、mongodb客户端工具的使用" class="headerlink" title="二、mongodb客户端工具的使用"></a>二、mongodb客户端工具的使用</h2><h3 id="1-启动的两种方式"><a href="#1-启动的两种方式" class="headerlink" title="(1)启动的两种方式"></a>(1)启动的两种方式</h3><ol>
<li>第一种方式是直接在命令行上键入<code>mongo</code>命令，即可启动mongodb的客户端工具</li>
<li>第二种方式是指定ip地址和端口号，如<code>mongo 127.0.0.1:27017</code></li>
</ol>
<h3 id="2-显示数据库"><a href="#2-显示数据库" class="headerlink" title="(2)显示数据库"></a>(2)显示数据库</h3><p><code>show dbs</code>命令用来查看当前有哪些数据库</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin	(<span class="name">empty</span>)</div><div class="line">local	<span class="number">0.000</span>GB</div></pre></td></tr></table></figure>
<p>这两个数据库，是mongodb默认的数据库。</p>
<h3 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="(3)创建数据库"></a>(3)创建数据库</h3><p>不需要用专门的命令来创建数据库，采用<code>use example</code>命令就能切换到example数据库，当这个数据库不存在的时候，就会自动被创建。</p>
<p>但是此时你如果用<code>show dbs</code>命令依旧不能看到这个example数据库，只有当你真正的朝这个数据库中写入数据的时候，这个数据库才会被真正的创建出来</p>
<h3 id="4-创建集合"><a href="#4-创建集合" class="headerlink" title="(4)创建集合"></a>(4)创建集合</h3><p>使用<code>db.users.insert({&quot;username&quot;: &quot;fengruoqing&quot;});</code> ，创建了一个名为<code>users</code>集合，并为集合中添加第一条数据<code>({&quot;username&quot;: &quot;fengruoqing&quot;})</code></p>
<h3 id="5-显示集合"><a href="#5-显示集合" class="headerlink" title="(5)显示集合"></a>(5)显示集合</h3><p><code>show collections</code> ，显示当前数据库中的所有集合</p>
<h3 id="6-查看集合中所有数据的方法"><a href="#6-查看集合中所有数据的方法" class="headerlink" title="(6)查看集合中所有数据的方法"></a>(6)查看集合中所有数据的方法</h3><p><code>db.集合的名字.find()</code> ，就会显示集合中所有的数据</p>
<p><code>db.集合的名字.find().count()</code> ，此命令用来显示集合中含有的数据数据的条数</p>
<p><code>db.集合的名字.find({&quot;条件&quot;})</code> ，如果在<code>find()</code>中加入查找条件，就会列出所有符合条件的数据</p>
<h3 id="7-更新集合中的数据"><a href="#7-更新集合中的数据" class="headerlink" title="(7)更新集合中的数据"></a>(7)更新集合中的数据</h3><p><code>db.集合的名字.update()</code> ，使用<code>update()</code> 方法来更新函数</p>
<p><code>update({&quot;条件&quot;},{$set: {&quot;更新后的内容&quot;}},{multi: true})</code> ，第三个参数没有，或者为false的时候，默认只修改索引到的第一条数据。<br>而且如果不写<code>$set</code>关键字，与save有同样的效果。</p>
<h3 id="8-修改集合中的数据"><a href="#8-修改集合中的数据" class="headerlink" title="(8)修改集合中的数据"></a>(8)修改集合中的数据</h3><p><code>db.集合的名字.save({&quot;_id&quot;: ObjectId(&quot;xxxxxxxxxxxxxxx&quot;),&quot;key&quot;:&quot;value&quot;})</code></p>
<p>使用此命令，完全修改了集合中指定id的数据，直接就覆盖了原来的数据为新的数据</p>
<h3 id="9-删除集合中的数据"><a href="#9-删除集合中的数据" class="headerlink" title="(9)删除集合中的数据"></a>(9)删除集合中的数据</h3><p><code>db.集合的名字.remove({&#39;key&#39;:&#39;value&#39;}, true)</code></p>
<p>如果不指定第二个数据<code>true</code> 那么默认会删除所有符合K-V对的数据，如果指定了，只会删除集合里面第一个满足条件的数据</p>
<p>千万要注意的是，如果<code>remove({})</code> 里面传入了一个空的条件，那么集合中所有的数据都会被删除掉，但是这个删除数据的方法不会删除集合中的索引，只会删除数据。</p>
<p>如果要想把集合中索引和数据一并删除了，那么就必须使用这个方法<code>db.集合的名字.drop()</code></p>
<h3 id="10-导入数据"><a href="#10-导入数据" class="headerlink" title="(10)导入数据"></a>(10)导入数据</h3><p><code>mongoimport --db test --collection students --drop --file ./test.json -h 192.168.127.128:27017</code></p>
<p><code>mongoimport</code> 为导入数据的工具</p>
<p><code>--db test</code> 指定想要导入的数据库，此处为名为test的数据库</p>
<p><code>--collection  students</code> 指定想要导入的集合，此处导入名为students的集合中</p>
<p><code>--drop</code> 表示导入之前，清空这个集合中的数据</p>
<p><code>--file ./test.json</code> 指定想导入数据库的文件的路径，此处表示当前目录下的test.json文件</p>
<p><code>-h 192.168.127.128:27017</code> 指定主机和端口号</p>
<p>注意的是，导入之前要确保数据库和集合的存在性，不然可能会导入失败</p>
<h3 id="11-筛选数据"><a href="#11-筛选数据" class="headerlink" title="(11)筛选数据"></a>(11)筛选数据</h3><ol>
<li><p>精确匹配<br><code>db.students.find({&quot;key&quot;:&quot;value&quot;});</code> 精确匹配所有符合条件的数据，而且这个条件可以有多个</p>
</li>
<li><p>条件匹配<br><code>db.students.find({&quot;key&quot;: {$gt:&quot;value&quot;}});</code> 此处表示条件匹配，查找数据中“key”的值大于“value”的所有数据</p>
</li>
<li><p>或者条件<br><code>db.students.find({$or:[{&quot;key1&quot;:&quot;value2&quot;},{&quot;key2&quot;:&quot;value2&quot;}]});</code> 表示查找符合两个条件之一的数据</p>
</li>
<li><p>排序<br><code>db.students.find().sort({&quot;score.语文&quot;:1, &quot;age&quot;:1});</code><br>找到数据以后，加上<code>sort()</code>进行排序，sort函数接受排序条件，“key”里放筛选的类别，然后“value”为1；如果有多个条件，依次按条件进行调整</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mongodb数据库在Linux上的使用&quot;&gt;&lt;a href=&quot;#mongodb数据库在Linux上的使用&quot; class=&quot;headerlink&quot; title=&quot;mongodb数据库在Linux上的使用&quot;&gt;&lt;/a&gt;mongodb数据库在Linux上的使用&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="mongodb" scheme="http://www.wuzhiqin.tk/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.wuzhiqin.tk/tags/mongodb/"/>
    
  </entry>
  
</feed>
