<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纯爱枫若情的博客</title>
  <subtitle>前端新手的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuzhiqin.tk/"/>
  <updated>2017-03-13T15:41:50.961Z</updated>
  <id>http://www.wuzhiqin.tk/</id>
  
  <author>
    <name>纯爱枫若情</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无可避免的结局</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/11/%E6%97%A0%E5%8F%AF%E9%81%BF%E5%85%8D%E7%9A%84%E7%BB%93%E5%B1%80.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/11/无可避免的结局.html</id>
    <published>2017-03-11T00:03:17.000Z</published>
    <updated>2017-03-13T15:41:50.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>昨天，在跟老板有过一次不愉快的交谈以后，我辞职了，我走的是如此的毅然决然，以至于到现在我仍旧不后悔失去这份工作。</p>
<p>按理说，对于一个刚入门的前端新人来说，这个时候，能找到一份工作应该是最重要的事情，其他方面都不应该成为你顾虑的因素吧。之前我也曾经是这样想的，在自己水平不行的时候，如果能够找到一家要你的公司，就应该满怀着感恩之心去对待自己的这份工作，而不能要求太高。</p>
<h3 id="实习"><a href="#实习" class="headerlink" title="实习"></a>实习</h3><p>其实我根本就不是一个要求很高的人，之前，利寒暑假期间，我也做过很多次社会实习实践活动。有过几次与我们专业相关的实习，不过大都是我不忍回顾的经历。</p>
<p>并非是因为我吃不了那个苦，只是因为我体验过，我才明白，原来土木行业的工作环境是这么的恶劣。除此之外，我深知我并不是一个擅长交际的人，所以我很难想象，将来毕业以后，进入工地，当一名施工员，成天跟着一群文化程度低的农民工大叔打交道，到时候，我究竟有没有能力去管理好它们。此处我并没有任何不尊重农民工大叔之意，我也是生长在农村的人，就连我爸就是一名地地道道的农民工。只是因为，我明白，一般文化程度越低的人，你可能越难以一种很优雅的方式与之打交道，对于像我我这种脸皮薄的人，说话如此的轻声细语，对他们根本就没有任何威慑力，到时候可能我自己干的痛苦，别人也觉得难受。</p>
<h3 id="决定考研"><a href="#决定考研" class="headerlink" title="决定考研"></a>决定考研</h3><p>就在我很纠结的时候，有点搞不清楚未来到底该怎么发展的时候，我选择了很多人都会选择的一条路——我决定考研，而且是考那种研究型特别强的学科。我查了很多资料，给自己初步筛选了几个考研目标，后来又一一的排除，最后把目标定在了中科院测量与地球物理研究所的 <strong>测绘工程</strong> ，这个与我们专业有点联系，但是貌似又关系不大的学科。只是因为，我学过土木工程测量，以前也进行过很多次测量实习，而且曾经还跟我们老师去过中铁大桥局的杨泗港项目部做过测量项目，对测量有着相对而言比较深入的了解，觉得自己好像能在这个方向深入的研究下去。</p>
<p>后来还一度找过很多书和资料，自己学习过测量平差相关的内容。老实说，测量平差并不是一门很好学的科目，虽然在测量相关专业是一门必修课，但是可能很多人学完了以后也还是一知半解。所以对于我这个外行人来说，无疑难度很大，想学好是一种挑战。但是我还是硬着头皮，利用课余时间坚持学了好几个月，后来由于去工地实习，才耽搁下来，但是就是这么一耽搁，就再也没拿起来了，自此成为了我人生的转折点。</p>
<h3 id="兴趣是最好的老师"><a href="#兴趣是最好的老师" class="headerlink" title="兴趣是最好的老师"></a>兴趣是最好的老师</h3><p>其实一直以来，我都对计算机有着浓厚的兴趣，但是由于家庭原因，直到上高中才开始接触计算机。但是遗憾的是，当时并没有碰到为我指明人生道路的导师，反而碰到了几个带我入坑网络游戏入坑网络小说的坑货，从此让我在堕落的道路上越走越远。高中，电脑带给我的其实是一段惨痛的不忍回首的经历，因为沉迷网络游戏、网络小说，也让我学习成绩一落千丈，从有希望考武大华科的水准，一直下降到只能读个二本的水准。</p>
<p>上了大学以来，我决心痛改前非，再也不碰网络小说和网络游戏了，其实并非是我有了很高的觉悟，只是因为我发现网络小说和网络游戏会使人沉迷，你一旦回到现实，带给你的只有无尽的空虚和落寞。这个时候，我还是没有碰到有带我入行的导师。那个时候，唯一能显示我计算机水平的大概就是，别人打字都对着键盘，而我则是不屑一顾的对着别人哂笑。</p>
<p>后来我们学了《计算机专业基础》这门课程，我发现同学之中好像就我水平最高，不由得沾沾自喜。几年以后，当我对着JavaScript代码绞尽脑汁的时候，我才会想起自己当初在《计算机专业基础》课程考试的时候那种“鹤立鸡群”的表现，简直贻笑大方。</p>
<p>后来，我发现我们专业好像并不开设C语言课程，这其实是一门我一直期待许久的课程，因为那时候“编程”对于我而言，还是一个很陌生的词汇，我希望通过C语言的学习，能够带我入门编程的世界。为了弥补这个遗憾，大二的有一段时间，我还特意的找来几本C语言的书籍，开始像模像样的学习。但是对于当时的我，那个没有任何人指导的我来说，那个甚至连用什么编辑器写C语言这个问题都要上网搜索好几天的我来说，编程语言的入门简直太难了，终于在学了几个月以后没什么成果的时候，我放弃了。</p>
<p>但是我并没有放弃对电脑的兴趣，我把注意力从编程语言移到软件上，开始学习CAD、PhotoShop等软件。后来证明我的选择并没有错，至少我CAD课程轻松地拿到了95分，计算机二级证书Office也很轻松的就拿到了，以至于我做的ppt都得到了我们老师的肯定，这对于我来说，无疑是极大的鼓舞。</p>
<p>说了这么多，好像并没有说到点子上来，但是别急，好戏即将开场，我觉得正是因为我对计算机的热爱，才驱使我坚持到了今天，“兴趣真的是最好的老师”。</p>
<h3 id="入行前端"><a href="#入行前端" class="headerlink" title="入行前端"></a>入行前端</h3><p>终于在那次实习，我彻底的与计算机结下了不解之缘。由于我对自己的专业不满意，所以想要跨行考研，但是说实话“测量平差”这门课程实在是不吸引我。当时正好在工地实习，无聊的时候，跟我一高中同学抱怨起我的境遇，他那时已经毕业了，是一名前端工程师（当然这二逼，现在也还是前端工程师，一心想着去斗鱼看女主播）。其实那时我并不了解计算机行业，根本不知道他所谓的前端工程师是干嘛的，他一听我的抱怨，就开始怂恿我搞前端开发了，当时我还一脸蒙蔽，“麻痹的，劳资连C语言都没学过，你让我当程序猿？”他听了以后，轻蔑的跟我说，“劳资，大学四年一直在LOL，后来花了三个月学了前端，现在月薪都上万了！”。当时一听我就乐了，还有这等好事，三个月就能学好？还能拿上万月薪？</p>
<p>虽然我依旧嘴硬的说要坚持我的考研梦，但是从那个时候开始，我内心的天平已经开始倾斜了，在他极具诱惑力的语言下，我居然傻逼的相信他说的话了。我开始疯狂的搜集与前端有关的资料，开始重新评估自己对未来的期许。直到后来我才明白，我果然被他忽悠了，前端根本就不是一个三个月就能学好的“技术”，没有编程功底，学起JavaScript起来痛苦不堪；没有美学功底，写出来的静态页面丑的不忍直视。要是当时我明白这一点，我肯定有一股沿着电波钻出他手机屏幕去扇他的冲动。</p>
<h4 id="容易入门的HMTL和CSS"><a href="#容易入门的HMTL和CSS" class="headerlink" title="容易入门的HMTL和CSS"></a>容易入门的HMTL和CSS</h4><p>如果有人问我，前端最吸引人的是什么地方，我肯定会回答“HTML和CSS”，不是因为你只需要几天就能入门，轻松从一个小白变成“网页小菜鸟”。只是因为，它们最直观的反映出来了你编写的代码，以一种图文的方式即刻展现了你的Idea，原来我们每天接触的页面就是这么一回事儿啊，原来我也能很轻松地写出网页出来。它们激起了我对编程的兴趣，而且还让我一只脚跨入了编程的大门之中，虽然残酷的是，你另一只脚上绑着一门叫做JavaScript的编程语言，如果你不想入门前端，JavaScript怎么能不入门呢？我在想，如果C语言也能这么吸引人，当初也许我就不会学着学着就半途而废了。因为作为一个一直以来都使用的是图形界面的电脑使用者来说，你很难想象，从windows的dos命令行上打印出几个数字，几颗星星究竟高明在哪里。</p>
<p>开始决定学习HTML的时候，我本来打算在www.w3cschool.com网站学习的，后来发现，实在是太枯燥了，对于我这种新手来说，还是看点视频比较有意思。后来通过知乎网友的推荐，看了传智播客的一个入门HTML和CSS的视频，虽然以现在我的视角来看，老师讲的的确很初级，也不够系统和详尽，但是作为一个勾起你对前端兴趣的课程来说，还是挺合格的，总比你在w3c看代码看使用方法，在慕课网看大段的文字介绍然后改几个代码提交的方式要来的更人性化，更对新手友好一些吧。</p>
<p>虽然以我目前的眼光来看，当时看得视频算不上一份优秀的学习资料，但是我当时确实学习的非常认真，用如饥似渴来形容一点也不为过。对着老师演示的代码，一行一行的在电脑上敲出来，一边还用Evernote做好笔记，生怕一不小心遗漏了什么重要的知识点。</p>
<p>我想大多数还没入行的程序员，都会有一个很头疼的问题，就是自己写出来的程序经常会出错，有时候明明都不是自己写的程序，对着案例敲出来的程序，竟然怎么编译，怎么运行都报错。甚至于更离谱的是，曾经我照着案例敲出了代码，怎么也运行不了，我甚至于都重新手打了一遍，还是运行不了。最后只得对着代码一个字符一个字符的找，还好最后终于找到bug在哪儿了，原来是打错了标点符号。也许作为一个编程老手来说，会懂得看编译器的报错信息，定位bug在哪儿，但是对于一个菜鸟来说，特别是对于一个没人指导的菜鸟来说，简直是举步维艰。</p>
<p>当然HTML和CSS的容错性做的非常好，即使你什么地方敲错了，浏览器都不会直白的告诉你错在哪儿，你要是自己没看出异常出来，或许你根本就不知道自己错了。</p>
<p>当然HTML和CSS入门确实是很容易，他们甚至都算不上编程语言，根本就不需要编写程序时候所需要具备的逻辑思维。但是这也可能就是前端的一颗糖衣炮弹吧，给你一种前端很简单的错觉，吸引着你更深入的了解前端。</p>
<h4 id="头疼的JavaScript"><a href="#头疼的JavaScript" class="headerlink" title="头疼的JavaScript"></a>头疼的JavaScript</h4><p>终于在学完（所谓的学完也就是过了一遍基本的语法而已，或许用这个词不太准确，但是那个时候的我确实这么想的。）HMTL和CSS的内容之后，我决定迫不及待的想要开启我的JavaScript学习之旅了，想想那时候我有新手普遍都具有的激情和对待未知事务的天真的想法，现在看来，那就叫“初生牛犊不怕虎”吧。</p>
<p>我想学习编程语言的时候，大多都是从基本的语法开始学的吧，当然学JavaScript也逃脱不了这个规律。当时我看得是同一个知乎的网友推荐的JavaScript教学视频，这个视频也没有逃脱上一个视频的定律，同样是质量不高。但是与HTML和CSS教学视频不一样的是，这个视频对我的吸引力简直为零，看得人简直是一种折磨，我很怀疑那个知乎网友自己真的是看这个视频入门JavaScript的吗，如果真的是的话，我倒很佩服这名网友的忍耐度和悟性。</p>
<p>其实现在想来，我还是挺佩服我自己的，对着那个视频看了十来天，最后愣是感觉好像跟刚开始看的时候，对JavaScript的理解如出一辙。然后我又开始运用搜索引擎这个强大的工具，开始搜集如何学习JavaScript。幸好这次我选择了几本知名度很高的书，而不是通过看教学视频来学习JavaScript。</p>
<h5 id="《JavaScript高级程序设计》"><a href="#《JavaScript高级程序设计》" class="headerlink" title="《JavaScript高级程序设计》"></a>《JavaScript高级程序设计》</h5><p>开始看的书是《JavaScript高级程序设计》的第三版，看书确实比看视频慢很多，但是收获到的东西也更多更全面吧，以至于虽然我了解过JavaScript这门语言的历史，但是后来每次看与JavaScript有关的书籍的时候，我每次还是会不厌其烦的把网景与微软之争当成故事看得津津有味。</p>
<p>虽然我之前诟病网友推荐的教学视频质量不高，但是毕竟潜心研究了十来天，还是有些作用的，至少在看书的时候，为我扫清了js基本的变量、语法、注释等部分的障碍。</p>
<p>国学大师王国维，在《人间词话》中说过，学习有三重境界：</p>
<blockquote>
<p>古今之成大事业、大学问者，必经过三种之境界：‘昨夜西风凋碧树。独上高楼，望尽天涯路’。此第一境也。‘衣带渐宽终不悔，为伊消得人憔悴。’此第二境也。‘众里寻他千百度，蓦然回首，那人却在，灯火阑珊处’。此第三境也。</p>
</blockquote>
<p>我觉得我好像一直都处在“望尽天涯路”的当口，一直很努力的在学习，但就是摸不到正确的门道。对于初学者来说，上来就看《JavaScript高级程序设计》这本书，的确难度挺大。书中讲的那些，什么构造对象的几种方法、什么原型之类的东西根本看不懂，越看感觉越迷糊，简直一头雾水。终于在某一天，看着看着，实在感觉难度太大，遂放弃了看后面的内容。</p>
<h5 id="《JavaScript-DOM编程艺术第二版》"><a href="#《JavaScript-DOM编程艺术第二版》" class="headerlink" title="《JavaScript_DOM编程艺术第二版》"></a>《JavaScript_DOM编程艺术第二版》</h5><p>第二本我选的是《JavaScript_DOM编程艺术第二版》，对于初学者来说，这本书的确是一本不错的书，大概花了半个月的时间，从头到尾一字一句的看了一遍，做了很多笔记，跟着书上的实例从头到尾敲了一遍，做出了demo的实际效果。看着自己一步一步从操作一个个DOM节点，到构建出一个小型的静态网站，那种成就感，现在回味起来还很是感觉很赞。但是这本书同样有他的局限性，并不是说你吃透了它，你就学透了JavaScript了，还早的很呢。你顶多只是学会了如何优雅的写JavaScript代码，理解了给网页加Js的时候要保持兼容性，要多为用户考虑。不过当时，我还并不明白这个道理，感觉自己都做出一个小型的网站出来了，好像接下来，做个京东，做个淘宝静态页面好像也难度不大，我马上就要成为了高级前端工程师，从此走上了人生的巅峰了。</p>
<p>但是现实总是这么的残酷，总是越无知的人才越觉得自己好像手握着真理的世界，马上就能所向披靡了。但是其实人的思维就只是局限在芝诺笔下的那个圆形之中，你所能看到的世界也只是你的思维所及的周边之处，越是思维深度大的人，越是感觉自己好像一无所知。</p>
<p>后来，关上书以后，我开始尝试自己去写静态页面，才发现好像我的水平也就只能写出个百度首页那种不带任何交互效果的简单的静态页面。知道这个事实以后我变得很沮丧，原来我的水平低到了一种极限，像我现在这种水平的前端工程师，有公司会要吗？</p>
<h5 id="认清自己的实力"><a href="#认清自己的实力" class="headerlink" title="认清自己的实力"></a>认清自己的实力</h5><p>那段时间我很纠结，也很惶恐，感觉自己花了一两个月时间，其间几乎用了我所有的空闲时间来敲代码，离孔子“三月不知肉味”的境界也差不了多少了，但是结果却好像并不那么令人满意。我甚至开始变得食不知味，夜不能寐了，整天忧心忡忡的担忧自己是不是做了一个错误的决定。</p>
<p>当时的那几天，我都不知道自己是以一种什么样的心情度过的。不过还好，生活并不会停下脚步来等你想好了再继续，你经历的每一分每一秒都是现场直播。</p>
<p>人可能受了打击之后，总要休息个几天才能收拾行装重装上阵吧，经过几天的消沉以后，痛定思痛以后，我觉得自己不能这样下去了，既然当初选择了这条路，怎么着也得走下去吧，怎么能因为这么点小小的打击就受不了了呢？未来的路还有很远很长，一切才刚刚开始而已。</p>
<p>想了想，冷静的分析了一下自己现在所处的状况，我还是觉得是因为自己的基础知识不牢固，所以才会导致好像自己什么都会了，但是做起来又什么都不会。于是我决定重头开始学一遍HTML、CSS和JavaScript，这一次，我还是选择了看书。当然看什么书，我自己当然没有发言权，所以说还是得感谢万能的网友，经过一番搜索，结合网友的推荐进行筛选，最后终于选了几本感觉挺不错的书，分别是Jon Duckett的《HTML &amp; CSSS——Design and Build Websites》、《CSS设计指南（第3版）》以及之前不太认真的看过前几章的《JavaScript高级程序设计》。</p>
<h4 id="好记性不如烂笔头"><a href="#好记性不如烂笔头" class="headerlink" title="好记性不如烂笔头"></a>好记性不如烂笔头</h4><p>当初选择《HTML &amp; CSSS——Design and Build Websites》这本书的时候，只是因为我第一次看见这本书的时候，就被它漂亮的版式给吸引到了，而且我看的还是英文原版的。这确实是一本适合新手入门HTML和CSS的好书，语法被分开剖析，一个个特性用法娓娓道来，书中所用的英语词汇也很初级，特别适合我这种英文水平不好的人。许多专业性的词汇，看了英文以后你才真正明白，其实根本不需要怎么记忆就很能自然而然的明白为什么要这样用，但是你要是看的是翻译过后的中文版本，你可能根本不能理解，为什么这个技术要叫这么奇怪的名字。就好比一首古诗，虽然可能我无法用通俗易懂的白话文翻译过来，但是我就那么一吟，诗里的意境就好像全部浮现在我的脑海里了，我根本不需要知道每个词汇该怎么翻译。英语也是这样，你只有深入语境，才会认识到语言之美，才会在不知不觉之中掌握其中的真谛。（咳咳……好像扯远了）</p>
<p>而《CSS设计指南（第三版）》也是一本不错的书，书中的几个案例都挺不错的，值得反复练习推敲，像响应式布局，分栏式布局等等让我受益匪浅，书里讲的盒模型中常见的清除浮动的几种方式，更是让我印象深刻，头一次让我认识到原来CSS用起来是这么的高深莫测，高手用起来就像是李寻欢手中的飞刀一般优雅且致命。</p>
<p>《JavaScript高级程序设计》这本书，虽然之前也看过前几章，但是无疑看过不代表就理解了书中的内容，这一次再看得时候，我觉得应该做点什么，加深自己的理解，不能单纯的只是走马观花了。于是我开始一边看书一边记笔记，当然不是记在纸上了，作为一个准程序员，当然得用程序员习惯的方式吧。我觉得那一段时间我打过的字，好像比我几个月敲过的都要多。经常一天下来，累积了上万字的笔记。经过这次认真细致的复习，我真的开始入门了JavaScript了，我开始学懂了，原型是什么，构造函数的不同方式之间底差别在哪里，继承的几种实现方式以及原理。但是很遗憾的是，虽然这次下来看下来我收获了很多，但是对于《JavaScript高级程序设计》这本书DOM章节之后的内容，我还是没耐心坚持学下来，可能是我还没到那个境界吧。</p>
<h3 id="与Linux结缘"><a href="#与Linux结缘" class="headerlink" title="与Linux结缘"></a>与Linux结缘</h3><p>到这里来，也许正确的学习轨迹应该是，开始着手做些前端项目，学习前端的框架吧。但是，谁曾想到，我就是这么的鬼使神差的开始想学Linux系统了，不知道是不是因为Linus大神的开源精神感召了我这个前端小菜鸟呢。</p>
<p>入门Linux，你才知道，原来写写HTML和CSS这些都是小菜一碟，碰了Linux，才为你折腾的人生拉开了序幕。慕课网的Tony老师的Linux课程，燃起了我对Linux浓厚的兴趣，从用VMware虚拟机装CentOS系统到用电脑装CentOS和window双系统，这个折腾的过程真是痛苦而又享受。曾经我还是一个只会用windows的小白，没想到一两个月以后，我就摇身一变，变成命令行噼里啪啦敲命令，系统随心所欲的装，电脑随便拆着玩的老鸟了。</p>
<p>当然这个转变的过程，可不是像我现在这样，简单的用三言两语形容出来的那么简单。曾经为了虚拟机搭建的CentOS不能上网这个问题，冥思苦想了好几天，试尽了各种办法，最后终于愉快的配置好了享受联网的快感；曾经装了CentOS以后，发现windows开机引导程序被grub引导程序覆盖了，找不到进入windows的入口了，当时我真是吓尿了，生怕硬盘被我不小心格式化了，里面可保存着我多年以来的心血啊，后来好在小心翼翼的修复了windows进入方式，发现东西还在我悬着的心才终于落地了；曾经敲命令手贱，不小心敲了 <code>rm -rf /</code> ，在我还没意识过来之前还脑抽的按了回车，而且我一直都大胆的用着root超级管理员账户，所以悲剧就是这么发生了，当时真的感觉我好想就是一个茶几，上面摆满了“悲剧”。</p>
<p>可以这么说，虽然Linux用起来很痛苦，但是痛苦的之后带来的结果确实美妙的。</p>
<h3 id="未完待续……"><a href="#未完待续……" class="headerlink" title="未完待续……"></a>未完待续……</h3>]]></content>
    
    <summary type="html">
    
      记录我的第一份短暂的程序员工作
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
      <category term="工作" scheme="http://www.wuzhiqin.tk/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>sass编译时候不支持中文字体的解决方案</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/09/sass%E7%BC%96%E8%AF%91%E6%97%B6%E5%80%99%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/09/sass编译时候不支持中文字体的解决方案.html</id>
    <published>2017-03-09T01:42:49.000Z</published>
    <updated>2017-03-09T02:02:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>今天在工作的时候，用到sass，编译的时候遇到了这个问题：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 5 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure>
<p>开始我还以为是我代码写的有问题，以为不能采用如下方式写代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font</span>: <span class="number">2rem</span>/<span class="number">2</span> <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来我将代码改成这样，不采用简写的方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">font-style</span>:  <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没想到编译还是不通过，还是报错：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 7 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure></p>
<p>后来我仔细的揣摩了以下报错的内容，然后变成下面这样，就不报错了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来是中文字体搞得鬼……后来我上网找了一下解决方案，大致有几种解决方案吧</p>
<ol>
<li><p>第一种方案:在scss文件第一行加上这行代码 <code>@charset &quot;utf-8&quot;</code> ,再次编译的时候，就不会报错，能正常的编译出来了。但是这个方法有个致命的缺点，就是太麻烦了，每次写sass之前都要加上一行这个代码，多麻烦。</p>
</li>
<li><p>第二种方案：如果你采用的是ruby环境安装的sass，那么你只需要在安装sass这个模块的目录中，找到 <code>engine.rb</code> 文件，打开以后，在最末行添上如下一行代码，然后保存退出，即可正常编译，一劳永逸的解决方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Encoding.default_external = Encoding.find(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      sass编译报错的时候，一些解决方案
    
    </summary>
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/categories/sass/"/>
    
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/tags/sass/"/>
    
      <category term="报错" scheme="http://www.wuzhiqin.tk/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性选择器</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/07/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/07/CSS属性选择器.html</id>
    <published>2017-03-07T02:29:31.000Z</published>
    <updated>2017-03-07T07:08:32.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规属性选择器"><a href="#常规属性选择器" class="headerlink" title="常规属性选择器"></a>常规属性选择器</h2><h3 id="根据attribute通配"><a href="#根据attribute通配" class="headerlink" title="根据attribute通配"></a>根据attribute通配</h3><p>常规的属性选择器，采用 <code>element[attribute]</code> 方式，即可选中想要的元素，然后添加对应的css样式</p>
<h3 id="根据具体的property选择"><a href="#根据具体的property选择" class="headerlink" title="根据具体的property选择"></a>根据具体的property选择</h3><p>根据具体的property选择，采用 <code>elements[attribute=property]</code> 方式，即选出对应元素上有相应属性值的元素，添加对应的css样式。</p>
<p>采用这种模式的时候，如果一个attribute有多个property属性，那么就不会被匹配上</p>
<h3 id="根据部分属性值选择"><a href="#根据部分属性值选择" class="headerlink" title="根据部分属性值选择"></a>根据部分属性值选择</h3><p>根据部分属性值选择，采用 <code>elements[attribute~=property]</code> 方式，这种方式和上一条 <strong>根据具体属性选择</strong> 方式很类似，只是在 <code>=</code> 前面加上了一个 <code>~</code> 符号。</p>
<h4 id="属性名为英文"><a href="#属性名为英文" class="headerlink" title="属性名为英文"></a>属性名为英文</h4><p>采用这种匹配模式的时候，值得注意的一点是，它匹配的是英文中的单词模式，如下面的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="zhihu"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 会被正确的匹配上，链接中的下划线被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"zhihu html"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="属性名为中文"><a href="#属性名为中文" class="headerlink" title="属性名为中文"></a>属性名为中文</h4><p>但是如果attribute的property是中文写的，那么就不能够匹配的到，除非你加上空格，否则不能正确的匹配出来</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="知乎"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 不会被正确的匹配上，链接中的下划线不会被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"知乎网页"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="其他部分属性选择器"><a href="#其他部分属性选择器" class="headerlink" title="其他部分属性选择器"></a>其他部分属性选择器</h4><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[foo^=”bar”]</td>
<td>选择foo属性值以“bar”开头的所有元素</td>
</tr>
<tr>
<td>[foo$=”bar”]</td>
<td>选择foo属性值以“bar”结尾的所有元素</td>
</tr>
<tr>
<td>[foo*=”bar”]</td>
<td>选择foo属性值中包含字符串“bar”的所有元素</td>
</tr>
</tbody>
</table>
<h2 id="特定属性选择器"><a href="#特定属性选择器" class="headerlink" title="特定属性选择器"></a>特定属性选择器</h2><p>这个特定属性选择器一般用于通配所有的元素中的一类元素，采用“*”选择所有元素，基本格式如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">*[lang|="en"]&#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"><span class="comment">&lt;!-- 能够匹配前三个，而后两个不会被选中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span>Greetings!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en-au"</span>&gt;</span>G'day!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"fr"</span>&gt;</span>Bonjour!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">lang</span>=<span class="string">"cy-en"</span>&gt;</span>Jrooana!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个属性和部分属性选择器的格式有点类似，但是这个选择器有点变态的地方是，它匹配的property不是英文单词，而是一个个字母，也就是说，如果你属性值采用了中文，也能轻松匹配了。</p>
]]></content>
    
    <summary type="html">
    
      深入学习css属性选择器的笔记
    
    </summary>
    
      <category term="css" scheme="http://www.wuzhiqin.tk/categories/css/"/>
    
    
      <category term="css" scheme="http://www.wuzhiqin.tk/tags/css/"/>
    
      <category term="note" scheme="http://www.wuzhiqin.tk/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见命令令</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/05/hexo%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4%E4%BB%A4.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/05/hexo常见命令令.html</id>
    <published>2017-03-05T06:08:26.000Z</published>
    <updated>2017-03-07T07:09:42.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文前的絮絮叨叨之言"><a href="#正文前的絮絮叨叨之言" class="headerlink" title="正文前的絮絮叨叨之言"></a>正文前的絮絮叨叨之言</h2><p>本人其实并不是一个很勤奋有毅力的人，之前很多曾信誓旦旦的说过要坚持下去的事情，最终大都不了了之了。回想起来，我这辈子，到现在为止，坚持最长时间的事情大概就是<em>做一名周杰伦的歌迷</em> 吧，而第二长的事情大概就是谈恋爱吧。但是其实这也并非是一件羞于开口向外人道的事情吧，毕竟，我本来就是一名普通的再普通不过的人了。个人也一直都比较懒，学过很多东西，但是由于不愿意记笔记，不愿意定期去回顾，大多忘得差不多了。这就是像我这类人的悲哀吧，从不敢开口说自己精通什么东西，只能说，自己曾经做过，并且能很快的上手。</p>
<p>昨天用hexo搭建了一个个人的博客，虽然搭好了以后，用起来很简单，建个文件放里面，敲击命令就能自动上传发布。但是你要为我每一步都要使用到哪些详细的命令，我多半回答不上来，最后打开chrome，用百度或Google找对应的操作步骤。其实想来，实在是一个很浪费时间的举措，明明自己曾经做过，会做的事情，却只记得住大概步骤，还得费心费力的去查找答案。说白了就是懒吧，既不愿意动脑筋记下来，也不愿意费力写下来。</p>
<p>想来，从下定决定当程序员的时候开始，到现在，还真的做了不少笔记。要知道，我以前上课都从来不写笔记的，即使当时迫于老师的压力写了，过后也基本不会再去翻看自己的笔记，表面上是说觉得自己的字太丑了，不愿意看，其实深层次的原因还是因为自己根本就没有用心去做这件事情吧，就像自己从来没有用心的想把自己的字练好一样。虽然做了很多的笔记，但是基本上也就当时做了，后来基本上就没怎么看过，更别说按照<strong>艾宾浩斯记忆曲线</strong> 的规则去做了。</p>
<p>絮絮叨叨的废话太多了，讲大道理好像也没什么屁用，<strong>务实</strong> 才是第一要务吧。</p>
<h2 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h2><h3 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h3><ol>
<li>hexo的安装：<code>npm install hexo -g</code> </li>
<li>hexo的升级：<code>npm update hexo -g</code> </li>
<li>hexo的初始化：<code>hexo init</code> </li>
</ol>
<p>ps:这些命令都不难，用过node.js的童鞋，学这个简直是小儿科对吧。当然可能对某些习惯于用鼠标的童鞋来说，还是很有难度的，毕竟大多数人用的都是windows系统的吧，也不喜欢用命令行操作。不过我想，对于大多数想成为程序员的童鞋来说，命令行操作只是基本功吧，不会命令行操作的童鞋赶紧偷偷去恶补下吧，简直是居家旅行必备的大杀器（咳咳……）。</p>
<h3 id="hexo的简写命令"><a href="#hexo的简写命令" class="headerlink" title="hexo的简写命令"></a>hexo的简写命令</h3><ol>
<li>新建文章：<code>hexo new &quot;文章&quot;</code> 等同于 <code>hexo n &quot;文章&quot;</code></li>
<li>生成静态资源文件：<code>hexo generate</code> 等同于 <code>hexo g</code>（话说，博主的英文单词水平太烂，经常把generate打错^_^!）</li>
<li>启动服务器： <code>hexo server</code> 等同于 <code>hexo s</code> （当然这个命令后面是可以带参数的，如更改端口号和ip等）</li>
<li>一键发布博客：<code>hexo deploy</code> 等同于 <code>hexo d</code> （这个deploy也是我经常敲错的单词之一啊^_^!）</li>
</ol>
<h3 id="可能会用到的命令"><a href="#可能会用到的命令" class="headerlink" title="可能会用到的命令"></a>可能会用到的命令</h3><ol>
<li><p><code>hexo clean</code><br>清除缓存文件，也就是清除本地缓存的静态页面文件，通俗的说就是把<code>public/</code> 文件夹给清空了，然后可以再通过<code>hexo generate</code> 重新成成静态资源文件。</p>
</li>
<li><p><code>hexo new page &quot;命令&quot;</code><br><strong>命令</strong> 可以换成<strong>about、categories、tags</strong> 等，可以生成博客中的标签、分类页面等。</p>
</li>
</ol>
<h3 id="常见的文章头的写法"><a href="#常见的文章头的写法" class="headerlink" title="常见的文章头的写法"></a>常见的文章头的写法</h3><p>每个页面都需要页面头部才能正常的生成发布，一般都是这个样子的：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> 文章标题</div><div class="line"><span class="attr">date:</span> 文章的时间</div><div class="line"><span class="attr">categories:</span> 分类</div><div class="line"><span class="attr">tags:</span></div><div class="line">	- 标签<span class="number">1</span></div><div class="line">	- 标签<span class="number">2</span></div><div class="line"><span class="attr">description:</span> 文章描述，有利于SEO吧</div><div class="line"><span class="attr">keywords:</span> 文章关键字</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文章参考了以下两篇博主的文章：<br><strong>小弟调调</strong> 博主的<a href="https://segmentfault.com/a/1190000002632530" title="点击进入参考文章" target="_blank" rel="external">hexo常用命令笔记</a><br><strong>丁盛</strong> 博主的<a href="http://www.cnblogs.com/-ding/p/6009418.html" title="点击进入参考文章" target="_blank" rel="external">Hexo 最常用的几个命令</a></p>
<p>PS：如果有兴趣的童鞋，可以自行前往阅读</p>
]]></content>
    
    <summary type="html">
    
      记录一些hexo的常用命令
    
    </summary>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/categories/hexo/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/04/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/04/我的第一篇博文.html</id>
    <published>2017-03-04T04:21:43.000Z</published>
    <updated>2017-03-04T12:12:33.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><p>之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏嘘不已吧。不过转念一想，只是因为自己之前的想法太过天真了吧。有些时候，自己还没有本事“造轮子”的时候，何妨不用一下拿来主义呢？只要不是全盘照抄，光copy不动脑筋，也是一种学习吧。</p>
<p>我接触前端这个领域，想来也才不到一年的时间吧，不能说取得了多大的成就，但是好歹现在两只脚都迈进了前端的大门了吧。想想一年前的这个时候，我还对这些都一无所知，现在想来，好像自己当时都活的浑浑噩噩的，每天过的都没什么动力，拒绝面对现实，压根就不敢去思考该如何面对马上就要来临的毕业季。</p>
<p>前段时间，找工作的时候，被现实来了重重的一击。我突然明白过来一个道理：“<em>其实最可怕的不是你不如别人，而是蓦然回首，你发现别人都在进步，而你依旧在原地踏步。</em>”。当然并不是说我之前一直都不明白这个道理，只不过是在那个时候，对这句话有了尤为深刻的理解。原来一直以来，我并不优秀，或者说，我曾经好像优秀过。过往的总总不过是过往云烟罢了，现实才是急需要去面对的唯一迫切的事情。人真的只有到了压力逼迫自己的时候，才会进步神速，也许存在那种有着非凡的毅力的人，但是我根本不可能是那种人。所以在那段时间里，只要我一睁开眼，就好像感觉到压力扑面而来，仿佛快要实质化了一般。对我来说，找不到工作，就等同于一个失败的人生。自己曾经所拥有的固执，拥有的高傲，拥有的冷酷，在现实的面包面前，是多么的卑微，多么的微不足道啊。</p>
<p>之前放弃考研，打算转行当程序员的时候，压根就没有深入的了解过这个行业，更加没有深入的评估过自己的实力，以为好像一切都很简单，好像自己天生就适合干这个，好像自带天赋技能点一样。一切的一切，只有在经历过痛苦，经历过失败以后才明白，原来，<strong>时间</strong>加<strong>勤奋</strong>才等同于天分吧。没有人生来就适合干某一行，没有人生来就在某件事情上点满了技能点，至少对于我等凡夫俗子来说是这样的吧。</p>
<p>曾经所经历过得一切，现在再怎么哀怨叹息都于事无补，我们要做的只是收拾好心情，重装上阵而已吧。曾经自己卑微过，懦弱过，无助过也堕落过，但是这一切都过去了，该做的是，现在努力奋斗，过好每一天，让悲剧不要再未来重演吧。</p>
<h3 id="收拾心情"><a href="#收拾心情" class="headerlink" title="收拾心情"></a>收拾心情</h3><p>今天大概花了一天的时间，建好了我人生中自建的第一个博客，还是有点小小的成就感的。以后时常写写博客，抒发一下心情，也记录以下自己生活学习的轨迹吧。</p>
<h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><ol>
<li><p>本博客，静态页面是挂载在Github-pages上面的，所以想要像我一样在弄个这个博客的童鞋，可以参考一下<a href="https://help.github.com/categories/github-pages-basics/" title="点击进入github pages介绍页面" target="_blank" rel="external">GitHub-pages</a></p>
</li>
<li><p>这个博客是参考了博主<a href="http://www.ezlippi.com/" title="点击进入ezlippi博主的博客" target="_blank" rel="external">ezlippi</a>的博客里的<a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" title="点击进入ezlippi博主的博客文章" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a>，里面内容写的很详细，如果有兴趣的童鞋可以参考博主的文章</p>
</li>
<li><p>当然，这个博客的搭建，离不开<a href="https://hexo.io/zh-cn/" title="点击进入Hexo官网" target="_blank" rel="external">Hexo</a>和<a href="http://theme-next.iissnan.com/" title="点击进入Next主题官网" target="_blank" rel="external">Next</a>的技术支持</p>
</li>
</ol>
<h3 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h3><p><em>本博客的素材资源，均来自网络。本博客非商业用途，如果原作者不允许使用，请联系我本人删除。谢谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; title=&quot;胡言乱语&quot;&gt;&lt;/a&gt;胡言乱语&lt;/h3&gt;&lt;p&gt;之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>今天做过的一道js题目解析</title>
    <link href="http://www.wuzhiqin.tk//blog/2017/03/03/%E4%BB%8A%E5%A4%A9%E5%81%9A%E8%BF%87%E7%9A%84%E4%B8%80%E9%81%93js%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.wuzhiqin.tk//blog/2017/03/03/今天做过的一道js题目解析.html</id>
    <published>2017-03-03T14:11:45.000Z</published>
    <updated>2017-03-04T13:03:00.375Z</updated>
    
    <content type="html"><![CDATA[<p>今天做题的时候，无意中做到一道这样的题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>, <span class="string">"value"</span>:<span class="string">"2"</span>&#125;;</div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);</div></pre></td></tr></table></figure>
<p>初看的时候，感觉好简单，当时就不加思索的给出了<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;3&quot;}</code>这个答案。后来结果可想而知，当然是做错了。当时自我感觉羞愧难当，要说这本来就是个很基础的题目，正确的答案当然是这样了：<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;21&quot;}</code>；看过答案以后，稍微思索一下，就能够得出这个答案，但是为什么初看的时候做错了呢？</p>
<p>后来想了想，归根到底，原因还是自己对<strong>JavaScript</strong>这门语言的基础知识掌握的不扎实。要说这道题目，主要考察的就是JavaScript中的<strong>Object对象</strong>、<strong>string字符串</strong>和<strong>“+”</strong>操作符的作用等知识点。如果说学JavaScript这么语言，没掌握这些基础的知识，那么你压根就不敢说自己懂JavaScript了吧。</p>
<p>具体的这些知识点的详解，在这里也不一一列举了，有太多书籍都有介绍过。如果有不懂的读者，可以自行百度或者通过看书去查阅了解。在这里，我推荐一本我觉得不错的书——《JavaScript高级程序设计》。</p>
<p>重新温习过相关的知识点以后，我又自己改动了一下题目，代码变成了这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 01</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>,<span class="string">"value"</span>:<span class="string">"2"</span>&#125;;	<span class="comment">//属性名也可以采用字符串的设置方式</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//"1"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//"2"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":"1", "value":"21"&#125;</span></div></pre></td></tr></table></figure>
<p>再改一下，变成下面的形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 02</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">key</span>:<span class="number">1</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;;	<span class="comment">//属性名也可以采用这种方式，将属性值变成数值</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":1, "value":3&#125;</span></div></pre></td></tr></table></figure>
<p>我相信，大部分入门了<strong>JavaScript</strong>这门语言的读者，看了上面两个demo变体之后，都应该一目了然，懂得了这道题的原理了。</p>
<p>编程语言的掌握真的不是一件易事，至少对于我这个刚入门的小白来说，的确是这样的。</p>
<p>本人只是一枚前端小白，以上有一些个人的拙见，若喷请轻喷，也欢迎同样跟我奋斗在前端道路上的新手童鞋跟我交流学习，我的个人邮箱是：<code>wuzhiqin@yahoo.com</code>，欢迎叨扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做题的时候，无意中做到一道这样的题：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
  </entry>
  
</feed>
