<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>纯爱枫若情的博客</title>
  <subtitle>前端新手的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuzhiqin.tk/"/>
  <updated>2017-05-18T11:05:12.081Z</updated>
  <id>http://www.wuzhiqin.tk/</id>
  
  <author>
    <name>纯爱枫若情</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手动制作美国大片mp3+lrc</title>
    <link href="http://www.wuzhiqin.tk//blog/%E6%89%8B%E5%8A%A8%E5%88%B6%E4%BD%9C%E7%BE%8E%E5%9B%BD%E5%A4%A7%E7%89%87mp3+lrc.html"/>
    <id>http://www.wuzhiqin.tk//blog/手动制作美国大片mp3+lrc.html</id>
    <published>2017-05-18T08:46:47.000Z</published>
    <updated>2017-05-18T11:05:12.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来都很想学好英语，无奈以前一直没有耐心，也没有恒心和毅力坚持下去，每每总是三天打鱼两天晒网，结果可想而知了。以前也尝试过很多不同的办法，比如通过背单词来增加自己的词汇量的方法，但是对于我这种记忆力着实一般的人来说，简直太煎熬了，貌似我从来没坚持过一个月以上；比如通过看英文视频的方式，虽然一直以来我都坚持看着好莱坞电影，甚至于也会涉猎一些美剧，但是一直都是对着中文字幕看的，虽然看了很多，但是英语水平依旧在原地踏步；比如通过听写文章的方式，这种方式虽然提高很快，也挺有作用，但是无奈，简直太难熬了，对我这种没有耐心的人来说，简直太难熬。</p>
<p>后来听人说，可以把好莱坞电影或者美剧转成mp3放手机里听，我一想，这种方式好像不错，我用了一段时间以后，又发现了一些问题。对于剧情早就烂熟于心了，但是想提高自己的英文水平，肯定得致力于把每句话都听清楚啊，但是发现无论听了多久还是做不到，后来一想，是缺少一份电影的英文剧本。但是总不能一边听一遍手动找听到哪句台词了吧，这也太麻烦了。但是如果能够把台词转成lrc歌词，然后一边听一边看歌词不就很完美了。虽然想法很好，但是实现起来却并不容易，因为并没有现成的软件提供这种功能给你，你只能自己想办法了。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>终于，摸索了很久以后，我想出了一个非常好的方法，可以完整的实现这一过程，完美从看视频，转换到听音频看原音字幕。首先想要实现这一过程，肯定有一些必不可少的软件支持了，以下是几类软件，仅供参考：</p>
<ol>
<li>电影资源（这个就不必说了，没有资源就更别谈把资源转换成音频了）</li>
<li>音频转换软件（这个我用的是qq影音，我觉得这是腾讯少有的良心产品）</li>
<li>对应电影的英文字幕（推荐<a href="https://subscene.com/" target="_blank" rel="external">Subscene网站</a>）</li>
<li><a href="http://www.crintsoft.com/download/" target="_blank" rel="external">MiniLyrics软件</a>（用来将字母转换成lrc文件）</li>
<li>Windows Media player(Windows自带的音乐播放器)</li>
<li>网易云音乐（ios系统推荐，因为歌词无法导入自带的播放器，用网易云音乐的云盘服务正好可以克服这个缺点）</li>
</ol>
<h2 id="详细的步骤"><a href="#详细的步骤" class="headerlink" title="详细的步骤"></a>详细的步骤</h2><h3 id="1-电影资源"><a href="#1-电影资源" class="headerlink" title="1.电影资源"></a>1.电影资源</h3><p>这个就不用详细介绍了，如果你连电影资源都不会找，说明这个教程不适合你的level。</p>
<h3 id="2-音频转换软件"><a href="#2-音频转换软件" class="headerlink" title="2.音频转换软件"></a>2.音频转换软件</h3><p>此处我用的是qq影音，这是一款腾讯出品的软件，少见的良心软件，之所以用这个，是因为比较顺手，而且这个软件本身也挺小巧，不像那些专业的软件那么大，用起来比较轻巧。</p>
<p>具体步骤就不演示了，很简单，打开视频，然后左下角有个工具箱图标，点开有很多小工具，都很好用，选择转换选项，直接转换成音频就行了。</p>
<h3 id="3-下载字幕"><a href="#3-下载字幕" class="headerlink" title="3.下载字幕"></a>3.下载字幕</h3><p>这一步也没什么好介绍的，没什么难度，就是一个外文网站，上面下字母很方便，实在看不懂可以找一个翻译网页的浏览器插件，不过话说回来，如果这都看不懂，也没有学好英语的决心吧。</p>
<h3 id="4-MiniLyrics软件"><a href="#4-MiniLyrics软件" class="headerlink" title="4.MiniLyrics软件"></a>4.MiniLyrics软件</h3><p>这是一款神器软件，神奇在哪儿呢，自己下下来就知道了，下面还是先贴段官网的介绍在下面吧</p>
<blockquote>
<p><strong>Display lyrics for your favorite music! Free!</strong><br>Lyrics plugin software for iTunes, Windows Media Player, Winamp, etc. You needn’t change the way of enjoying music.<br>Display scrolling lyrics, you can follow along with the artist and catch every word.<br>Automatically search and download lyrics.<br>Huge lyrics database, and it is expanding every day.<br>Download and save lyrics in your song files, you can view these lyrics on your iPod or iPhone.<br>Amazing translucency skins.<br>Cross-platform, support Windows, Mac and Android.</p>
</blockquote>
<p>这个网站貌似需要搭个梯子才能进去，如果实在不会下的人可以给我发<a href="mailto:wuzhiqin@yahoo.com" target="_blank" rel="external">email</a>。</p>
<h3 id="5-Windows-Media-player"><a href="#5-Windows-Media-player" class="headerlink" title="5.Windows Media player"></a>5.Windows Media player</h3><p>这款软件，用Windows的人都不陌生吧。这是关键的步骤，我会在下面详细的介绍操作步骤。</p>
<p>a.首先打开MiniLyrics软件，界面如下所示，安装相应播放器的插件</p>
<p><img src="http://wx1.sinaimg.cn/large/7235c1ccgy1ffpp6fk6smj20hu0bpwga.jpg" alt="img"></p>
<p>b.用Windows Media player打开转换好的音频，然后你会发现对应的插件会出现，如下图</p>
<p><img src="http://wx3.sinaimg.cn/large/7235c1ccgy1ffppdsda96j20kr0d3wh0.jpg" alt="img"></p>
<p>c.选择字幕加载，具体操作步骤</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">右键点击歌词插件主屏</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">搜索歌词</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">更多</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">弹出的界面选择下载好的字母文件</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">确定</span></div></pre></td></tr></table></figure>
<p>然后你就会发现歌词开始加载起来了，如下图</p>
<p><img src="http://wx4.sinaimg.cn/large/7235c1ccgy1ffppj1xi9ej20pj0d0q7p.jpg" alt="img"></p>
<p>d.另存为歌词文件</p>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">歌词</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">歌词另存为</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">保存</span></div></pre></td></tr></table></figure>
<p>然后就有一份歌词新鲜出炉了，有没有点小惊喜呢</p>
<h3 id="6-网易云音乐"><a href="#6-网易云音乐" class="headerlink" title="6.网易云音乐"></a>6.网易云音乐</h3><p>因为本人用的ios，因此无法使用将歌词和音频同时保存在一个文件夹里的方式来显示本地歌词。之前使用过itunes的内嵌歌词，但是不支持电影字幕这么长的文件。因此我想到一个办法，通过网易云音乐的云盘服务来实现添加本地歌词的服务。</p>
<p>先将lrc和转换的音频文件存放在一个文件夹里，保存为相同的文件名，然后通过音乐云盘的上传服务上传本地音频。等上传完成以后，你将音频从云盘下载到你的手机里，然后你就会发现，歌词也过来了。</p>
<p><img src="http://wx4.sinaimg.cn/large/7235c1ccgy1ffppvnz9chj20ku112wox.jpg" alt="img"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>以上就是，制作一份美国大片音频+lrc歌词的全部步骤，如果你也希望通过这种方式学英语，希望能够对你有所帮助。</p>
]]></content>
    
    <summary type="html">
    
      手把手教你，制作美国大片音频，并配上lrc歌词
    
    </summary>
    
      <category term="学习" scheme="http://www.wuzhiqin.tk/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习" scheme="http://www.wuzhiqin.tk/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Linux和Windows双系统下奇葩的问题</title>
    <link href="http://www.wuzhiqin.tk//blog/Linux%E5%92%8CWindows%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%A5%87%E8%91%A9%E7%9A%84%E9%97%AE%E9%A2%98.html"/>
    <id>http://www.wuzhiqin.tk//blog/Linux和Windows双系统下奇葩的问题.html</id>
    <published>2017-04-09T09:05:43.000Z</published>
    <updated>2017-04-09T09:18:52.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插上耳机没声音"><a href="#插上耳机没声音" class="headerlink" title="插上耳机没声音"></a>插上耳机没声音</h3><p>不知道是否有装过Linux和Windows双系统的同学，碰到过同样的问题，反正我是碰到了。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">背景：</div><div class="line">操作系统：Windows <span class="number">7</span>系统和CentOS <span class="number">7</span>系统</div><div class="line">电脑：华硕A85v</div></pre></td></tr></table></figure>
<p>刚才使用Windows的时候，发现电脑插上耳机没声音了。当时我以为是耳机坏了，于是连忙拿出手机试了一试，发现耳机并没有坏。</p>
<p>后来我又怀疑是电脑驱动没装好，于是我又卸载了声卡的驱动，重新装了一个官方的驱动，发现还是没作用。后来我上网查了很久，有很多奇怪的解决方案，但是试了以后，发现问题依旧存在。就在我准备放弃的时候，我突然想起来，为什么不试试在Linux系统之中有没有声音呢。</p>
<p>于是我怀着忐忑的心情，进入了Linux系统，我发现耳机居然是有声音的！只是之前耳机的声音一直是静音的，但是我拔了耳机，发现外放的声音和耳机插上去的声音并不是同步的。这让我联想到了安卓手机，插上耳机和不插耳机，居然不共享同一个声音控制系统，坑爹啊，有木有！</p>
<p>于是我想，肯定是我之前把耳机的声音设置为静音，影响了Windows下耳机的表现。于是我将耳机的声音开到最大，然后重启进入Windows，发现熟悉的声音又回来了。</p>
<p>此刻我的心情，真的不知道是该悲伤还是该欢喜。没想到装个双系统还会出现这个问题，太奇葩了！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;插上耳机没声音&quot;&gt;&lt;a href=&quot;#插上耳机没声音&quot; class=&quot;headerlink&quot; title=&quot;插上耳机没声音&quot;&gt;&lt;/a&gt;插上耳机没声音&lt;/h3&gt;&lt;p&gt;不知道是否有装过Linux和Windows双系统的同学，碰到过同样的问题，反正我是碰到了。&lt;/p&gt;

    
    </summary>
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux玩的就是耐心</title>
    <link href="http://www.wuzhiqin.tk//blog/Linux%E7%8E%A9%E7%9A%84%E5%B0%B1%E6%98%AF%E8%80%90%E5%BF%83.html"/>
    <id>http://www.wuzhiqin.tk//blog/Linux玩的就是耐心.html</id>
    <published>2017-04-09T06:42:28.000Z</published>
    <updated>2017-04-09T07:27:00.669Z</updated>
    
    <content type="html"><![CDATA[<p>去年有一段时间在学习Linux的时候，在折腾了许久的虚拟机之后，历经坎坷波折的装了一个Linux和Win7双系统，装上以后发现还不如用Windows来着方便。一是因为手边就这么一台电脑，学校里一直要处理各种文件，所以还是得用office办公软件；二来也是最重要的原因是，学校里一直用拨号上网，用Linux由于缺乏拨号的客户端软件，根本上不了网，对于一台上不了网的计算机，我想用起来也不太方便吧。于是体验了一段时间以后，就很久都没用了，还是继续用回我的虚拟机吧，好歹能愉快的联网使用。</p>
<p>中间由于电脑中了病毒，重装了Windows系统，前段时间，突然又想打开电脑上的CentOS系统玩玩了，却发现进不去了，画面一直停留光标闪烁的界面。当时也没太在意，毕竟也不急着用，然后就搁置了下来，不能用就不能用吧，不管了。</p>
<p>但是最近在看数据结构，想着还是用电脑敲一敲代码吧，又不想用Windows上的IDE，也不想用虚拟机，于是打算耐心的修复以下Linux的启动问题。</p>
<p>以下做一个修复过程的记录，为以后碰到同样的问题作参考吧。</p>
<p>当然碰到这种问题，免不了的是要用搜索引擎的，于是乎我就搜索了以下相关问题，找到一些感觉比较靠谱的，就开始逐个试验了。</p>
<h3 id="EasyBSD软件"><a href="#EasyBSD软件" class="headerlink" title="EasyBSD软件"></a>EasyBSD软件</h3><p>一开始，我以为是我用的Windows下的EasyBSD这个软件的设置问题，于是我又重新加载了几个Linux启动项，发现都启动不了，甚至有些还进入了grub命令行以及grub rescue命令行。当时不明白，后来回忆起来才发现，原来这个grub命令行才是你修复启动引导程序的关键。</p>
<h3 id="grub命令行"><a href="#grub命令行" class="headerlink" title="grub命令行"></a>grub命令行</h3><p>由于我装的是CentOS7的64位系统，因此网上很多教程都不太适合我，但是通过grub命令行，我还是成功的进入了Linux系统，发现原来我的Linux系统还是好的，只是引导程序被破坏掉了。</p>
<p>具体的方法是：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 用tab补全命令找到你的Linux系统安装在硬盘上的位置，然后用下面的命令</span></div><div class="line">root (hd0,<span class="number">6</span>)    <span class="comment">//我的硬盘编号是hd0，6代表着我的Linux安装在硬盘的位置吧</span></div><div class="line"></div><div class="line"><span class="comment">// 2. 加载内核，以下两个命令都可以，省略号部分为省略的UUID或者文件名后缀</span></div><div class="line">kernel /vmlinuz…… root=UUID=……  <span class="comment">//dm-1的uuid</span></div><div class="line">kernel /vmlin…… root=/dev/dm<span class="number">-1</span>  <span class="comment">//我的dm-1是存储内核的位置</span></div><div class="line"></div><div class="line"><span class="comment">// 3. 挂载的一个临时根文件系统</span></div><div class="line">initrd /inita…….img     <span class="comment">//省略号为省略的文件后缀名</span></div><div class="line"></div><div class="line"><span class="comment">// 4. 启动</span></div><div class="line">boot</div></pre></td></tr></table></figure>
<p>在上面的过程中，你可以慢慢的用tab试出正确的组合出来，反正你没有填入正确的命令，也不会造成什么恶劣的影响，无非就是不能进入系统而已。所以花费的只是你的时间和一点点精力而已。还好我成功的试出来了正确的组合，然后进入了系统。</p>
<h3 id="修复grub正常启动"><a href="#修复grub正常启动" class="headerlink" title="修复grub正常启动"></a>修复grub正常启动</h3><p>但是进入了系统还没完呢，别高兴太早了，不信你reboot一下，接下来你还是会进入grub命令行模式中。这时候就要重新配置以下Linux中的grub引导文件了。</p>
<p>先说结论吧，以下就是grub2中的修复引导的过程：(当然全程最好以root用户的身份完成，不然sudo起来麻烦死你)</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 重新生成grub.cfg文件</span></div><div class="line">grub2-mkconfig -o <span class="meta-keyword">/boot/</span>grub2/grub.cfg</div><div class="line"></div><div class="line"><span class="comment">// 2. 安装的硬盘中（个人理解，不知道专业术语具体是什么）</span></div><div class="line">grub2-install <span class="meta-keyword">/dev/</span>sda</div></pre></td></tr></table></figure>
<p>执行完上面的操作以后，再重启，就能正常的进入Linux系统了。</p>
<p>但是我所经历的，远比敲入以上两行命令更坎坷。因为网上的很多教程都不是针对grub2的，都是针对grub的，因此有时候，你发现怎么修复的过程中很多命令没有呢？甚至后来连自己手动写一个grub.cfg都试过了，还是没用，幸好后来慢慢试出来以上两行针对grub2的命令，如果你也是用的grub2，用这个绝对没错的。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>以上就是我修复CentOS 7版本的Linux的引导程序grub的过程，过程是不是很简单，但是就是一遍遍的尝试，很糟心。由于Linux版本众多，你不得不逐个去试出适合你系统的方案，这一点还是比较坑人的。想玩Linux，就准备好折腾吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;去年有一段时间在学习Linux的时候，在折腾了许久的虚拟机之后，历经坎坷波折的装了一个Linux和Win7双系统，装上以后发现还不如用Windows来着方便。一是因为手边就这么一台电脑，学校里一直要处理各种文件，所以还是得用office办公软件；二来也是最重要的原因是，学校
    
    </summary>
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>记一次失败的面试上机体验</title>
    <link href="http://www.wuzhiqin.tk//blog/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%9D%A2%E8%AF%95%E4%B8%8A%E6%9C%BA%E4%BD%93%E9%AA%8C.html"/>
    <id>http://www.wuzhiqin.tk//blog/记一次失败的面试上机体验.html</id>
    <published>2017-04-01T15:50:23.000Z</published>
    <updated>2017-04-01T16:27:37.239Z</updated>
    
    <content type="html"><![CDATA[<p>昨天去一家公司面试前端工程师的职位，公司在江汉区的一个地方。之前没去过那里，去了以后，发现周边环境还挺好，就是还没有完全建好，周围大片大片的都是在建的工地。</p>
<p>其实看到工地，我反而有种亲切感，毕竟一年前的时候，我一直都觉得自己毕业了会去工地做施工的。当时压根就没有考虑过自己想干什么，将来能干什么。</p>
<p>但是，没想到时间流逝到了这个节点上的时候，我早就背离了当初的所想。我觉得，人应该从一开始就要想好，自己想干什么，并未这个目标而去努力奋斗，没有目标，没有理想的人生，真的挺可悲的。</p>
<p>回忆一下自己的经历，小时候我就是一个有梦想的少年，一直以来都梦想着上我们当地最好的高中。让我没想到的是，最后我居然梦想成真了。但是可悲的是，我并没有继续为自己定制一份独有的大学梦，结果虽然我上了不错的高中，但是从此我就沦为了一个终日无所事事、混混度日的人。结果一直沉沦到现在，沉沦到快要毕业了快要找工作了这个节点上，才开始思考自己的人生，才开始不断地反问自己究竟想要什么？</p>
<p>但是，也不用灰心丧气，终日以哀叹度日。毕竟，人生的路还长着，只要活着，就有希望，你即使现在不优秀了，但是也不妨碍你可以继续努力，让自己一天天的离自己的梦想更进一步，这世界上并没什么大不了的事情，你所要做的只是“Just do it!”。</p>
<p>还是把我们的焦点拉回这次面试吧，开始体验都很好。去了以后，先填了一张表格。填完以后，就开始面试了，面试官人挺和蔼，问的问题也不是很有难度，面试大概持续了十几分钟吧，然后面试官就跟我说有个上机笔试。由于之前没进行过上机面试，所以还是有点突然的，没做过这方面的准备。</p>
<p>题目也很简单，就是写一个三级的下拉列表。但是由于当时面试，心态不够放松，思路也不清晰。加上用的是那里电脑，软件和硬件都不熟悉，因此过了二十多分钟才写出来了一半。当时本想多花点时间，我应该也能写出来的吧，没想到后面来了一个面试的人，面试官等不及我做完题目，然后二十多分钟的时候，就让我走了。当时感觉很憋屈，这么简单的题目，用我自己电脑，十分钟肯定就写出来了，但是后来转念一想，还是由于自己心态不好，以及对基本概念操作不熟练造成的吧。</p>
<p>后来回来，我还真花了几分钟就撸出来了一个类似的东西，代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>三级列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line">        <span class="selector-id">#item</span>&#123;</div><div class="line">            <span class="attribute">height</span>: <span class="number">35px</span>;</div><div class="line">            <span class="attribute">text-align</span>: center;</div><div class="line">            <span class="attribute">position</span>: relative;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#5082da</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span> <span class="selector-tag">ul</span>&#123;</div><div class="line">            <span class="attribute">list-style-type</span>: none;</div><div class="line">            <span class="attribute">width</span>: <span class="number">116px</span>;</div><div class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">ul</span>&#123;</div><div class="line">            <span class="attribute">top</span>: <span class="number">35px</span>;</div><div class="line">            <span class="attribute">left</span>: -<span class="number">40px</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span> <span class="selector-tag">li</span>&#123;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#5082da</span>;</div><div class="line">            <span class="attribute">position</span>: relative;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span>&gt;<span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&gt;<span class="selector-tag">ul</span> <span class="selector-tag">ul</span>&#123;</div><div class="line">            <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">            <span class="attribute">left</span>: <span class="number">115%</span>;</div><div class="line">            <span class="attribute">margin-left</span>: -<span class="number">58px</span>;</div><div class="line">            <span class="attribute">position</span>: absolute;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">            <span class="attribute">background</span>: <span class="number">#6fb9da</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="selector-id">#item</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&gt;<span class="selector-tag">ul</span> &#123;</div><div class="line">            <span class="attribute">display</span>: block;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>一级列表</div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级列表</div><div class="line">                        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">li</span>&gt;</span>三级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>二级列表<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这次面试，告诉我了一个道理：越是简单的东西，越是要理解通透才行，不然如何做到临危不乱，超常发挥。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天去一家公司面试前端工程师的职位，公司在江汉区的一个地方。之前没去过那里，去了以后，发现周边环境还挺好，就是还没有完全建好，周围大片大片的都是在建的工地。&lt;/p&gt;
&lt;p&gt;其实看到工地，我反而有种亲切感，毕竟一年前的时候，我一直都觉得自己毕业了会去工地做施工的。当时压根就没
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>原来JS真的不适合用来写算法</title>
    <link href="http://www.wuzhiqin.tk//blog/%E5%8E%9F%E6%9D%A5JS%E7%9C%9F%E7%9A%84%E4%B8%8D%E9%80%82%E5%90%88%E7%94%A8%E6%9D%A5%E5%86%99%E7%AE%97%E6%B3%95.html"/>
    <id>http://www.wuzhiqin.tk//blog/原来JS真的不适合用来写算法.html</id>
    <published>2017-03-26T14:45:53.000Z</published>
    <updated>2017-03-26T15:32:02.074Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来都听人说，如果你想要成为一名优秀的程序员的话，那么算法则是你不得不学的东西了，如果你连算法都不怎么了解，怎么能成为一名优秀的程序员呢？</p>
<p>最近在看一些算法书籍，不过我用的是JS来实现算法。前几天准备在leetcode上刷一下题目，一看居然能用JavaScript来实现算法，一想，刚好正合我意。</p>
<p>但是算法确实不是那么容易的，先是做了一道难度初级的算法题目，感觉还比较容易。后来提交通过了以后，看了以下用其他语言实现的效率，感觉JS好像也和其他语言没有太大的区别，不分伯仲，至少不是在效率最低的级别的。</p>
<p>后来做了一道中级难度的算法题，题目是这样的：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Add Two Numbers</div><div class="line"></div><div class="line">You are given <span class="literal">two</span> non-<span class="literal">empty</span> linked lists representing <span class="literal">two</span> non-negative</div><div class="line">integers. The digits are stored <span class="keyword">in</span> reverse order <span class="keyword">and</span> <span class="keyword">each</span> <span class="keyword">of</span> their nodes contain <span class="keyword">a</span> single digit. Add <span class="keyword">the</span> <span class="literal">two</span> numbers <span class="keyword">and</span> <span class="literal">return</span> <span class="keyword">it</span> <span class="keyword">as</span> <span class="keyword">a</span> linked list.</div><div class="line">You may assume <span class="keyword">the</span> <span class="literal">two</span> numbers <span class="built_in">do</span> <span class="keyword">not</span> contain <span class="keyword">any</span> leading <span class="literal">zero</span>, except <span class="keyword">the</span> <span class="built_in">number</span> <span class="number">0</span> itself.</div><div class="line">Input: (<span class="number">2</span> -&gt; <span class="number">4</span> -&gt; <span class="number">3</span>) + (<span class="number">5</span> -&gt; <span class="number">6</span> -&gt; <span class="number">4</span>)</div><div class="line">Output: <span class="number">7</span> -&gt; <span class="number">0</span> -&gt; <span class="number">8</span></div></pre></td></tr></table></figure>
<p>开始以为很容易，后来没想到写了几个小时，都没有写对，总是没有思考全面，后来想了很久，终于用最笨的办法写出来了，代码是这样的：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">val</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.val = val;</div><div class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">array</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> list = []</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;array.length; i++)&#123;</div><div class="line">        list[i] = <span class="keyword">new</span> ListNode(array[i])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;list.length<span class="number">-1</span>; j++)&#123;</div><div class="line">        list[j].next = list[j+<span class="number">1</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> list;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> l1 = add([<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>])[<span class="number">0</span>]</div><div class="line"><span class="keyword">var</span> l2 = add([<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">12</span>,<span class="number">29</span>])[<span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTwoNumbers</span>(<span class="params">l1, l2</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> arr = (<span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> arr = [[],[]]</div><div class="line">        arr[<span class="number">0</span>].push(l1.val)</div><div class="line">        <span class="keyword">while</span>(l1.next !== <span class="literal">null</span>)&#123;</div><div class="line">            l1 = l1.next</div><div class="line">            arr[<span class="number">0</span>].push(l1.val)</div><div class="line">        &#125;</div><div class="line">        arr[<span class="number">1</span>].push(l2.val)</div><div class="line">        <span class="keyword">while</span>(l2.next !== <span class="literal">null</span>)&#123;</div><div class="line">            l2 = l2.next</div><div class="line">            arr[<span class="number">1</span>].push(l2.val)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr</div><div class="line">    &#125;)(l1, l2)</div><div class="line">    <span class="keyword">var</span> sum = []</div><div class="line">    <span class="keyword">if</span>(arr[<span class="number">0</span>].length === arr[<span class="number">1</span>].length)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr[<span class="number">0</span>].length; i++)&#123;</div><div class="line">            sum[i] = arr[<span class="number">0</span>][i] + arr[<span class="number">1</span>][i]</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[<span class="number">0</span>].length &gt; arr[<span class="number">1</span>].length)&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr[<span class="number">1</span>].length; i++)&#123;</div><div class="line">            sum[i] = arr[<span class="number">0</span>][i] + arr[<span class="number">1</span>][i]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = arr[<span class="number">1</span>].length; i&lt;arr[<span class="number">0</span>].length; i++)&#123;</div><div class="line">            sum[i] = arr[<span class="number">0</span>][i]</div><div class="line">        &#125;</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;arr[<span class="number">0</span>].length; i++)&#123;</div><div class="line">            sum[i] = arr[<span class="number">0</span>][i] + arr[<span class="number">1</span>][i]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = arr[<span class="number">0</span>].length; i&lt;arr[<span class="number">1</span>].length; i++)&#123;</div><div class="line">            sum[i] = arr[<span class="number">1</span>][i]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = sum.length; i&lt;len; i++)&#123;</div><div class="line">        <span class="keyword">if</span>(sum[i]&gt;=<span class="number">10</span> &amp;&amp; i&lt;len<span class="number">-1</span>)&#123;</div><div class="line">            sum[i] %= <span class="number">10</span></div><div class="line">            sum[i+<span class="number">1</span>]++</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sum[i]&gt;=<span class="number">10</span> &amp;&amp; i === len <span class="number">-1</span>)&#123;</div><div class="line">            sum[i] %= <span class="number">10</span></div><div class="line">            sum[i + <span class="number">1</span>] = <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> l3 = []</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;sum.length; i++)&#123;</div><div class="line">        l3[i] = <span class="keyword">new</span> ListNode(sum[i])</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>; j&lt;l3.length<span class="number">-1</span>; j++)&#123;</div><div class="line">        l3[j].next = l3[j+<span class="number">1</span>]</div><div class="line">    &#125;</div><div class="line">    l3 = l3[<span class="number">0</span>]</div><div class="line">    <span class="keyword">return</span> l3</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(addTwoNumbers(l1, l2))</div></pre></td></tr></table></figure>
<p>当然我现在写的是能够直接在Node.js上直接运行的代码，并不是网站上那种让你只完善addTwoNumbers函数的那种代码。我先是创建了一个列表，实现了提供的l2和l3，然后写了我实现这个算法过程的函数addTowNumbers。</p>
<p>当我写好以后，美滋滋的跑到leetcode上面提交了以后，果然通过了，但是效率就不是那么高的，用了两百多接近三百毫秒。后来我一看c语言的实现效率，发现大多都在一百毫秒以内，于是我好奇的看了一下其他的语言的效率，我无奈的发现js好像是垫底的存在，当时我的内心是一百个不愿意相信的。因为js是我学习的第一门编程语言，我可是有很深厚的感情的，我一直都知道其执行效率不高，但是着实没想到在实现复杂的算法的时候，其竟然是垫底的存在……</p>
<p>后来我好奇的看了一下评论，好像又发现了不一样的世界。以前我还对自己的水平很自信，直到我看了同样的算法，还能用下面的代码实现的时候：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2, flag</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> sum = l1.val + l2.val + (flag || <span class="number">0</span>)</div><div class="line">    <span class="keyword">var</span> l3 = <span class="keyword">new</span> ListNode(sum%<span class="number">10</span>)</div><div class="line">    <span class="keyword">var</span> newFlag = sum&gt;=<span class="number">10</span> ? <span class="number">1</span> : <span class="number">0</span></div><div class="line">    <span class="keyword">if</span>(newFlag || l1.next !== <span class="literal">null</span> || l2.next !== <span class="literal">null</span>)&#123;</div><div class="line">        l3.next = <span class="built_in">arguments</span>.callee(l1.next || <span class="keyword">new</span> ListNode(<span class="number">0</span>), l2.next || <span class="keyword">new</span> ListNode(<span class="number">0</span>), newFlag)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> l3</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看完以后，我狠狠的感叹了以下，“代码还能这么写！！！”。我默默的回去数了一下自己的代码的行数，又狠狠的感叹了一声，“代码还能这样写？”</p>
<p>但是当我用大神的思想，重构了我的代码，提交了以后，发现好像效率并没有什么提升，跟我的代码执行效率相差无几……当时我就泪奔了，这么简洁的代码，居然效率也不高。</p>
<p>果然，JS真的不适合用来写算法啊。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来都听人说，如果你想要成为一名优秀的程序员的话，那么算法则是你不得不学的东西了，如果你连算法都不怎么了解，怎么能成为一名优秀的程序员呢？&lt;/p&gt;
&lt;p&gt;最近在看一些算法书籍，不过我用的是JS来实现算法。前几天准备在leetcode上刷一下题目，一看居然能用JavaSc
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>XMLHttpRequest对象</title>
    <link href="http://www.wuzhiqin.tk//blog/XMLHttpRequest%E5%AF%B9%E8%B1%A1.html"/>
    <id>http://www.wuzhiqin.tk//blog/XMLHttpRequest对象.html</id>
    <published>2017-03-22T15:32:02.000Z</published>
    <updated>2017-03-23T09:56:04.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XMLHttpRequest对象"><a href="#XMLHttpRequest对象" class="headerlink" title="XMLHttpRequest对象"></a>XMLHttpRequest对象</h2><p>XMLHttpRequest是一种广泛的运用于浏览器上，可以不必刷新页面，也能以异步的方式从服务器获取信息，然后在通过DOM将新数据插入到页面之中。虽然名字中包含XML，但是Ajax通信与数据格式无关，从服务器取得的数据，不一定是XML数据。</p>
<h2 id="兼容IE早期浏览器的XHR方法"><a href="#兼容IE早期浏览器的XHR方法" class="headerlink" title="兼容IE早期浏览器的XHR方法"></a>兼容IE早期浏览器的XHR方法</h2><p>虽然IE5是第一款引入XHR对象的浏览器，但是XHR对象是通过MSXML库中的一个ActiveX对象实现的，因此在IE中可能有三种不同版本的XHR对象，即MSXML2.XMLHttp、MSXML2.XMLHttp.3.0和MXSML2.XMLHttp.6.0。因此想要兼容早期的IE浏览器，必须要编写一个函数来保证兼容性：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">'undefined'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> ActiveXObject != <span class="string">'undefined'</span>)&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">arguments</span>.callee.activeXString != <span class="string">'string'</span>)&#123;</div><div class="line">            <span class="keyword">var</span> versions = [ <span class="string">"MSXML2.XMLHttp.6.0"</span>, <span class="string">"MSXML2.XMLHttp.3.0"</span>,<span class="string">"MSXML2.XMLHttp"</span>],</div><div class="line">                i,</div><div class="line">                len</div><div class="line">            <span class="keyword">for</span>(i = <span class="number">0</span>, len = versions.length; i&lt;len; i++)&#123;</div><div class="line">                <span class="keyword">try</span>&#123;</div><div class="line">                    <span class="keyword">new</span> ActiveXObject(versions[i])</div><div class="line">                    <span class="built_in">arguments</span>.callee.activeXString = versions[i]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                &#125;<span class="keyword">catch</span>(ex)&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No XHR object availalbe'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引用上面的函数以后，就可以高枕无忧的在所有浏览器中，采用 <code>var xhr = createXHR()</code> 方法，创建一个XHR对象。</p>
<h2 id="XHR的用法"><a href="#XHR的用法" class="headerlink" title="XHR的用法"></a>XHR的用法</h2><h3 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h3><p>接受三个参数：</p>
<ol>
<li><p>要发送的请求类型，也就是常见的几种http请求中的一种，像get、post等</p>
</li>
<li><p>请求的URL，也就是请求的地址</p>
</li>
<li><p>一个布尔值，表示是否异步发送请求</p>
</li>
</ol>
<p>要注意的是，只能向同一个域名中使用相同的端口和协议的URL发送请求，否则会引发安全错误。</p>
<p>调用的open()方法并不会真正发送请求，只是启动一个请求以备发送。</p>
<h3 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h3><p>向发送请求，必须像下面这样调用send()方法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一般不推荐发送同步请求，会阻塞进程</span></div><div class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.txt'</span>, <span class="literal">false</span>)</div><div class="line"><span class="comment">//send()方法接收一个参数，即要作为请求主体发送的数据。如果不需要请求主体发送数据，那么必须传入null</span></div><div class="line">xhr.send(<span class="literal">null</span>)</div></pre></td></tr></table></figure>
<h3 id="服务器响应以后，XHR属性的改变"><a href="#服务器响应以后，XHR属性的改变" class="headerlink" title="服务器响应以后，XHR属性的改变"></a>服务器响应以后，XHR属性的改变</h3><p>服务器相应以后，响应的数据会自动填充XHR对象的属性，主要有以下几种：</p>
<ol>
<li><p>responseText: 作为相应主体被返回的文本</p>
</li>
<li><p>responseXML: 如果响应的内容类型是’text/xml’或”application/xml”，这个属性中将保存包含着响应数据的XML DOM文档</p>
</li>
<li><p>status：响应的HTTP状态的说明，常见的有200、300、304、404等</p>
</li>
<li><p>statusText：HTTP状态的说明</p>
</li>
</ol>
<p>为确保收到适当的响应，应该采用适当的代码来检查响应状态码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</div><div class="line">    alert(xhr.responseText)</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">    alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XHR发送异步请求"><a href="#XHR发送异步请求" class="headerlink" title="XHR发送异步请求"></a>XHR发送异步请求</h3><p>大多数情况下，我们都希望发送的是异步请求，让js继续执行下面的代码而不必等待响应。此时我们可以通过检测XHR对象的readyState属性，来检测当前请求的活动阶段。</p>
<p>该属性有以下四个可能的值：</p>
<blockquote>
<p>0：为初始化。尚未调用open()方法<br>1：启动。已经调用open()方法<br>2：发送。已经调用send()方法<br>3：接受。已经接收到部分数据<br>4：完成。已经接收到全部响应的数据，而且已经可以在客户端使用了</p>
</blockquote>
<p>每次readyState属性的值发成变化的时候，都会触发一次readystatechange事件，因此可以利用其来检测每次状态变化后readyState的值。一般我们只对readyState值为4的阶段感兴趣，但是我门必须在调用open()之前指定onreadystatechange事件处理程序，才能保证跨浏览器兼容性，可以像下面这样组织代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = createXHR()</div><div class="line"><span class="comment">//采用DOM0级方法添加事件处理程序，保证兼容性</span></div><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//此处不用this, 而用xhr对象，保证代码的可靠性</span></div><div class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">        <span class="keyword">if</span>((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>)&#123;</div><div class="line">            alert(xhr.responseText)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            alert(<span class="string">"Request was unsuccessful: "</span> + xhr.status)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">xhr.open(<span class="string">'get'</span>, <span class="string">'example.txt'</span>, <span class="literal">true</span>)</div><div class="line">xhr.send(<span class="literal">null</span>)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XMLHttpRequest对象&quot;&gt;&lt;a href=&quot;#XMLHttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest对象&quot;&gt;&lt;/a&gt;XMLHttpRequest对象&lt;/h2&gt;&lt;p&gt;XMLHttpRequest
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
      <category term="XHR" scheme="http://www.wuzhiqin.tk/tags/XHR/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下git最新版本的安装方法</title>
    <link href="http://www.wuzhiqin.tk//blog/CentOS%E4%B8%8Bgit%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95.html"/>
    <id>http://www.wuzhiqin.tk//blog/CentOS下git最新版本的安装方法.html</id>
    <published>2017-03-20T08:46:24.000Z</published>
    <updated>2017-03-20T09:25:32.357Z</updated>
    
    <content type="html"><![CDATA[<p>装完Node.js开发环境以后，同学还想装个最新版的git版本控制软件。</p>
<p>于是开始用`yum install git’</p>
<p>装完以后，发现是老版本的，于是上网搜了一下解决方法，看来只能手动编译安装了。</p>
<p>安装的过程也很麻烦，毕竟要手动编译。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>源码编译之前，先安装一些依赖：</div><div class="line">yum install  perl cpio curl curl-devel  zlib-devel openssl-develexpat-devel  gettex-devel -y</div><div class="line"></div><div class="line"><span class="regexp">//</span>下载源码包并解压</div><div class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/git/gi</span>t<span class="regexp">/archive/</span>v2.<span class="number">12.0</span>.tar.gz</div><div class="line">tar -zxvf v2.<span class="number">12.0</span>.tar.gz</div><div class="line"></div><div class="line"><span class="regexp">//</span>进入文件夹，开始编译安装</div><div class="line">make configure</div><div class="line">.<span class="regexp">/configure   --prefix=/u</span>sr<span class="regexp">/local/gi</span>t</div><div class="line">make &amp;&amp; make install</div><div class="line"></div><div class="line"><span class="regexp">//</span>发现编译的过程中开始报错，发现缺少依赖</div><div class="line">yum -y install perl-devel</div><div class="line"></div><div class="line"><span class="regexp">//</span>继续上述编译安装过程</div><div class="line"></div><div class="line"><span class="regexp">//</span>发现还是报错，缺少依赖</div><div class="line">yum -y install build-essential tcl8.<span class="number">4</span> tk8.<span class="number">4</span> gettext</div><div class="line"></div><div class="line"><span class="regexp">//</span>继续安装，终于成功了</div><div class="line"></div><div class="line"><span class="regexp">//</span>设置环境变量</div><div class="line">ln <span class="regexp">/usr/</span>local<span class="regexp">/git/</span>bin<span class="regexp">/git /u</span>sr<span class="regexp">/bin/</span></div><div class="line"></div><div class="line"><span class="regexp">//</span>检查是否安装成功</div><div class="line">git --version</div></pre></td></tr></table></figure>
<p>总结一下吧，大致的安装过成分为以下几个步骤：</p>
<ol>
<li><p>安装依赖：<br><code>yum install  perl cpio curl curl-devel  zlib-devel openssl-develexpat-devel  gettex-devel perl-devel build-essential tcl8.4 tk8.4 gettext -y</code></p>
</li>
<li><p>下载源码包并解压：<br><code>wget https://github.com/git/git/archive/v2.12.0.tar.gz</code><br><code>tar -zxvf v2.12.0.tar.gz</code></p>
</li>
<li><p>开始编译安装：<br><code>make configure</code><br><code>./configure   --prefix=/usr/local/git</code><br><code>make &amp;&amp; make install</code></p>
</li>
<li><p>设置环境变量：<br><code>ln /usr/local/git/bin/git /usr/bin/</code></p>
</li>
<li><p>检查是否安装成功：<br><code>git --version</code></p>
</li>
</ol>
<p>总的来说，用源码编译安装的方式，比较繁琐，因为你不知道什么地方就出了问题，缺少什么依赖，特别是对于大型的软件来说，有时候编译要几个小时，中途出错了，就前功尽弃了，所以如果能在编译安装之前，找之前编译安装过的人给一份依赖软件列表，先装好依赖，那么就可靠多了。</p>
<p>对于用源码编译安装的软件，有什么好处，大概就是可控性比较高吧，毕竟装的时候可以选择性的安装想要的功能，如果用rpm包，也许就并没有那么好用了。而且有的软件没有rpm包，就只能自己用源码编译安装了。</p>
<p>引用知乎某匿名用户的回答：</p>
<blockquote>
<p>源码-&gt;二进制文件-&gt;rpm-&gt;安装</p>
<ol>
<li>源码编译生成二进制文件</li>
<li>二进制文件打包成rpm</li>
<li>rpm安装到系统当中<br>使用别的做好的rpm包源码的版本和编译参数不可控</li>
</ol>
</blockquote>
<p>想看原问题<a href="https://www.zhihu.com/question/21949923" title="点击前往" target="_blank" rel="external">点这里</a></p>
<p>在安装的过程中，参考了以下文章，有疑问的童鞋可以前去查看原文：</p>
<ol>
<li><p><a href="https://yq.aliyun.com/ziliao/43381" title="点击前往" target="_blank" rel="external">Linux（centos） 环境下如何源码编译安装git的教程</a></p>
</li>
<li><p><a href="https://blog.slogra.com/post-344.html" title="点击前往" target="_blank" rel="external">解决编译安装git出错(续)</a></p>
</li>
<li><p><a href="http://www.linuxidc.com/Linux/2010-11/29624.htm" title="点击前往" target="_blank" rel="external">在Ubuntu下安装git的过程</a></p>
</li>
</ol>
<p>另外：git源码包的下载地址为：<a href="https://github.com/git/git/releases" title="点击前往" target="_blank" rel="external">https://github.com/git/git/releases</a>，选一个你想安装的版本的源码包就行了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;装完Node.js开发环境以后，同学还想装个最新版的git版本控制软件。&lt;/p&gt;
&lt;p&gt;于是开始用`yum install git’&lt;/p&gt;
&lt;p&gt;装完以后，发现是老版本的，于是上网搜了一下解决方法，看来只能手动编译安装了。&lt;/p&gt;
&lt;p&gt;安装的过程也很麻烦，毕竟要手动编译
    
    </summary>
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.wuzhiqin.tk/tags/linux/"/>
    
      <category term="centos" scheme="http://www.wuzhiqin.tk/tags/centos/"/>
    
      <category term="git" scheme="http://www.wuzhiqin.tk/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux-CentOS-6.6搭建node.js开发环境的过程</title>
    <link href="http://www.wuzhiqin.tk//blog/Linux-CentOS-6-6%E6%90%AD%E5%BB%BAnode-js%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%9A%84%E8%BF%87%E7%A8%8B.html"/>
    <id>http://www.wuzhiqin.tk//blog/Linux-CentOS-6-6搭建node-js开发环境的过程.html</id>
    <published>2017-03-20T03:32:24.000Z</published>
    <updated>2017-03-20T07:26:09.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近同学搞了个服务器，自己不太会装node.js的开发环境，于是我主动请缨给他搭建node.js的开发环境，想想自己刚好有个博客，于是就记录下自己的搭建过程吧，以供自己查阅，也为想要自己搭建服务器端node.js开发环境的童鞋门做个参考。</p>
<h3 id="服务器的配置"><a href="#服务器的配置" class="headerlink" title="服务器的配置"></a>服务器的配置</h3><p>首先当然是要来检查下服务器的配置了，当然登陆服务器这个步骤就省了吧，相信看到这篇文章的人也不是没有用过Linux的小白了。</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示服务器硬盘容量</span></div><div class="line">[root@localhost ~]# df -h</div><div class="line">Filesystem      Size  Used Avail Use% Mounted on</div><div class="line">/dev/simfs       <span class="number">12</span>G  <span class="number">652</span>M   <span class="number">12</span>G   <span class="number">6</span>% /</div><div class="line">none            <span class="number">128</span>M     <span class="number">0</span>  <span class="number">128</span>M   <span class="number">0</span>% /dev/shm</div></pre></td></tr></table></figure>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//显示系统版本</span></div><div class="line">[root@localhost ~]# <span class="keyword">cat</span> /etc/issue</div><div class="line">CentOS release 6.6 (Final)</div><div class="line">Kernel \r <span class="keyword">on</span> <span class="keyword">an</span> \<span class="built_in">m</span></div></pre></td></tr></table></figure>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//检查系统是32位的还是64位的</span></div><div class="line">[root@localhost ~]<span class="meta"># getconf LONG_BIT</span></div><div class="line"><span class="number">32</span></div></pre></td></tr></table></figure>
<h3 id="装wget软件"><a href="#装wget软件" class="headerlink" title="装wget软件"></a>装wget软件</h3><p>检查好系统的相关情况以后，就开始正式进入我们的搭建服务器环境的过程了。</p>
<p>先装个wget软件，用来直接在命令行下载东西到服务器上，不然手动下载在上传到服务器太麻烦了。</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//采用yum安装的方式安装wget</span></div><div class="line">[root@localhost ~]<span class="meta"># yum install wget -y</span></div></pre></td></tr></table></figure>
<h3 id="装gcc编译器"><a href="#装gcc编译器" class="headerlink" title="装gcc编译器"></a>装gcc编译器</h3><p>正当准备开始下载node.js源码的时候，突然想起来，编译需要gcc编译器，这小子肯定没装吧，于是，敲下<code>gcc -v</code> 然后回车，一看结果，果然没装</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//依旧采用yum方式安装</span></div><div class="line">[root@localhost ~]<span class="meta"># yum install gcc -y</span></div><div class="line"><span class="comment">//等待一段时间，装好了以后检查下是否正确安装了</span></div><div class="line">[root@localhost ~]<span class="meta"># gcc -v</span></div></pre></td></tr></table></figure>
<h3 id="开始装node-js"><a href="#开始装node-js" class="headerlink" title="开始装node.js"></a>开始装node.js</h3><p>首先采用<code>mkdir /software</code> 命令，在根目录新建一个文件夹。</p>
<p>然后<code>cd /software</code> 命令，进入文件夹，习惯性的用<code>ls</code> 检查一下文件夹里有什么东西</p>
<p>然后，上node.js的官网<a href="https://nodejs.org/en/" title="点击前往" target="_blank" rel="external">https://nodejs.org/en/</a>，进入下载页面<a href="https://nodejs.org/en/download/" title="点击前往" target="_blank" rel="external">https://nodejs.org/en/download/</a>，找到source Code，右键复制其下载链接</p>
<p>回到我们的命令行</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">//在命令行输入下面命令，链接为刚刚复制的源码的下载链接</div><div class="line">[root@localhost software]<span class="comment"># wget https://nodejs.org/dist/v6.10.0/node-v6.10.0.tar.gz</span></div><div class="line"></div><div class="line">//我忐忑的敲下回车，发现惊呆我了，真是秒下啊</div><div class="line">--<span class="number">2017</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">00</span>:<span class="number">44</span>:<span class="number">29</span>--  https://nodejs.org/dist/v6.<span class="number">10.0</span>/<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line">Resolving nodejs.org... <span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">172</span>e, <span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">162</span>e, <span class="number">104.20</span>.<span class="number">22.46</span>, ...</div><div class="line">Connecting to nodejs.org|<span class="number">2400</span>:cb00:<span class="number">2048</span>:<span class="number">1</span>::<span class="number">6814</span>:<span class="number">172</span>e|:<span class="number">443</span>... connected.</div><div class="line">HTTP request sent, awaiting response... <span class="number">200</span> OK</div><div class="line">Length: <span class="number">26706815</span> (<span class="number">25M</span>) [application/gzip]</div><div class="line">Saving to: `<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz'</div><div class="line"></div><div class="line"><span class="number">100</span>%[====================================================&gt;] <span class="number">26</span>,<span class="number">706</span>,<span class="number">815</span>  <span class="number">15.5M</span>/s   <span class="keyword">in</span> <span class="number">1.6s</span>    </div><div class="line"></div><div class="line"><span class="number">2017</span>-<span class="number">03</span>-<span class="number">20</span> <span class="number">00</span>:<span class="number">44</span>:<span class="number">31</span> (<span class="number">15.5</span> MB/s) - `<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz' saved [<span class="number">26706815</span>/<span class="number">26706815</span>]</div><div class="line"></div><div class="line">//用ls检查下</div><div class="line">[root@localhost software]<span class="comment"># ls</span></div><div class="line"><span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line"></div><div class="line">//解压源码包，解压要等待一会儿</div><div class="line">[root@localhost software]<span class="comment"># tar -xzvf node-v6.10.0.tar.gz</span></div><div class="line"></div><div class="line">//解压成功</div><div class="line">[root@localhost software]<span class="comment"># ls</span></div><div class="line"><span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>  <span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>.tar.gz</div><div class="line"></div><div class="line">// cd到<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">10.0</span>目录</div><div class="line">[root@localhost software]<span class="comment"># cd node-v6.10.0</span></div><div class="line"></div><div class="line">//怀着激动的心情，开始编译（漫长的等待……）</div><div class="line">[root@localhost software]<span class="comment"># ./configure </span></div><div class="line">[root@localhost software]<span class="comment"># make</span></div><div class="line"></div><div class="line">//开始安装</div><div class="line">[root@localhost software]<span class="comment"># make install</span></div></pre></td></tr></table></figure>
<p>如果上述步骤，你成功了，恭喜你，你已经成功的安装了node.js最新版本。但是很遗憾，我在同学的服务器上一直编译没通过，太多依赖没安装了，懒得给他一个个手动安装了，太耗时间了……于是我放弃了源码的安装，采用一种投机取巧的方式</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//yum安装EPEL库</div><div class="line">[root@localhost ~]<span class="comment"># yum install epel-release</span></div><div class="line"></div><div class="line">//yum安装<span class="keyword">node</span>.<span class="title">js</span></div><div class="line">[root@localhost ~]<span class="comment"># yum install nodejs -y</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>的安装情况，发现版本太低</div><div class="line">[root@localhost ~]<span class="comment"># nodejs -v</span></div><div class="line">v0.<span class="number">10.48</span></div><div class="line"></div><div class="line">//先安装npm包管理工具</div><div class="line">[root@localhost ~]<span class="comment"># yum install npm -y</span></div><div class="line"></div><div class="line">//升级npm到最新版本</div><div class="line">[root@localhost ~]<span class="comment"># npm install -g npm</span></div><div class="line"></div><div class="line">//安装<span class="keyword">node</span>.<span class="title">js</span>版本管理工具</div><div class="line">[root@localhost ~]<span class="comment"># npm install -g n</span></div><div class="line"></div><div class="line">//升级<span class="keyword">node</span>.<span class="title">js</span>到稳定版本</div><div class="line">[root@localhost ~]<span class="comment"># n stable</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>版本，发现没有生效</div><div class="line">[root@localhost ~]<span class="comment"># node -v</span></div><div class="line"></div><div class="line">//编辑环境配置文件：</div><div class="line">[root@localhost ~]<span class="comment"># vim ~/.bash_profile</span></div><div class="line"></div><div class="line">//将下面两行代码插入到文件末尾：</div><div class="line">export <span class="attr">N_PREFIX=</span>/opt/<span class="keyword">node</span> <span class="title">#node</span>实际安装位置，我的电脑上是/usr/local/n/versions/<span class="keyword">node</span><span class="title">/</span></div><div class="line">export <span class="attr">PATH=</span>$N_PREFIX/bin:$PATH</div><div class="line"></div><div class="line">//再次执行升级<span class="keyword">node</span>.<span class="title">js</span>到稳定版本的命令</div><div class="line">[root@localhost ~]<span class="comment"># n stable</span></div><div class="line"></div><div class="line">//检查<span class="keyword">node</span>.<span class="title">js</span>版本，安装成功了</div><div class="line">[root@localhost ~]<span class="comment"># node -v</span></div><div class="line">v7.<span class="number">6.0</span></div></pre></td></tr></table></figure>
<h3 id="安装Mongodb"><a href="#安装Mongodb" class="headerlink" title="安装Mongodb"></a>安装Mongodb</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个Mongodb的yum源</span></div><div class="line">[root<span class="meta">@localhost</span> ~] vim <span class="regexp">/etc/</span>yum.repos.d/mongodb-org<span class="number">-3.4</span>.repo</div><div class="line"></div><div class="line"><span class="comment">//将文件内容改成,保存退出</span></div><div class="line">[mongodb-org<span class="number">-3.4</span>]</div><div class="line">name=MongoDB Repository</div><div class="line">baseurl=<span class="string">https:</span><span class="comment">//repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/</span></div><div class="line">gpgcheck=<span class="number">1</span></div><div class="line">enabled=<span class="number">1</span></div><div class="line">gpgkey=<span class="string">https:</span><span class="comment">//www.mongodb.org/static/pgp/server-3.4.asc</span></div><div class="line"></div><div class="line"><span class="comment">//安装Mongodb</span></div><div class="line">[root<span class="meta">@localhost</span> ~] yum install -y mongodb-org</div></pre></td></tr></table></figure>
<p>如果你的服务器装的是64位系统，那么恭喜你，mongodb就安装成功了，但是很遗憾，我之前没反应过来，同学的这个服务器是32位系统的，结果肯定是安装失败了。</p>
<p>然后去mongodb官网看了下，发现，原来新版本的没有32位的编译好的版本，无奈只有找了一个2.6版本的32位linux编译好的文件</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/<span class="regexp">/用wget下载</span></div><div class="line">[root@localhost software] wget https:/<span class="regexp">/fastdl.mongodb.org/linux</span><span class="regexp">/mongodb-linux-i686-v2.6-latest.tgz</span></div><div class="line"></div><div class="line">/<span class="regexp">/解压</span></div><div class="line">[root@localhost software] tar -xzvf mongodb-linux-i686-v2.6-latest.tgz</div><div class="line"></div><div class="line">/<span class="regexp">/复制到</span></div><div class="line">[root@localhost software] mkdir /usr<span class="regexp">/local/mongodb</span><span class="regexp">/</span></div><div class="line">[root@localhost software] # cp -r mongodb-linux-i686-v2.6-2017-02-14/* <span class="regexp">/usr/local</span><span class="regexp">/mongodb/</span></div></pre></td></tr></table></figure>
<p>到了这步mongodb就安装好了，但是现在还不能用，因为并没有添加到环境变量</p>
<p>于是回到家目录，写了两个脚本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># start_mongodb.sh</div><div class="line">/usr/local/mongodb/bin/mongod --dbpath=/usr/local/mongodb/data --logpath=/usr/local/mongodb/logs --logappend  --port=27017 --fork</div><div class="line">echo &apos;mongodb started!&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line"># stop_mongodb.sh</div><div class="line">/usr/local/mongodb/bin/mongod  --shutdown --dbpath /usr/local/mongodb/data/</div><div class="line">echo &apos;mongodb stoped&apos;</div></pre></td></tr></table></figure>
<p>写完赋与执行权限 <code>chmod +x start_mongodb.sh stop_mongodb.sh</code> ，别忘了在执行之前，执行<code>mkdir /usr/local/mongodb/data</code> 和<code>touch /usr/local/mongodb/logs</code> 命令，前者是用来创建mongodb数据库保存的位置，后者是用来创建日志保存的文件</p>
<p>对了，为了方便启动<strong>mongo</strong> 管理数据库，在多加上下面一行命令吧</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//添加mongo到执行环境</span></div><div class="line">[root<span class="meta">@localhost</span> ~] ln <span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>bin<span class="regexp">/mongo /</span>usr<span class="regexp">/bin/</span>mongo</div></pre></td></tr></table></figure>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>终于装好了Node.js的服务器开发环境了，虽然最后装的不是同学想要的源码版本的，但是也折腾了许久。当然如果你有兴趣装源码版本的，过程也大同小异，只不过可能装的过程会更坎坷一些吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近同学搞了个服务器，自己不太会装node.js的开发环境，于是我主动请缨给他搭建node.js的开发环境，想想自己刚好有个博客，于是就记录
    
    </summary>
    
      <category term="教程" scheme="http://www.wuzhiqin.tk/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="Linux" scheme="http://www.wuzhiqin.tk/tags/Linux/"/>
    
      <category term="node.js" scheme="http://www.wuzhiqin.tk/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>JS中&quot;for-in&quot;循环使用注意事项</title>
    <link href="http://www.wuzhiqin.tk//blog/js%E4%B8%AD-for-in-%E5%BE%AA%E7%8E%AF%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html"/>
    <id>http://www.wuzhiqin.tk//blog/js中-for-in-循环使用注意事项.html</id>
    <published>2017-03-19T06:59:30.000Z</published>
    <updated>2017-03-19T07:40:17.552Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习一本叫做<a href="https://github.com/lovefengruoqing/js-dateStructures-algorithms" title="点击前往我的Github查看具体介绍" target="_blank" rel="external">《数据结构与算法JavaScript描述》</a>的书，虽然这本书的质量并不是很高，但是对于我这个并非计算机科班出身的人来说，还算是一本不错的书。我没有学习过数据结构和算法，因此总感觉自己在写JS的过程中好像缺点什么，看别人的程序也看得懂，但是自己写就好像写不出来。写一个模块，不知道需要什么功能，不知道需要什么属性。后来看了这本书，才恍然大悟，原来是这些基本的数据结构，以及算法相关的知识我没学过，因此总是有种无从下手的感觉。</p>
<p>虽然用JS实现一种算法，并不是一个很好的主意。但是对于我这种C语言学的不精，Java也只是粗劣的涉猎过的人来说，无疑是一个学习数据结构和算法的不错的方式。</p>
<p>自己亲自构建一个队列，构建一个栈，构建一个列表，构建一个链表等过程，让我对编程有了新的认知，原来我们在写程序的是时候，并不是为了写程序而写程序，我们是带着一定目的性的。我们只是在我们使用的编程语言的基础上，通过我们编写的程序，封装抽象出我们想要的功能出来，然后向外提供一个接口。想想其实我们在做的事情，和构建一门新的更高级的编程语言也差不多了多少了，不过我们写程序的目的，并不是为了构建一门更高级的编程语言。想想，这就是编程的意义吧，通过这个过程，一步步简化操作，化繁为简。</p>
<p>废话不多说了，今天在学习，写程序的时候，开始写了这段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.table = new Array(137)</span></div><div class="line">HashTable.prototype.buildChains = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(index <span class="keyword">in</span> <span class="keyword">this</span>.table)&#123;</div><div class="line">		<span class="keyword">this</span>.table[index] =[]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后发现运行的过程中，死活通过不了，一直报错，最后找到这个地方，才恍然大悟，原来要换成这样才能正确的运行：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this.table = new Array(137)</span></div><div class="line">HashTable.prototype.buildChains = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="keyword">this</span>.table.length; i++)&#123;</div><div class="line">		<span class="keyword">this</span>.table[i] =[]</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来赶紧去查了一个 <code>for-in</code> 使用的规范，原来使用的过程要判断一下是否为空，否则就会抛出程序异常的错误。</p>
<blockquote>
<p>定义和用法:<br>for/in 语句用于循环对象属性。<br>循环中的代码每执行一次，就会对数组的元素或者对象的属性进行一次操作。<br>JavaScript 支持不同类型的循环：<br>for - 循环代码块一定的次数<br>for/in - 循环遍历对象的属性<br>while - 当指定的条件为 true 时循环指定的代码块<br>do/while - 同样当指定的条件为 true 时循环指定的代码块<br>注意： 不要使用 for/in 语句来循环数组的索引，你可以使用 for 语句替代。</p>
</blockquote>
<p>以上一段话引自<a href="http://www.runoob.com/jsref/jsref-forin.html" title="点击前往" target="_blank" rel="external">http://www.runoob.com/jsref/jsref-forin.html</a></p>
<p>原来自己一直用错<code>for-in</code>循环了^-^!!!，一直以来都用它来遍历数组，这不是一个很好的用法，还不如用for循环，要么就用forEach这个ES5中新增的方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在学习一本叫做&lt;a href=&quot;https://github.com/lovefengruoqing/js-dateStructures-algorithms&quot; title=&quot;点击前往我的Github查看具体介绍&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>http请求的不同方法</title>
    <link href="http://www.wuzhiqin.tk//blog/http%E8%AF%B7%E6%B1%82%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E6%B3%95.html"/>
    <id>http://www.wuzhiqin.tk//blog/http请求的不同方法.html</id>
    <published>2017-03-16T02:23:47.000Z</published>
    <updated>2017-03-16T04:21:38.614Z</updated>
    
    <content type="html"><![CDATA[<p>根据HTTP标准，HTTP请求卡可以使用过重请求方法。</p>
<p>HTTP1.0定义了三种请求方法：GET，POST和HEAD方法。</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p>
<h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>请求指定的页面信息，并返回实体主体。常见的输入网址，打开网页，一般都是采用GET方式来获取页面</p>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>POST就是向指定的资源去提交数据，例如提交表单或者上传文件等。数据被包含在请求体中，POST请求可能会导致新的资源的建立或者已有的资源的修改。</p>
<h3 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h3><p>类似于GET请求，只不过返回的响应中没有具体的内容，用于获取报头</p>
<h3 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h3><p>允许客户端查看服务器的性能。</p>
<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>从客户端向服务器传送的数据取代指定的文档的内容。主要作用是更新指定的数据资源</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>请求服务器删除指定的资源</p>
<h3 id="CONCECT"><a href="#CONCECT" class="headerlink" title="CONCECT"></a>CONCECT</h3><p>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</p>
<h3 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h3><p>回显服务器收到的请求，主要用于测试或诊断</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据HTTP标准，HTTP请求卡可以使用过重请求方法。&lt;/p&gt;
&lt;p&gt;HTTP1.0定义了三种请求方法：GET，POST和HEAD方法。&lt;/p&gt;
&lt;p&gt;HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。&lt;/p
    
    </summary>
    
      <category term="http" scheme="http://www.wuzhiqin.tk/categories/http/"/>
    
    
      <category term="http" scheme="http://www.wuzhiqin.tk/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>http基础知识</title>
    <link href="http://www.wuzhiqin.tk//blog/http%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html"/>
    <id>http://www.wuzhiqin.tk//blog/http基础知识.html</id>
    <published>2017-03-16T01:35:10.000Z</published>
    <updated>2017-03-16T02:17:56.819Z</updated>
    
    <content type="html"><![CDATA[<p>发送一个http请求以后，经历过的步骤：</p>
<ol>
<li><p>发送一个域名请求以后，如常见的<code>http://www.baidu.com</code> 等，浏览器先会搜索自身的DNS缓存，看一看是否有对应域名的IP，如果没有则进行下一步操作。如果你使用的是chrome浏览器，那么输入<code>chrome://net-internals/#dns</code> 然后敲回车就能看到chrome浏览器的dns缓存</p>
</li>
<li><p>搜索操作系统自身的DNS缓存，如果没找到进行下一步操作</p>
</li>
<li><p>读取本地的host文件，windows下就是保存在<code>C:\Windows\System32\drivers\etc\hosts</code> 路径中的这个文件里面，你可以试着将常见域名的ip设置在这个文件之中，省去了dns请求这个阶段，直接通过ip访问网站</p>
</li>
<li><p>浏览器发起一个DNS的系统调用，向宽带运营商发起一个DNS请求，然后宽带运营商服务器查看本身缓存，如果找到对应的域名和IP，那么就解析成功，返回对应的IP；如果没有找到dns缓存，运营商服务器会发起一个迭代DNS的解析请求。首先会问根域的服务器，请求对应的域名的ip，根域服务器保存的是顶级域的IP地址，于是返回对应顶级域的IP给宽带运营商服务器；然后宽带运营商服务器拿着这个顶级域的IP，向这个顶级域IP发起DNS解析请求，顶级域保存着对应域名提供商的IP地址，返回给运营商服务器；运营商服务器拿着这个IP，再次发起DNS解析请求，域名提供商服务器接收到请求，返回对应域名的IP；然后运营商服务器把结果返回给操作系统内核，同时缓存在自己的服务器上；操作系统内核拿到IP，返回给浏览器。（这差不多就是在浏览器输入一个网址，到查找到对应IP的全过程）</p>
</li>
<li><p>浏览器获得域名对应的IP地址后，发起经典的HTTP“三次握手”，建立连接</p>
<blockquote>
<p>第一次<br>第一次握手：建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认；SYN：同步序列编号（Synchronize Sequence Numbers）。<br>第二次<br>第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>第三次<br>第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1），此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。<br>注：以上内容引自百度百科<a href="http://baike.baidu.com/link?url=zThAigNNGrOdv7BdGToeZR8ZzAIrNOrE8MP2KW3ssHPIESBcGZmQpSYH9Hn5T2MN-rMjFvvhUEJtyqMAe_2k8GKRE-pN7OS4zhT0bR-7Y7vm5JjO_ODCYX6BUFI7YvTO" title="点击查看详细介绍" target="_blank" rel="external">三次握手</a></p>
</blockquote>
</li>
<li><p>TCP/IP连接建立起来以后，浏览器就可以向服务器发送HTTP请求了，比如说，用HTTP的GET方法请求一个根域里的一个域名，协议可以采取HTTP1.0的一个协议。</p>
</li>
<li><p>服务器接收到了请求，根据路径参数，经过后端的处理，将处理结果的数据返回给浏览器。如果请求是一个页面，那么将会把这个页面的html代码返回给浏览器</p>
</li>
<li><p>浏览器接收到了服务器返回的html代码，在浏览器解析和渲染这个页面的过程中，html代码中包含的js、css、图片等静态资源一样会通过上述步骤进行请求资源，然后获得对应的数据。</p>
</li>
<li><p>浏览器拿到所有的资源，对页面进行渲染，最终将一个完整的页面呈现在用户面前</p>
</li>
</ol>
<p>以上只是一个http请求过程的简单理解，真实的http请求的过程，比上面还要复杂。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发送一个http请求以后，经历过的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;发送一个域名请求以后，如常见的&lt;code&gt;http://www.baidu.com&lt;/code&gt; 等，浏览器先会搜索自身的DNS缓存，看一看是否有对应域名的IP，如果没有则进行下一步操作。如果你使用的
    
    </summary>
    
      <category term="http" scheme="http://www.wuzhiqin.tk/categories/http/"/>
    
    
      <category term="http" scheme="http://www.wuzhiqin.tk/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>由JavaScript阶乘函数中的递归算法对arguments.callee属性展开的思考</title>
    <link href="http://www.wuzhiqin.tk//blog/%E7%94%B1JavaScript%E9%98%B6%E4%B9%98%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E5%AF%B9arguments.callee%E5%B1%9E%E6%80%A7%E5%B1%95%E5%BC%80%E7%9A%84%E6%80%9D%E8%80%83.html"/>
    <id>http://www.wuzhiqin.tk//blog/由JavaScript阶乘函数中的递归算法对arguments.callee属性展开的思考.html</id>
    <published>2017-03-14T09:22:57.000Z</published>
    <updated>2017-03-14T13:50:52.171Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript的函数内部，包含着两者两个特殊的对象，分别是<code>arguments</code> 和 <code>this</code>。这篇文章，想讨论下arguments这个特性。</p>
<p>arguments是一个类数组对象，包含着传入函数中的所有参数。虽然arguments则主要用途是保存函数的参数，但是并不仅限于此，它还有一个名叫callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。</p>
<p>下面是一个经典的阶乘函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们都知道，定义阶乘函数的时候，一般都要用到递归算法。但是这种写法有一个不好的地方是，如果是一个有名字的函数，并且函数以后不会发生变化的话，这样用也无可厚非。但是问题是，这样做就将这个函数的执行与函数名factorial紧紧的<strong>耦合</strong> 在了一起。</p>
<p>如果我们这样用的话，就会很麻烦，如下所示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> func1 = factorial;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line"></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>可以看出来，一旦原函数发生了变化，那么将会影响阶乘函数的结果。</p>
<p>为了消除这种紧密的耦合现象，我们可以使用<code>arguments.callee</code> 这个函数属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num &lt;=<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在重写这个函数以后，没有再引用函数名factorial，这样，无论引用递归函数时候用的是什么名字，都能保证正常的完成递归调用。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func1 = factorial;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line"></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">func1(<span class="number">2</span>) 	<span class="comment">//2</span></div><div class="line">factorial(<span class="number">2</span>) 	<span class="comment">//0</span></div></pre></td></tr></table></figure>
<p>但是仅仅只是思考到这里，还不是一个正确的学习的态度，我很好奇，到底arguments是一个怎样的类数组对象呢？因此我用chrome控制台写了一个这样的函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>chrome浏览器可谓之Web前端开发中的利器，也是学习js的一把大杀器，丝毫不弱于任何其他语言的IDE</p>
<p>我在然后我紧接着调用这个函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用递归函数，防止打印出太多的结果，如实我把参数设为1</span></div><div class="line">factorial(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">//console.log(arguments)打印出的结果</span></div><div class="line">Arguments[<span class="number">1</span>]</div><div class="line">	<span class="number">0</span>: <span class="number">1</span></div><div class="line">	callee: factorial(num)</div><div class="line">		<span class="built_in">arguments</span>: <span class="literal">null</span></div><div class="line">		caller: <span class="literal">null</span></div><div class="line">		length: <span class="number">1</span></div><div class="line">		name: <span class="string">"factorial"</span></div><div class="line">		prototype: <span class="built_in">Object</span></div><div class="line">		__proto__: ()</div><div class="line">		[[FunctionLocation]]:</div><div class="line">		[[Scopes]]: Scopes[<span class="number">1</span>]</div><div class="line">		length: <span class="number">1</span></div><div class="line">	<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.iterator): values()</div><div class="line">	__proto__: <span class="built_in">Object</span></div><div class="line"></div><div class="line"><span class="comment">// console.log(arguments.callee)打印出的结果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//递归函数执行后的值</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<p>看到以上的结果，我想大部分人都应该明白了，原来arguments是一个类数组对象，它就是一个数组，这个数组包含当前函数的参数列表，但是它还有一个数组通常不具备的callee属性，这个属性指向的就是当前的函数。我原本以为这个arguments.callee随着函数的变化，也会对应的发生变化，比如说下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//将func1变量指向factorial对应的函数</span></div><div class="line"><span class="keyword">var</span> func1 = factorial</div><div class="line"></div><div class="line"><span class="comment">//将factorial重写</span></div><div class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//执行func1函数调用</span></div><div class="line">func1(<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="comment">//console.log(arguments)打印出的结果</span></div><div class="line"> [<span class="number">1</span>] 	<span class="comment">//类数组对象</span></div><div class="line"><span class="comment">// console.log(arguments.callee)打印出的结果</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//递归函数执行后得到的值</span></div><div class="line"> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>可以看到的是，虽然我修改了factorial函数，但是此时，arguments.callee调用的却仍然是原来的factorial函数，于是接下来我打印了以下此时func1函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(func1)</div><div class="line"></div><div class="line"><span class="comment">//结果</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*<span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来，你执行<code>var func1 = factorial</code> 这项操作以后，就相当于给func1存了一份factorial函数的副本，你修改了windows中的factorial，却不会修改这个副本。</p>
<p>但是问题又来了，如果我不用递归，也就是采用这种<code>return num*factorial(num-1)</code> 的方式呢？是不是也是存了一个副本，但是为什么执行的结果却不一样呢？为了印证我的猜测，我做了如下调整：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//递归函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//赋给变来那个func2</span></div><div class="line"><span class="keyword">var</span> func2 = factorial</div><div class="line"></div><div class="line"><span class="comment">//改变factorial函数</span></div><div class="line">factorial=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">0</span>&#125;</div><div class="line"></div><div class="line"><span class="comment">//执行func2(1)</span></div><div class="line">func2(<span class="number">1</span>)</div><div class="line">[<span class="number">1</span>]</div><div class="line">	<span class="number">0</span>: <span class="number">1</span></div><div class="line">	callee: factorial(num)</div><div class="line">	length: <span class="number">1</span></div><div class="line">	<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.iterator): values()</div><div class="line">	__proto__: <span class="built_in">Object</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"> <span class="number">0</span></div><div class="line"></div><div class="line"><span class="comment">//打印func2函数</span></div><div class="line"><span class="built_in">console</span>.log(func2)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">	<span class="keyword">if</span>(num&lt;<span class="number">1</span>)&#123;</div><div class="line">		<span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">		<span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee)</div><div class="line">		<span class="keyword">return</span> num*factorial(num<span class="number">-1</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出来，基本没什么变化，func2同样是copy了一遍开始的factorial函数的，保存了副本，即使修改了factorial函数以后，这个副本也没有发生任何变化，但是此时执行<code>func2(1)</code> 得到的结果却大相径庭的，等于了0。</p>
<p>这是为什么呢？</p>
<p>我思考了很久，得出了以下结论：</p>
<blockquote>
<p>原来，根本就没有这么复杂。当你把a函数赋给b函数的时候，相当于copy了a函数当时状态的一个副本给b函数（注：姑且这么理解吧，其实函数的名字只不过是一个指针而已，指向堆内存中存储的一个函数。将a函数赋给b函数，就是将a的指针复制给b一份，后来修改了a，就导致a的指针指向修改后的函数，但是b指向的堆中的那个函数并没有发生变化。），除非你直接修改b函数存下来的这个副本，否则，你修改原函数a是不会对这个副本造成什么副作用。但是如果这个副本里，引用了这个原函数a本身的话。在执行的过程中，他就会调用这个修改后的a函数了。我觉得原因是因为，这个a函数与b函数是存在于window作用域中的，但是这个副本并不是，它只是一直保持着那个赋值时候的状态，只不过JavaScript执行环境偷了一个懒，没有把这个副本函数的名字给替换成b的变量名而已。但其实这个副本函数的名字没什么作用了，也只是一个代号而已，你无法在函数中用这个副本的名字调用它本身，只能用<code>arguments.callee</code> 而以。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript的函数内部，包含着两者两个特殊的对象，分别是&lt;code&gt;arguments&lt;/code&gt; 和 &lt;code&gt;this&lt;/code&gt;。这篇文章，想讨论下arguments这个特性。&lt;/p&gt;
&lt;p&gt;arguments是一个类数组对象，包含着传入函数中的所有参
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发过程中的一些基本概念(持续更新……)</title>
    <link href="http://www.wuzhiqin.tk//blog/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E2%80%A6%E2%80%A6%EF%BC%89.html"/>
    <id>http://www.wuzhiqin.tk//blog/前端开发过程中的一些基本概念（持续更新……）.html</id>
    <published>2017-03-14T01:30:25.000Z</published>
    <updated>2017-03-14T09:14:18.340Z</updated>
    
    <content type="html"><![CDATA[<h3 id="物理像素（physical-pixel）"><a href="#物理像素（physical-pixel）" class="headerlink" title="物理像素（physical pixel）"></a>物理像素（physical pixel）</h3><p>像素是指，显示器上最小的物理显示单元。在操作系统的调度下，每一个设备显示的最大分辨率就叫最大物理像素</p>
<h3 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h3><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。</p>
<p>可以看出来，物理像素和设备独立像素之间是存在一定的对应关系的，这个对应关系就是接下来要说的 <strong>设备像素比</strong> </p>
<h3 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h3><p>设备像素比，简称dpr，定义了物理像素和设备独立像素之间的对应关系，它的值可以表示为下面的公式：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">dpr</span> = 物理像素/设备独立像素		//在X方向或者Y方向上</div></pre></td></tr></table></figure>
<p>在JavaScript中，可以通过 <code>window.devicePixelRatio</code> 获取到当前设备的dpr。</p>
<p>而在css中，可以通过 <code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code> 和 <code>-webkit-max-device-pixel-ratio</code> 进行媒体查询，对不同dpr的设备，做一些样式适配(这里只针对webkit内核的浏览器和webview)。</p>
<hr>
<p>先看一张图片</p>
<p><img src="http://wx3.sinaimg.cn/large/7235c1ccly1fdm4tzqh1cg20q70f9q32.gif" alt="img" title="非原创，图片来自网络"></p>
<p>由上图可以看出，同样是<code>height: 2px; width: 2px;</code> 的css样式，但是所包含的像素点的个数是不同的，前者是4个，而后者是前者的4倍为16个像素点。</p>
<p>因此在不同的屏幕上，虽然css所呈现的大小（物理尺寸）是一致的，但是所对应的物理像素个数可能并不相同。</p>
<hr>
<h3 id="位图像素"><a href="#位图像素" class="headerlink" title="位图像素"></a>位图像素</h3><p>位图像素是栅格图像（如：png，jpg，gif等）最小的数据单元，每一个位图像素都包含着一些自身的信息（如：颜色，透明度等）</p>
<p>我想这时候，有的童鞋就应该明白了为什么有的图片在有的屏幕上为什么显示起来不清晰的原因了。通常情况下，一个位图像素对应一个物理像素的情况下，图片会完美清晰地展示在屏幕上。但是在某些屏幕上，如retina屏幕，一个位图像素对应四个物理像素（retina屏幕的dpr为2）如下图所示的状况：</p>
<p><img src="http://wx3.sinaimg.cn/large/7235c1ccly1fdm5b9dsspj20du04mt8w.jpg" alt="img" title="图片来自网络"></p>
<p>由于正常情况下，一个位图像素不会再进行分割，因此只能就近取色，从而导致图片产生模糊的情况。</p>
<p>因此，对于这个问题的解决方案，最好的就是采用多倍像素图片的方式。</p>
<p>比如，你需要一张<code>200x400px</code> 的图片，那么你提供一张<code>400x800px</code> 的图片，就能很好的解决在retina屏幕上显示不清晰的状况了。</p>
<p>也许有的童鞋又要问了，你每一个px的位图像素素点的个数变成了原来的4倍，虽然在retina屏幕上，刚好能够高清的显示，但是在普通的屏幕上一个物理像素点就会对应4个位图像素点，这样图片显示起来不还是会失真吗？</p>
<p>肯定会出现这个问题，这个问题的解决方案，就是通过一个叫做<code>downsampling</code>的过程，通过一定的算法，使呈现在屏幕上的图片只有原图的位图像素点的四分之一。肉眼看上去图片不会模糊，但是还是会缺少一些锐利度，或者有点色差，但是还在接受的范围内。总比放在retina屏幕上图片变模糊要来得更舒适一些吧，下面这张图片就显示了这个过程：</p>
<p><img src="http://wx1.sinaimg.cn/large/7235c1ccly1fdm5rtmwidj20du04j3yp.jpg" alt="img" title="图片来自网络"></p>
<p>但是用这个方法在移动端页面的开发过程中还是会存在着一定的问题，不管什么样的屏幕都加载一定的尺寸的图片，会影响用户的使用体验。本来普通的屏幕不需要加载那么大尺寸的图片，这样做不仅浪费流浪，还延缓了加载时间。</p>
<p>最好的做法就是通过css媒体查询或者javaScript的条件判断，在不同的dpr下，加载不同尺寸的图片。</p>
<h3 id="多屏适配问题"><a href="#多屏适配问题" class="headerlink" title="多屏适配问题"></a>多屏适配问题</h3><p>移动端布局，为了适配各种大屏手机，最好的方案莫过于使用相对单位<code>rem</code> </p>
<p>基于rem的原理，我们要做的就是：针对不同的手机 <strong>屏幕尺寸</strong> 和 <strong>dpr</strong> 动态的改变根节点的HTML的font-size的大小（基准值）。</p>
<p>rem的计算方法如下：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">rem = document.documentElement.clientWidth * dpr /10</span></div></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li><code>document.documentElement.clientWidth</code> 查询浏览器窗口的宽度</li>
<li><code>dpr</code> 为了在高清屏幕如retina上缩放（scale）<code>1/dpr</code> 倍</li>
<li>除以10，是为了取整，方便计算</li>
</ol>
<p>对于具体怎么实现，主要有两种方式</p>
<p>第一种：<br>css方式，可以通过媒体查询来得到设备的宽度，从而改变html的font-size:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 32<span class="selector-tag">px</span>);</div><div class="line"></div><div class="line"><span class="comment">/* iphone6 */</span></div><div class="line">@<span class="keyword">media</span> (min-device-width: <span class="number">375px</span>)&#123;</div><div class="line">	<span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 64<span class="selector-tag">px</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* iphone6 plus */</span></div><div class="line">@<span class="keyword">media</span> (min-device-width: <span class="number">414px</span>)&#123;</div><div class="line">	<span class="selector-tag">html</span>(<span class="selector-tag">font-size</span>: 75<span class="selector-tag">px</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是通过这种方式来动态的改变rem基准值，其实精度是不够的，比如：宽度为360px和320px的手机，因为屏幕宽度都小于375px，所以会被同等的对待，导致rem基准值相同，而事实上他们的屏幕的宽度并不相同，他们的布局也应该有所不同。最终，我们可以得出这个的结论，采用css媒体查询的做法，能用，但是无法做到足够的精确。</p>
<p>第二种：<br>JavaScript方式，通过上面的公式，计算出rem基准值，然后写入样式，真正的做到了动态布局</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dpr, rem, scale,</div><div class="line">	head = <span class="built_in">document</span>.head,</div><div class="line">	html = <span class="built_in">document</span>.documentElement,</div><div class="line">	style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>),</div><div class="line">	meat-view = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 定义计算方法</span></div><div class="line">dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span></div><div class="line">rem = html.clientWidth * dpr / <span class="number">10</span></div><div class="line">scale = <span class="number">1</span> / dpr</div><div class="line"></div><div class="line"><span class="comment">// 设置viewport，进行缩放，达到高清效果</span></div><div class="line">meat-view.setAttribute(<span class="string">'content'</span>, <span class="string">'width='</span> + dpr * html.clientWidth + <span class="string">',initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">', minimum-scale='</span> + scale + <span class="string">',user-scalable=no'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 动态写入样式</span></div><div class="line">head.appendChild(style);</div><div class="line">style.innerHTML = <span class="string">'html&#123;font-size:'</span> + rem + <span class="string">'px!important;&#125;'</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;物理像素（physical-pixel）&quot;&gt;&lt;a href=&quot;#物理像素（physical-pixel）&quot; class=&quot;headerlink&quot; title=&quot;物理像素（physical pixel）&quot;&gt;&lt;/a&gt;物理像素（physical pixel）&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="概念" scheme="http://www.wuzhiqin.tk/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>sass编译时候不支持中文字体的解决方案</title>
    <link href="http://www.wuzhiqin.tk//blog/sass%E7%BC%96%E8%AF%91%E6%97%B6%E5%80%99%E4%B8%8D%E6%94%AF%E6%8C%81%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
    <id>http://www.wuzhiqin.tk//blog/sass编译时候不支持中文字体的解决方案.html</id>
    <published>2017-03-09T01:42:49.000Z</published>
    <updated>2017-03-09T02:02:50.315Z</updated>
    
    <content type="html"><![CDATA[<p>今天在工作的时候，用到sass，编译的时候遇到了这个问题：</p>
<figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 5 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure>
<p>开始我还以为是我代码写的有问题，以为不能采用如下方式写代码：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font</span>: <span class="number">2rem</span>/<span class="number">2</span> <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>后来我将代码改成这样，不采用简写的方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">font-style</span>:  <span class="string">"黑体"</span>,<span class="string">"微软雅黑"</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>没想到编译还是不通过，还是报错：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Error: </span>Invalid GBK character "\xE9"</div><div class="line">        on line 7 of scss.scss</div><div class="line">  Use --trace for backtrace.</div></pre></td></tr></table></figure></p>
<p>后来我仔细的揣摩了以下报错的内容，然后变成下面这样，就不报错了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h1</span>&#123;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">2rem</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">2</span>;</div><div class="line">	<span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</div><div class="line">	<span class="attribute">width</span>: <span class="number">30%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来是中文字体搞得鬼……后来我上网找了一下解决方案，大致有几种解决方案吧</p>
<ol>
<li><p>第一种方案:在scss文件第一行加上这行代码 <code>@charset &quot;utf-8&quot;</code> ,再次编译的时候，就不会报错，能正常的编译出来了。但是这个方法有个致命的缺点，就是太麻烦了，每次写sass之前都要加上一行这个代码，多麻烦。</p>
</li>
<li><p>第二种方案：如果你采用的是ruby环境安装的sass，那么你只需要在安装sass这个模块的目录中，找到 <code>engine.rb</code> 文件，打开以后，在最末行添上如下一行代码，然后保存退出，即可正常编译，一劳永逸的解决方法</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Encoding.default_external = Encoding.find(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      sass编译报错的时候，一些解决方案
    
    </summary>
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/categories/sass/"/>
    
    
      <category term="sass" scheme="http://www.wuzhiqin.tk/tags/sass/"/>
    
      <category term="报错" scheme="http://www.wuzhiqin.tk/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>CSS属性选择器</title>
    <link href="http://www.wuzhiqin.tk//blog/CSS%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8.html"/>
    <id>http://www.wuzhiqin.tk//blog/CSS属性选择器.html</id>
    <published>2017-03-07T02:29:31.000Z</published>
    <updated>2017-03-07T07:08:32.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常规属性选择器"><a href="#常规属性选择器" class="headerlink" title="常规属性选择器"></a>常规属性选择器</h2><h3 id="根据attribute通配"><a href="#根据attribute通配" class="headerlink" title="根据attribute通配"></a>根据attribute通配</h3><p>常规的属性选择器，采用 <code>element[attribute]</code> 方式，即可选中想要的元素，然后添加对应的css样式</p>
<h3 id="根据具体的property选择"><a href="#根据具体的property选择" class="headerlink" title="根据具体的property选择"></a>根据具体的property选择</h3><p>根据具体的property选择，采用 <code>elements[attribute=property]</code> 方式，即选出对应元素上有相应属性值的元素，添加对应的css样式。</p>
<p>采用这种模式的时候，如果一个attribute有多个property属性，那么就不会被匹配上</p>
<h3 id="根据部分属性值选择"><a href="#根据部分属性值选择" class="headerlink" title="根据部分属性值选择"></a>根据部分属性值选择</h3><p>根据部分属性值选择，采用 <code>elements[attribute~=property]</code> 方式，这种方式和上一条 <strong>根据具体属性选择</strong> 方式很类似，只是在 <code>=</code> 前面加上了一个 <code>~</code> 符号。</p>
<h4 id="属性名为英文"><a href="#属性名为英文" class="headerlink" title="属性名为英文"></a>属性名为英文</h4><p>采用这种匹配模式的时候，值得注意的一点是，它匹配的是英文中的单词模式，如下面的例子：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="zhihu"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 会被正确的匹配上，链接中的下划线被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"zhihu html"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="属性名为中文"><a href="#属性名为中文" class="headerlink" title="属性名为中文"></a>属性名为中文</h4><p>但是如果attribute的property是中文写的，那么就不能够匹配的到，除非你加上空格，否则不能正确的匹配出来</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">a[title~="知乎"]&#123;</div><div class="line">	text-decoration: none;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"> <span class="comment">&lt;!-- 不会被正确的匹配上，链接中的下划线不会被去掉 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.zhihu.com"</span> <span class="attr">title</span>=<span class="string">"知乎网页"</span>&gt;</span>点击进入知乎首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="其他部分属性选择器"><a href="#其他部分属性选择器" class="headerlink" title="其他部分属性选择器"></a>其他部分属性选择器</h4><table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>[foo^=”bar”]</td>
<td>选择foo属性值以“bar”开头的所有元素</td>
</tr>
<tr>
<td>[foo$=”bar”]</td>
<td>选择foo属性值以“bar”结尾的所有元素</td>
</tr>
<tr>
<td>[foo*=”bar”]</td>
<td>选择foo属性值中包含字符串“bar”的所有元素</td>
</tr>
</tbody>
</table>
<h2 id="特定属性选择器"><a href="#特定属性选择器" class="headerlink" title="特定属性选择器"></a>特定属性选择器</h2><p>这个特定属性选择器一般用于通配所有的元素中的一类元素，采用“*”选择所有元素，基本格式如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">--- css代码 ---</div><div class="line">*[lang|="en"]&#123;</div><div class="line">	color: red;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--- html部分代码 ---</div><div class="line"><span class="comment">&lt;!-- 能够匹配前三个，而后两个不会被选中 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span>Greetings!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">lang</span>=<span class="string">"en-au"</span>&gt;</span>G'day!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">lang</span>=<span class="string">"fr"</span>&gt;</span>Bonjour!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">lang</span>=<span class="string">"cy-en"</span>&gt;</span>Jrooana!<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这个属性和部分属性选择器的格式有点类似，但是这个选择器有点变态的地方是，它匹配的property不是英文单词，而是一个个字母，也就是说，如果你属性值采用了中文，也能轻松匹配了。</p>
]]></content>
    
    <summary type="html">
    
      深入学习css属性选择器的笔记
    
    </summary>
    
      <category term="css" scheme="http://www.wuzhiqin.tk/categories/css/"/>
    
    
      <category term="css" scheme="http://www.wuzhiqin.tk/tags/css/"/>
    
      <category term="note" scheme="http://www.wuzhiqin.tk/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>hexo常见命令</title>
    <link href="http://www.wuzhiqin.tk//blog/hexo%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4.html"/>
    <id>http://www.wuzhiqin.tk//blog/hexo常见命令.html</id>
    <published>2017-03-05T06:08:26.000Z</published>
    <updated>2017-03-22T04:49:26.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正文前的絮絮叨叨之言"><a href="#正文前的絮絮叨叨之言" class="headerlink" title="正文前的絮絮叨叨之言"></a>正文前的絮絮叨叨之言</h2><p>本人其实并不是一个很勤奋有毅力的人，之前很多曾信誓旦旦的说过要坚持下去的事情，最终大都不了了之了。回想起来，我这辈子，到现在为止，坚持最长时间的事情大概就是<em>做一名周杰伦的歌迷</em> 吧，而第二长的事情大概就是谈恋爱吧。但是其实这也并非是一件羞于开口向外人道的事情吧，毕竟，我本来就是一名普通的再普通不过的人了。个人也一直都比较懒，学过很多东西，但是由于不愿意记笔记，不愿意定期去回顾，大多忘得差不多了。这就是像我这类人的悲哀吧，从不敢开口说自己精通什么东西，只能说，自己曾经做过，并且能很快的上手。</p>
<p>昨天用hexo搭建了一个个人的博客，虽然搭好了以后，用起来很简单，建个文件放里面，敲击命令就能自动上传发布。但是你要为我每一步都要使用到哪些详细的命令，我多半回答不上来，最后打开chrome，用百度或Google找对应的操作步骤。其实想来，实在是一个很浪费时间的举措，明明自己曾经做过，会做的事情，却只记得住大概步骤，还得费心费力的去查找答案。说白了就是懒吧，既不愿意动脑筋记下来，也不愿意费力写下来。</p>
<p>想来，从下定决定当程序员的时候开始，到现在，还真的做了不少笔记。要知道，我以前上课都从来不写笔记的，即使当时迫于老师的压力写了，过后也基本不会再去翻看自己的笔记，表面上是说觉得自己的字太丑了，不愿意看，其实深层次的原因还是因为自己根本就没有用心去做这件事情吧，就像自己从来没有用心的想把自己的字练好一样。虽然做了很多的笔记，但是基本上也就当时做了，后来基本上就没怎么看过，更别说按照<strong>艾宾浩斯记忆曲线</strong> 的规则去做了。</p>
<p>絮絮叨叨的废话太多了，讲大道理好像也没什么屁用，<strong>务实</strong> 才是第一要务吧。</p>
<h2 id="hexo常见命令"><a href="#hexo常见命令" class="headerlink" title="hexo常见命令"></a>hexo常见命令</h2><h3 id="hexo的安装"><a href="#hexo的安装" class="headerlink" title="hexo的安装"></a>hexo的安装</h3><ol>
<li>hexo的安装：<code>npm install hexo -g</code></li>
<li>hexo的升级：<code>npm update hexo -g</code></li>
<li>hexo的初始化：<code>hexo init</code></li>
</ol>
<p>ps:这些命令都不难，用过node.js的童鞋，学这个简直是小儿科对吧。当然可能对某些习惯于用鼠标的童鞋来说，还是很有难度的，毕竟大多数人用的都是windows系统的吧，也不喜欢用命令行操作。不过我想，对于大多数想成为程序员的童鞋来说，命令行操作只是基本功吧，不会命令行操作的童鞋赶紧偷偷去恶补下吧，简直是居家旅行必备的大杀器（咳咳……）。</p>
<h3 id="hexo的简写命令"><a href="#hexo的简写命令" class="headerlink" title="hexo的简写命令"></a>hexo的简写命令</h3><ol>
<li>新建文章：<code>hexo new &quot;文章&quot;</code> 等同于 <code>hexo n &quot;文章&quot;</code></li>
<li>生成静态资源文件：<code>hexo generate</code> 等同于 <code>hexo g</code>（话说，博主的英文单词水平太烂，经常把generate打错^_^!）</li>
<li>启动服务器： <code>hexo server</code> 等同于 <code>hexo s</code> （当然这个命令后面是可以带参数的，如更改端口号和ip等）</li>
<li>一键发布博客：<code>hexo deploy</code> 等同于 <code>hexo d</code> （这个deploy也是我经常敲错的单词之一啊^_^!）</li>
</ol>
<h3 id="可能会用到的命令"><a href="#可能会用到的命令" class="headerlink" title="可能会用到的命令"></a>可能会用到的命令</h3><ol>
<li><p><code>hexo clean</code><br>清除缓存文件，也就是清除本地缓存的静态页面文件，通俗的说就是把<code>public/</code> 文件夹给清空了，然后可以再通过<code>hexo generate</code> 重新成成静态资源文件。</p>
</li>
<li><p><code>hexo new page &quot;命令&quot;</code><br><strong>命令</strong> 可以换成<strong>about、categories、tags</strong> 等，可以生成博客中的标签、分类页面等。</p>
</li>
</ol>
<h3 id="常见的文章头的写法"><a href="#常见的文章头的写法" class="headerlink" title="常见的文章头的写法"></a>常见的文章头的写法</h3><p>每个页面都需要页面头部才能正常的生成发布，一般都是这个样子的：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> 文章标题</div><div class="line"><span class="attr">date:</span> 文章的时间</div><div class="line"><span class="attr">categories:</span> 分类</div><div class="line"><span class="attr">tags:</span></div><div class="line">	- 标签<span class="number">1</span></div><div class="line">	- 标签<span class="number">2</span></div><div class="line"><span class="attr">description:</span> 文章描述，有利于SEO吧</div><div class="line"><span class="attr">keywords:</span> 文章关键字</div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>本文章参考了以下两篇博主的文章：<br><strong>小弟调调</strong> 博主的<a href="https://segmentfault.com/a/1190000002632530" title="点击进入参考文章" target="_blank" rel="external">hexo常用命令笔记</a><br><strong>丁盛</strong> 博主的<a href="http://www.cnblogs.com/-ding/p/6009418.html" title="点击进入参考文章" target="_blank" rel="external">Hexo 最常用的几个命令</a></p>
<p>PS：如果有兴趣的童鞋，可以自行前往阅读</p>
]]></content>
    
    <summary type="html">
    
      记录一些hexo的常用命令
    
    </summary>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/categories/hexo/"/>
    
    
      <category term="笔记" scheme="http://www.wuzhiqin.tk/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="hexo" scheme="http://www.wuzhiqin.tk/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博文</title>
    <link href="http://www.wuzhiqin.tk//blog/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87.html"/>
    <id>http://www.wuzhiqin.tk//blog/我的第一篇博文.html</id>
    <published>2017-03-04T04:21:43.000Z</published>
    <updated>2017-03-15T13:38:33.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h3><p>之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏嘘不已吧。不过转念一想，只是因为自己之前的想法太过天真了吧。有些时候，自己还没有本事“造轮子”的时候，何妨不用一下拿来主义呢？只要不是全盘照抄，光copy不动脑筋，也是一种学习吧。</p>
<p>我接触前端这个领域，想来也才不到一年的时间吧，不能说取得了多大的成就，但是好歹现在两只脚都迈进了前端的大门了吧。想想一年前的这个时候，我还对这些都一无所知，现在想来，好像自己当时都活的浑浑噩噩的，每天过的都没什么动力，拒绝面对现实，压根就不敢去思考该如何面对马上就要来临的毕业季。</p>
<p>前段时间，找工作的时候，被现实来了重重的一击。我突然明白过来一个道理：“<em>其实最可怕的不是你不如别人，而是蓦然回首，你发现别人都在进步，而你依旧在原地踏步。</em>”。当然并不是说我之前一直都不明白这个道理，只不过是在那个时候，对这句话有了尤为深刻的理解。原来一直以来，我并不优秀，或者说，我曾经好像优秀过。过往的总总不过是过往云烟罢了，现实才是急需要去面对的唯一迫切的事情。人真的只有到了压力逼迫自己的时候，才会进步神速，也许存在那种有着非凡的毅力的人，但是我根本不可能是那种人。所以在那段时间里，只要我一睁开眼，就好像感觉到压力扑面而来，仿佛快要实质化了一般。对我来说，找不到工作，就等同于一个失败的人生。自己曾经所拥有的固执，拥有的高傲，拥有的冷酷，在现实的面包面前，是多么的卑微，多么的微不足道啊。</p>
<p>之前放弃考研，打算转行当程序员的时候，压根就没有深入的了解过这个行业，更加没有深入的评估过自己的实力，以为好像一切都很简单，好像自己天生就适合干这个，好像自带天赋技能点一样。一切的一切，只有在经历过痛苦，经历过失败以后才明白，原来，<strong>时间</strong>加<strong>勤奋</strong>才等同于天分吧。没有人生来就适合干某一行，没有人生来就在某件事情上点满了技能点，至少对于我等凡夫俗子来说是这样的吧。</p>
<p>曾经所经历过得一切，现在再怎么哀怨叹息都于事无补，我们要做的只是收拾好心情，重装上阵而已吧。曾经自己卑微过，懦弱过，无助过也堕落过，但是这一切都过去了，该做的是，现在努力奋斗，过好每一天，让悲剧不要再未来重演吧。</p>
<h3 id="收拾心情"><a href="#收拾心情" class="headerlink" title="收拾心情"></a>收拾心情</h3><p>今天大概花了一天的时间，建好了我人生中自建的第一个博客，还是有点小小的成就感的。以后时常写写博客，抒发一下心情，也记录以下自己生活学习的轨迹吧。</p>
<h3 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h3><ol>
<li><p>本博客，静态页面是挂载在Github-pages上面的，所以想要像我一样在弄个这个博客的童鞋，可以参考一下<a href="https://help.github.com/categories/github-pages-basics/" title="点击进入github pages介绍页面" target="_blank" rel="external">GitHub-pages</a></p>
</li>
<li><p>这个博客是参考了博主<a href="http://www.ezlippi.com/" title="点击进入ezlippi博主的博客" target="_blank" rel="external">ezlippi</a>的博客里的<a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html" title="点击进入ezlippi博主的博客文章" target="_blank" rel="external">Jekyll迁移到Hexo搭建个人博客</a>，里面内容写的很详细，如果有兴趣的童鞋可以参考博主的文章</p>
</li>
<li><p>当然，这个博客的搭建，离不开<a href="https://hexo.io/zh-cn/" title="点击进入Hexo官网" target="_blank" rel="external">Hexo</a>和<a href="http://theme-next.iissnan.com/" title="点击进入Next主题官网" target="_blank" rel="external">Next</a>的技术支持</p>
</li>
</ol>
<h3 id="申明"><a href="#申明" class="headerlink" title="申明"></a>申明</h3><p><em>本博客的素材资源，均来自网络。本博客非商业用途，如果原作者不允许使用，请联系我本人删除。谢谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; title=&quot;胡言乱语&quot;&gt;&lt;/a&gt;胡言乱语&lt;/h3&gt;&lt;p&gt;之前一直都有自己搭建一个博客的想法，但是每每想要付诸实践的之时，总是感叹工作量太大了，于是没多久就不了了之了，想来也是令人唏
    
    </summary>
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/categories/%E6%9D%82%E6%96%87/"/>
    
    
      <category term="杂文" scheme="http://www.wuzhiqin.tk/tags/%E6%9D%82%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>今天做过的一道js题目解析</title>
    <link href="http://www.wuzhiqin.tk//blog/%E4%BB%8A%E5%A4%A9%E5%81%9A%E8%BF%87%E7%9A%84%E4%B8%80%E9%81%93js%E9%A2%98%E7%9B%AE%E8%A7%A3%E6%9E%90.html"/>
    <id>http://www.wuzhiqin.tk//blog/今天做过的一道js题目解析.html</id>
    <published>2017-03-03T14:11:45.000Z</published>
    <updated>2017-03-04T13:03:00.375Z</updated>
    
    <content type="html"><![CDATA[<p>今天做题的时候，无意中做到一道这样的题：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>, <span class="string">"value"</span>:<span class="string">"2"</span>&#125;;</div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);</div></pre></td></tr></table></figure>
<p>初看的时候，感觉好简单，当时就不加思索的给出了<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;3&quot;}</code>这个答案。后来结果可想而知，当然是做错了。当时自我感觉羞愧难当，要说这本来就是个很基础的题目，正确的答案当然是这样了：<code>{&quot;key&quot;: &quot;1&quot;, &quot;value&quot;:&quot;21&quot;}</code>；看过答案以后，稍微思索一下，就能够得出这个答案，但是为什么初看的时候做错了呢？</p>
<p>后来想了想，归根到底，原因还是自己对<strong>JavaScript</strong>这门语言的基础知识掌握的不扎实。要说这道题目，主要考察的就是JavaScript中的<strong>Object对象</strong>、<strong>string字符串</strong>和<strong>“+”</strong>操作符的作用等知识点。如果说学JavaScript这么语言，没掌握这些基础的知识，那么你压根就不敢说自己懂JavaScript了吧。</p>
<p>具体的这些知识点的详解，在这里也不一一列举了，有太多书籍都有介绍过。如果有不懂的读者，可以自行百度或者通过看书去查阅了解。在这里，我推荐一本我觉得不错的书——《JavaScript高级程序设计》。</p>
<p>重新温习过相关的知识点以后，我又自己改动了一下题目，代码变成了这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 01</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="string">"key"</span>:<span class="string">"1"</span>,<span class="string">"value"</span>:<span class="string">"2"</span>&#125;;	<span class="comment">//属性名也可以采用字符串的设置方式</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//"1"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//"2"</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//string</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":"1", "value":"21"&#125;</span></div></pre></td></tr></table></figure>
<p>再改一下，变成下面的形式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//demo 02</span></div><div class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">key</span>:<span class="number">1</span>,<span class="attr">value</span>:<span class="number">2</span>&#125;;	<span class="comment">//属性名也可以采用这种方式，将属性值变成数值</span></div><div class="line"><span class="keyword">var</span> newObj = obj;</div><div class="line"><span class="built_in">console</span>.log(obj.key);	<span class="comment">//1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line"><span class="built_in">console</span>.log(newObj.value);	<span class="comment">//2</span></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> newObj.value);	<span class="comment">//number</span></div><div class="line">newObj.value += obj.key;</div><div class="line"><span class="built_in">console</span>.log(newObj);	<span class="comment">//&#123;"key":1, "value":3&#125;</span></div></pre></td></tr></table></figure>
<p>我相信，大部分入门了<strong>JavaScript</strong>这门语言的读者，看了上面两个demo变体之后，都应该一目了然，懂得了这道题的原理了。</p>
<p>编程语言的掌握真的不是一件易事，至少对于我这个刚入门的小白来说，的确是这样的。</p>
<p>本人只是一枚前端小白，以上有一些个人的拙见，若喷请轻喷，也欢迎同样跟我奋斗在前端道路上的新手童鞋跟我交流学习，我的个人邮箱是：<code>wuzhiqin@yahoo.com</code>，欢迎叨扰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做题的时候，无意中做到一道这样的题：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;lin
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://www.wuzhiqin.tk/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>mongodb数据库在Linux上的使用</title>
    <link href="http://www.wuzhiqin.tk//blog/2016%E2%80%8E-12%E2%80%8E-%E2%80%8E20%E2%80%8E-mongodb%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9C%A8Linux%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>http://www.wuzhiqin.tk//blog/2016‎-12‎-‎20‎-mongodb数据库在Linux上的使用.html</id>
    <published>2016-12-20T15:06:37.000Z</published>
    <updated>2017-03-21T08:01:43.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongodb数据库在Linux上的使用"><a href="#mongodb数据库在Linux上的使用" class="headerlink" title="mongodb数据库在Linux上的使用"></a>mongodb数据库在Linux上的使用</h1><h2 id="一、-mongodb的使用"><a href="#一、-mongodb的使用" class="headerlink" title="一、 mongodb的使用"></a>一、 mongodb的使用</h2><h3 id="1-which-mongod"><a href="#1-which-mongod" class="headerlink" title="(1)which mongod"></a>(1)<code>which mongod</code></h3><p>此步骤的作用是，检测mongodb是否在电脑上安装成功。</p>
<h3 id="2-mkdir-p-data-db"><a href="#2-mkdir-p-data-db" class="headerlink" title="(2)mkdir -p /data/db"></a>(2)<code>mkdir -p /data/db</code></h3><p>新建一个<code>/data/db</code> 文件夹，<code>-p</code>表示递归创建。</p>
<p>这个文件夹的作用是用来保存数据库的文件。</p>
<h3 id="3-df-lh"><a href="#3-df-lh" class="headerlink" title="(3)df -lh"></a>(3)<code>df -lh</code></h3><p>显示磁盘内存占用情况，<code>-h</code>表示人性化显示</p>
<h3 id="4-mongod-dbpath-data-db-port-27017"><a href="#4-mongod-dbpath-data-db-port-27017" class="headerlink" title="(4)mongod --dbpath=/data/db --port=27017"></a>(4)<code>mongod --dbpath=/data/db --port=27017</code></h3><p>此命令用来启动mongodb服务。</p>
<p><code>--dbpath</code>参数用来指定数据库保存的路径；<code>--port</code>参数用来指定端口，这个参数也可以不指定，如果没有指定，那么就会默认启用27017端口进行服务。</p>
<h3 id="5-mongod-dbpath-data-db-port-27017-fork-syslog"><a href="#5-mongod-dbpath-data-db-port-27017-fork-syslog" class="headerlink" title="(5)mongod --dbpath=/data/db --port=27017 --fork --syslog"></a>(5)<code>mongod --dbpath=/data/db --port=27017 --fork --syslog</code></h3><p>此命令是用采用守护进程的方式来启动mongod。</p>
<p><code>--syslog</code>代表将mongod产生的日志写入系统日志中。</p>
<h3 id="6-tail-f-var-log-messages"><a href="#6-tail-f-var-log-messages" class="headerlink" title="(6)tail -f /var/log/messages"></a>(6)<code>tail -f /var/log/messages</code></h3><p>此命令用来跟踪系统日志，当有新的日志被写入messages的时候，就会呗打印在终端界面上。</p>
<h3 id="7-关掉mongodb进程"><a href="#7-关掉mongodb进程" class="headerlink" title="(7)关掉mongodb进程"></a>(7)关掉mongodb进程</h3><p>用<code>mongod --shutdown</code>或者<code>kill 进程端口号</code>两种方式关掉mongodb进程</p>
<h3 id="8-将mongodb产生的日志写入指定文件夹"><a href="#8-将mongodb产生的日志写入指定文件夹" class="headerlink" title="(8)将mongodb产生的日志写入指定文件夹"></a>(8)将mongodb产生的日志写入指定文件夹</h3><p><code>mongod --dbpath=/data/db --port=27017 --fork --logpath=/var/log/mongod.log</code></p>
<p>表示将mongodb采用守护进程的方式运行，并且将日志写入指定路径中。</p>
<h3 id="9-另外在CentOS-7中，还可以采用一种方式启动mongodb程序"><a href="#9-另外在CentOS-7中，还可以采用一种方式启动mongodb程序" class="headerlink" title="(9)另外在CentOS 7中，还可以采用一种方式启动mongodb程序"></a>(9)另外在CentOS 7中，还可以采用一种方式启动mongodb程序</h3><p><code>service mongod start</code> 表示启用mongodb服务</p>
<p><code>service mongod stop</code>表示终止mongodb服务</p>
<p><code>service mongod restart</code>表示重启mongodb服务</p>
<p>要注意的是，此种启动方式是从官网上看到的，不知道默认系统日志会被写入到哪个路径，并且暂时还不知道数据库文件会被保存到哪个路径之中。</p>
<h2 id="二、mongodb客户端工具的使用"><a href="#二、mongodb客户端工具的使用" class="headerlink" title="二、mongodb客户端工具的使用"></a>二、mongodb客户端工具的使用</h2><h3 id="1-启动的两种方式"><a href="#1-启动的两种方式" class="headerlink" title="(1)启动的两种方式"></a>(1)启动的两种方式</h3><ol>
<li>第一种方式是直接在命令行上键入<code>mongo</code>命令，即可启动mongodb的客户端工具</li>
<li>第二种方式是指定ip地址和端口号，如<code>mongo 127.0.0.1:27017</code></li>
</ol>
<h3 id="2-显示数据库"><a href="#2-显示数据库" class="headerlink" title="(2)显示数据库"></a>(2)显示数据库</h3><p><code>show dbs</code>命令用来查看当前有哪些数据库</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">admin	(<span class="name">empty</span>)</div><div class="line">local	<span class="number">0.000</span>GB</div></pre></td></tr></table></figure>
<p>这两个数据库，是mongodb默认的数据库。</p>
<h3 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="(3)创建数据库"></a>(3)创建数据库</h3><p>不需要用专门的命令来创建数据库，采用<code>use example</code>命令就能切换到example数据库，当这个数据库不存在的时候，就会自动被创建。</p>
<p>但是此时你如果用<code>show dbs</code>命令依旧不能看到这个example数据库，只有当你真正的朝这个数据库中写入数据的时候，这个数据库才会被真正的创建出来</p>
<h3 id="4-创建集合"><a href="#4-创建集合" class="headerlink" title="(4)创建集合"></a>(4)创建集合</h3><p>使用<code>db.users.insert({&quot;username&quot;: &quot;fengruoqing&quot;});</code> ，创建了一个名为<code>users</code>集合，并为集合中添加第一条数据<code>({&quot;username&quot;: &quot;fengruoqing&quot;})</code></p>
<h3 id="5-显示集合"><a href="#5-显示集合" class="headerlink" title="(5)显示集合"></a>(5)显示集合</h3><p><code>show collections</code> ，显示当前数据库中的所有集合</p>
<h3 id="6-查看集合中所有数据的方法"><a href="#6-查看集合中所有数据的方法" class="headerlink" title="(6)查看集合中所有数据的方法"></a>(6)查看集合中所有数据的方法</h3><p><code>db.集合的名字.find()</code> ，就会显示集合中所有的数据</p>
<p><code>db.集合的名字.find().count()</code> ，此命令用来显示集合中含有的数据数据的条数</p>
<p><code>db.集合的名字.find({&quot;条件&quot;})</code> ，如果在<code>find()</code>中加入查找条件，就会列出所有符合条件的数据</p>
<h3 id="7-更新集合中的数据"><a href="#7-更新集合中的数据" class="headerlink" title="(7)更新集合中的数据"></a>(7)更新集合中的数据</h3><p><code>db.集合的名字.update()</code> ，使用<code>update()</code> 方法来更新函数</p>
<p><code>update({&quot;条件&quot;},{$set: {&quot;更新后的内容&quot;}},{multi: true})</code> ，第三个参数没有，或者为false的时候，默认只修改索引到的第一条数据。<br>而且如果不写<code>$set</code>关键字，与save有同样的效果。</p>
<h3 id="8-修改集合中的数据"><a href="#8-修改集合中的数据" class="headerlink" title="(8)修改集合中的数据"></a>(8)修改集合中的数据</h3><p><code>db.集合的名字.save({&quot;_id&quot;: ObjectId(&quot;xxxxxxxxxxxxxxx&quot;),&quot;key&quot;:&quot;value&quot;})</code></p>
<p>使用此命令，完全修改了集合中指定id的数据，直接就覆盖了原来的数据为新的数据</p>
<h3 id="9-删除集合中的数据"><a href="#9-删除集合中的数据" class="headerlink" title="(9)删除集合中的数据"></a>(9)删除集合中的数据</h3><p><code>db.集合的名字.remove({&#39;key&#39;:&#39;value&#39;}, true)</code></p>
<p>如果不指定第二个数据<code>true</code> 那么默认会删除所有符合K-V对的数据，如果指定了，只会删除集合里面第一个满足条件的数据</p>
<p>千万要注意的是，如果<code>remove({})</code> 里面传入了一个空的条件，那么集合中所有的数据都会被删除掉，但是这个删除数据的方法不会删除集合中的索引，只会删除数据。</p>
<p>如果要想把集合中索引和数据一并删除了，那么就必须使用这个方法<code>db.集合的名字.drop()</code></p>
<h3 id="10-导入数据"><a href="#10-导入数据" class="headerlink" title="(10)导入数据"></a>(10)导入数据</h3><p><code>mongoimport --db test --collection students --drop --file ./test.json -h 192.168.127.128:27017</code></p>
<p><code>mongoimport</code> 为导入数据的工具</p>
<p><code>--db test</code> 指定想要导入的数据库，此处为名为test的数据库</p>
<p><code>--collection  students</code> 指定想要导入的集合，此处导入名为students的集合中</p>
<p><code>--drop</code> 表示导入之前，清空这个集合中的数据</p>
<p><code>--file ./test.json</code> 指定想导入数据库的文件的路径，此处表示当前目录下的test.json文件</p>
<p><code>-h 192.168.127.128:27017</code> 指定主机和端口号</p>
<p>注意的是，导入之前要确保数据库和集合的存在性，不然可能会导入失败</p>
<h3 id="11-筛选数据"><a href="#11-筛选数据" class="headerlink" title="(11)筛选数据"></a>(11)筛选数据</h3><ol>
<li><p>精确匹配<br><code>db.students.find({&quot;key&quot;:&quot;value&quot;});</code> 精确匹配所有符合条件的数据，而且这个条件可以有多个</p>
</li>
<li><p>条件匹配<br><code>db.students.find({&quot;key&quot;: {$gt:&quot;value&quot;}});</code> 此处表示条件匹配，查找数据中“key”的值大于“value”的所有数据</p>
</li>
<li><p>或者条件<br><code>db.students.find({$or:[{&quot;key1&quot;:&quot;value2&quot;},{&quot;key2&quot;:&quot;value2&quot;}]});</code> 表示查找符合两个条件之一的数据</p>
</li>
<li><p>排序<br><code>db.students.find().sort({&quot;score.语文&quot;:1, &quot;age&quot;:1});</code><br>找到数据以后，加上<code>sort()</code>进行排序，sort函数接受排序条件，“key”里放筛选的类别，然后“value”为1；如果有多个条件，依次按条件进行调整</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;mongodb数据库在Linux上的使用&quot;&gt;&lt;a href=&quot;#mongodb数据库在Linux上的使用&quot; class=&quot;headerlink&quot; title=&quot;mongodb数据库在Linux上的使用&quot;&gt;&lt;/a&gt;mongodb数据库在Linux上的使用&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="mongodb" scheme="http://www.wuzhiqin.tk/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://www.wuzhiqin.tk/tags/mongodb/"/>
    
  </entry>
  
</feed>
